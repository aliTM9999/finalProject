
finalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0fc  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  0800a2c0  0800a2c0  0000b2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aef8  0800aef8  0000c278  2**0
                  CONTENTS
  4 .ARM          00000008  0800aef8  0800aef8  0000bef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af00  0800af00  0000c278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af00  0800af00  0000bf00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af04  0800af04  0000bf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000278  20000000  0800af08  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002454  20000278  0800b180  0000c278  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026cc  0800b180  0000c6cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d93a  00000000  00000000  0000c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c71  00000000  00000000  00029be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  0002d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001245  00000000  00000000  0002f018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e1e5  00000000  00000000  0003025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de82  00000000  00000000  0005e442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116693  00000000  00000000  0007c2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00192957  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007428  00000000  00000000  00192a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00199e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  00199e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00199f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000278 	.word	0x20000278
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a2a4 	.word	0x0800a2a4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000027c 	.word	0x2000027c
 80001fc:	0800a2a4 	.word	0x0800a2a4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <Kalmanfilter>:
#include <math.h>
#include "kalman_c.h"

float Kalmanfilter(float inputNum, kalman_state* kstate){
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f72:	6038      	str	r0, [r7, #0]

	if (isnan(kstate->x) || isnan(kstate->p) || isinf(kstate->x) || isinf(kstate->p) || (kstate->p + kstate->r==0)){
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f7a:	eef4 7a67 	vcmp.f32	s15, s15
 8000f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f82:	d63c      	bvs.n	8000ffe <Kalmanfilter+0x96>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f8a:	eef4 7a67 	vcmp.f32	s15, s15
 8000f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f92:	d634      	bvs.n	8000ffe <Kalmanfilter+0x96>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f9a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f9e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001094 <Kalmanfilter+0x12c>
 8000fa2:	eef4 7a47 	vcmp.f32	s15, s14
 8000fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000faa:	bfd4      	ite	le
 8000fac:	2301      	movle	r3, #1
 8000fae:	2300      	movgt	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	f083 0301 	eor.w	r3, r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d120      	bne.n	8000ffe <Kalmanfilter+0x96>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fc2:	eef0 7ae7 	vabs.f32	s15, s15
 8000fc6:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001094 <Kalmanfilter+0x12c>
 8000fca:	eef4 7a47 	vcmp.f32	s15, s14
 8000fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd2:	bfd4      	ite	le
 8000fd4:	2301      	movle	r3, #1
 8000fd6:	2300      	movgt	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f083 0301 	eor.w	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10c      	bne.n	8000ffe <Kalmanfilter+0x96>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	ed93 7a02 	vldr	s14, [r3, #8]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	d101      	bne.n	8001002 <Kalmanfilter+0x9a>
		return -1;
 8000ffe:	4b26      	ldr	r3, [pc, #152]	@ (8001098 <Kalmanfilter+0x130>)
 8001000:	e03f      	b.n	8001082 <Kalmanfilter+0x11a>
	}
	kstate->p = kstate->p + kstate->q;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	ed93 7a02 	vldr	s14, [r3, #8]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	edd3 7a00 	vldr	s15, [r3]
 800100e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	edc3 7a02 	vstr	s15, [r3, #8]
	kstate->k = kstate->p/(kstate->p + kstate->r);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	edd3 6a02 	vldr	s13, [r3, #8]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	ed93 7a02 	vldr	s14, [r3, #8]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	edd3 7a01 	vldr	s15, [r3, #4]
 800102a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800102e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	edc3 7a04 	vstr	s15, [r3, #16]
	kstate->x = kstate->x + kstate->k * (inputNum - kstate->x);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	ed93 7a03 	vldr	s14, [r3, #12]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	edd3 6a04 	vldr	s13, [r3, #16]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	edd3 7a03 	vldr	s15, [r3, #12]
 800104a:	ed97 6a01 	vldr	s12, [r7, #4]
 800104e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	edc3 7a03 	vstr	s15, [r3, #12]
	kstate->p = (1 - kstate->k) * kstate->p;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	edd3 7a04 	vldr	s15, [r3, #16]
 8001066:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800106a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	edd3 7a02 	vldr	s15, [r3, #8]
 8001074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	edc3 7a02 	vstr	s15, [r3, #8]

	return kstate->x;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
}
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	7f7fffff 	.word	0x7f7fffff
 8001098:	bf800000 	.word	0xbf800000
 800109c:	00000000 	.word	0x00000000

080010a0 <GenerateSineTable>:
uint32_t sine_table2[SINE_TABLE_SIZE2];
uint32_t sine_table3[SINE_TABLE_SIZE3];
uint32_t sine_table4[SINE_TABLE_SIZE4];

//function to fill needed arrays with samples of sine waves of different frequencies
void GenerateSineTable(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
	float32_t val=0;
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < SINE_TABLE_SIZE; i++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e034      	b.n	800111c <GenerateSineTable+0x7c>
    	val=(arm_sin_f32(2.0f * 3.141592653 * i / SINE_TABLE_SIZE) + 1.0f) * (amplitude / 2.0f);
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff fa4e 	bl	8000554 <__aeabi_i2d>
 80010b8:	a37b      	add	r3, pc, #492	@ (adr r3, 80012a8 <GenerateSineTable+0x208>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	f7ff fab3 	bl	8000628 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b78      	ldr	r3, [pc, #480]	@ (80012b0 <GenerateSineTable+0x210>)
 80010d0:	f7ff fbd4 	bl	800087c <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fd7c 	bl	8000bd8 <__aeabi_d2f>
 80010e0:	4603      	mov	r3, r0
 80010e2:	ee00 3a10 	vmov	s0, r3
 80010e6:	f006 fa51 	bl	800758c <arm_sin_f32>
 80010ea:	eef0 7a40 	vmov.f32	s15, s0
 80010ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010f6:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80012b4 <GenerateSineTable+0x214>
 80010fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fe:	edc7 7a01 	vstr	s15, [r7, #4]
        sine_table[i] = (uint32_t) val;
 8001102:	edd7 7a01 	vldr	s15, [r7, #4]
 8001106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110a:	ee17 1a90 	vmov	r1, s15
 800110e:	4a6a      	ldr	r2, [pc, #424]	@ (80012b8 <GenerateSineTable+0x218>)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < SINE_TABLE_SIZE; i++) {
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001122:	dbc6      	blt.n	80010b2 <GenerateSineTable+0x12>
    }
    val=0.0f;
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < SINE_TABLE_SIZE2; i++) {
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	e034      	b.n	800119a <GenerateSineTable+0xfa>
		val=(arm_sin_f32(2.0f * 3.141592653 * i / SINE_TABLE_SIZE2) + 1.0f) * (amplitude / 2.0f);
 8001130:	6938      	ldr	r0, [r7, #16]
 8001132:	f7ff fa0f 	bl	8000554 <__aeabi_i2d>
 8001136:	a35c      	add	r3, pc, #368	@ (adr r3, 80012a8 <GenerateSineTable+0x208>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fa74 	bl	8000628 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b5b      	ldr	r3, [pc, #364]	@ (80012bc <GenerateSineTable+0x21c>)
 800114e:	f7ff fb95 	bl	800087c <__aeabi_ddiv>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fd3d 	bl	8000bd8 <__aeabi_d2f>
 800115e:	4603      	mov	r3, r0
 8001160:	ee00 3a10 	vmov	s0, r3
 8001164:	f006 fa12 	bl	800758c <arm_sin_f32>
 8001168:	eef0 7a40 	vmov.f32	s15, s0
 800116c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80012b4 <GenerateSineTable+0x214>
 8001178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117c:	edc7 7a01 	vstr	s15, [r7, #4]
		sine_table2[i] = (uint32_t) val;
 8001180:	edd7 7a01 	vldr	s15, [r7, #4]
 8001184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001188:	ee17 1a90 	vmov	r1, s15
 800118c:	4a4c      	ldr	r2, [pc, #304]	@ (80012c0 <GenerateSineTable+0x220>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < SINE_TABLE_SIZE2; i++) {
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	3301      	adds	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011a0:	dbc6      	blt.n	8001130 <GenerateSineTable+0x90>
	}
    val=0.0f;
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SINE_TABLE_SIZE3; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e034      	b.n	8001218 <GenerateSineTable+0x178>
		val=(arm_sin_f32(2.0f * 3.141592653 * i / SINE_TABLE_SIZE3) + 1.0f) * (amplitude / 2.0f);
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f7ff f9d0 	bl	8000554 <__aeabi_i2d>
 80011b4:	a33c      	add	r3, pc, #240	@ (adr r3, 80012a8 <GenerateSineTable+0x208>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fa35 	bl	8000628 <__aeabi_dmul>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4b3e      	ldr	r3, [pc, #248]	@ (80012c4 <GenerateSineTable+0x224>)
 80011cc:	f7ff fb56 	bl	800087c <__aeabi_ddiv>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fcfe 	bl	8000bd8 <__aeabi_d2f>
 80011dc:	4603      	mov	r3, r0
 80011de:	ee00 3a10 	vmov	s0, r3
 80011e2:	f006 f9d3 	bl	800758c <arm_sin_f32>
 80011e6:	eef0 7a40 	vmov.f32	s15, s0
 80011ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011f2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80012b4 <GenerateSineTable+0x214>
 80011f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fa:	edc7 7a01 	vstr	s15, [r7, #4]
		sine_table3[i] = (uint32_t) val;
 80011fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001206:	ee17 1a90 	vmov	r1, s15
 800120a:	4a2f      	ldr	r2, [pc, #188]	@ (80012c8 <GenerateSineTable+0x228>)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SINE_TABLE_SIZE3; i++) {
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3301      	adds	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800121e:	dbc6      	blt.n	80011ae <GenerateSineTable+0x10e>
	}
	val=0.0f;
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < SINE_TABLE_SIZE4; i++) {
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	e034      	b.n	8001296 <GenerateSineTable+0x1f6>
		val=(arm_sin_f32(2.0f * 3.141592653 * i / SINE_TABLE_SIZE4) + 1.0f) * (amplitude / 2.0f);
 800122c:	68b8      	ldr	r0, [r7, #8]
 800122e:	f7ff f991 	bl	8000554 <__aeabi_i2d>
 8001232:	a31d      	add	r3, pc, #116	@ (adr r3, 80012a8 <GenerateSineTable+0x208>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f9f6 	bl	8000628 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <GenerateSineTable+0x224>)
 800124a:	f7ff fb17 	bl	800087c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fcbf 	bl	8000bd8 <__aeabi_d2f>
 800125a:	4603      	mov	r3, r0
 800125c:	ee00 3a10 	vmov	s0, r3
 8001260:	f006 f994 	bl	800758c <arm_sin_f32>
 8001264:	eef0 7a40 	vmov.f32	s15, s0
 8001268:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800126c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001270:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80012b4 <GenerateSineTable+0x214>
 8001274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001278:	edc7 7a01 	vstr	s15, [r7, #4]
		sine_table4[i] = (uint32_t) val;
 800127c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001284:	ee17 1a90 	vmov	r1, s15
 8001288:	4a10      	ldr	r2, [pc, #64]	@ (80012cc <GenerateSineTable+0x22c>)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SINE_TABLE_SIZE4; i++) {
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3301      	adds	r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800129c:	dbc6      	blt.n	800122c <GenerateSineTable+0x18c>
	}
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	542fe938 	.word	0x542fe938
 80012ac:	401921fb 	.word	0x401921fb
 80012b0:	40790000 	.word	0x40790000
 80012b4:	42aa0000 	.word	0x42aa0000
 80012b8:	2000044c 	.word	0x2000044c
 80012bc:	407f4000 	.word	0x407f4000
 80012c0:	20000a8c 	.word	0x20000a8c
 80012c4:	4082c000 	.word	0x4082c000
 80012c8:	2000125c 	.word	0x2000125c
 80012cc:	20001bbc 	.word	0x20001bbc

080012d0 <Sensor_Read_with_Kalman>:
//function to read measurements of 5 sensors and send it over UART
void Sensor_Read_with_Kalman(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b09c      	sub	sp, #112	@ 0x70
 80012d4:	af02      	add	r7, sp, #8
	char buffer[100];  // Buffer to store the formatted string

	// Read sensor data
	//BSP_MAGNETO_GetXYZ(magnetometer_data);
	BSP_ACCELERO_AccGetXYZ(accelerometer_data);
 80012d6:	4843      	ldr	r0, [pc, #268]	@ (80013e4 <Sensor_Read_with_Kalman+0x114>)
 80012d8:	f000 fc72 	bl	8001bc0 <BSP_ACCELERO_AccGetXYZ>

	smoothed_accelerometer_data[0]=Kalmanfilter((float)accelerometer_data[0], &stateX);
 80012dc:	4b41      	ldr	r3, [pc, #260]	@ (80013e4 <Sensor_Read_with_Kalman+0x114>)
 80012de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ea:	483f      	ldr	r0, [pc, #252]	@ (80013e8 <Sensor_Read_with_Kalman+0x118>)
 80012ec:	eeb0 0a67 	vmov.f32	s0, s15
 80012f0:	f7ff fe3a 	bl	8000f68 <Kalmanfilter>
 80012f4:	eef0 7a40 	vmov.f32	s15, s0
 80012f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fc:	ee17 3a90 	vmov	r3, s15
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <Sensor_Read_with_Kalman+0x11c>)
 8001304:	801a      	strh	r2, [r3, #0]
	smoothed_accelerometer_data[1]=Kalmanfilter((float)accelerometer_data[1], &stateY);
 8001306:	4b37      	ldr	r3, [pc, #220]	@ (80013e4 <Sensor_Read_with_Kalman+0x114>)
 8001308:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	4836      	ldr	r0, [pc, #216]	@ (80013f0 <Sensor_Read_with_Kalman+0x120>)
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	f7ff fe25 	bl	8000f68 <Kalmanfilter>
 800131e:	eef0 7a40 	vmov.f32	s15, s0
 8001322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001326:	ee17 3a90 	vmov	r3, s15
 800132a:	b21a      	sxth	r2, r3
 800132c:	4b2f      	ldr	r3, [pc, #188]	@ (80013ec <Sensor_Read_with_Kalman+0x11c>)
 800132e:	805a      	strh	r2, [r3, #2]
	smoothed_accelerometer_data[2]=Kalmanfilter((float)accelerometer_data[2], &stateZ);
 8001330:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <Sensor_Read_with_Kalman+0x114>)
 8001332:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133e:	482d      	ldr	r0, [pc, #180]	@ (80013f4 <Sensor_Read_with_Kalman+0x124>)
 8001340:	eeb0 0a67 	vmov.f32	s0, s15
 8001344:	f7ff fe10 	bl	8000f68 <Kalmanfilter>
 8001348:	eef0 7a40 	vmov.f32	s15, s0
 800134c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001350:	ee17 3a90 	vmov	r3, s15
 8001354:	b21a      	sxth	r2, r3
 8001356:	4b25      	ldr	r3, [pc, #148]	@ (80013ec <Sensor_Read_with_Kalman+0x11c>)
 8001358:	809a      	strh	r2, [r3, #4]

	sprintf(buffer, "Accelerometer: X=%d, Y=%d, Z=%d\r\n",
		accelerometer_data[0], accelerometer_data[1],
 800135a:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <Sensor_Read_with_Kalman+0x114>)
 800135c:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(buffer, "Accelerometer: X=%d, Y=%d, Z=%d\r\n",
 8001360:	461a      	mov	r2, r3
		accelerometer_data[0], accelerometer_data[1],
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <Sensor_Read_with_Kalman+0x114>)
 8001364:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	sprintf(buffer, "Accelerometer: X=%d, Y=%d, Z=%d\r\n",
 8001368:	4619      	mov	r1, r3
		accelerometer_data[2]);
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <Sensor_Read_with_Kalman+0x114>)
 800136c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	sprintf(buffer, "Accelerometer: X=%d, Y=%d, Z=%d\r\n",
 8001370:	1d38      	adds	r0, r7, #4
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	460b      	mov	r3, r1
 8001376:	4920      	ldr	r1, [pc, #128]	@ (80013f8 <Sensor_Read_with_Kalman+0x128>)
 8001378:	f006 fe68 	bl	800804c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ff8e 	bl	80002a0 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	1d39      	adds	r1, r7, #4
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	481b      	ldr	r0, [pc, #108]	@ (80013fc <Sensor_Read_with_Kalman+0x12c>)
 8001390:	f005 fa50 	bl	8006834 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	sprintf(buffer, " Smoothed Accelerometer: X=%d, Y=%d, Z=%d\r\n",
		smoothed_accelerometer_data[0], smoothed_accelerometer_data[1],
 8001394:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <Sensor_Read_with_Kalman+0x11c>)
 8001396:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(buffer, " Smoothed Accelerometer: X=%d, Y=%d, Z=%d\r\n",
 800139a:	461a      	mov	r2, r3
		smoothed_accelerometer_data[0], smoothed_accelerometer_data[1],
 800139c:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <Sensor_Read_with_Kalman+0x11c>)
 800139e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	sprintf(buffer, " Smoothed Accelerometer: X=%d, Y=%d, Z=%d\r\n",
 80013a2:	4619      	mov	r1, r3
		smoothed_accelerometer_data[2]);
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <Sensor_Read_with_Kalman+0x11c>)
 80013a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	sprintf(buffer, " Smoothed Accelerometer: X=%d, Y=%d, Z=%d\r\n",
 80013aa:	1d38      	adds	r0, r7, #4
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	460b      	mov	r3, r1
 80013b0:	4913      	ldr	r1, [pc, #76]	@ (8001400 <Sensor_Read_with_Kalman+0x130>)
 80013b2:	f006 fe4b 	bl	800804c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7fe ff71 	bl	80002a0 <strlen>
 80013be:	4603      	mov	r3, r0
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	1d39      	adds	r1, r7, #4
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	480c      	ldr	r0, [pc, #48]	@ (80013fc <Sensor_Read_with_Kalman+0x12c>)
 80013ca:	f005 fa33 	bl	8006834 <HAL_UART_Transmit>
			HAL_MAX_DELAY);


	HAL_UART_Transmit(&huart1, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY); // Newline for clarity
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	2202      	movs	r2, #2
 80013d4:	490b      	ldr	r1, [pc, #44]	@ (8001404 <Sensor_Read_with_Kalman+0x134>)
 80013d6:	4809      	ldr	r0, [pc, #36]	@ (80013fc <Sensor_Read_with_Kalman+0x12c>)
 80013d8:	f005 fa2c 	bl	8006834 <HAL_UART_Transmit>
}
 80013dc:	bf00      	nop
 80013de:	3768      	adds	r7, #104	@ 0x68
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000043c 	.word	0x2000043c
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000444 	.word	0x20000444
 80013f0:	20000014 	.word	0x20000014
 80013f4:	20000028 	.word	0x20000028
 80013f8:	0800a2c0 	.word	0x0800a2c0
 80013fc:	200003a8 	.word	0x200003a8
 8001400:	0800a2e4 	.word	0x0800a2e4
 8001404:	0800a310 	.word	0x0800a310

08001408 <processAcceleration>:

void processAcceleration() {
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af02      	add	r7, sp, #8
    int16_t zAxisValue = smoothed_accelerometer_data[2]; // Read Z-axis value (from accelerometer)
 800140e:	4b23      	ldr	r3, [pc, #140]	@ (800149c <processAcceleration+0x94>)
 8001410:	889b      	ldrh	r3, [r3, #4]
 8001412:	80fb      	strh	r3, [r7, #6]

    // Logic for sound generation based on Z-axis value
    if (zAxisValue < 900) {
 8001414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001418:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 800141c:	da0d      	bge.n	800143a <processAcceleration+0x32>
        // Below 900: Play Sound 1
    	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800141e:	2100      	movs	r1, #0
 8001420:	481f      	ldr	r0, [pc, #124]	@ (80014a0 <processAcceleration+0x98>)
 8001422:	f001 fbd3 	bl	8002bcc <HAL_DAC_Stop_DMA>
        HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_table2, SINE_TABLE_SIZE2, DAC_ALIGN_8B_R);
 8001426:	2308      	movs	r3, #8
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800142e:	4a1d      	ldr	r2, [pc, #116]	@ (80014a4 <processAcceleration+0x9c>)
 8001430:	2100      	movs	r1, #0
 8001432:	481b      	ldr	r0, [pc, #108]	@ (80014a0 <processAcceleration+0x98>)
 8001434:	f001 fafe 	bl	8002a34 <HAL_DAC_Start_DMA>
    } else if (zAxisValue > 1100) {
        // Above 1100: Play Sound 3
    	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
    	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_table, SINE_TABLE_SIZE, DAC_ALIGN_8B_R);
    }
}
 8001438:	e02b      	b.n	8001492 <processAcceleration+0x8a>
    } else if (zAxisValue >= 900 && zAxisValue <= 1100) {
 800143a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143e:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001442:	db13      	blt.n	800146c <processAcceleration+0x64>
 8001444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001448:	f240 424c 	movw	r2, #1100	@ 0x44c
 800144c:	4293      	cmp	r3, r2
 800144e:	dc0d      	bgt.n	800146c <processAcceleration+0x64>
    	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001450:	2100      	movs	r1, #0
 8001452:	4813      	ldr	r0, [pc, #76]	@ (80014a0 <processAcceleration+0x98>)
 8001454:	f001 fbba 	bl	8002bcc <HAL_DAC_Stop_DMA>
    	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_table3, SINE_TABLE_SIZE3, DAC_ALIGN_8B_R);
 8001458:	2308      	movs	r3, #8
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001460:	4a11      	ldr	r2, [pc, #68]	@ (80014a8 <processAcceleration+0xa0>)
 8001462:	2100      	movs	r1, #0
 8001464:	480e      	ldr	r0, [pc, #56]	@ (80014a0 <processAcceleration+0x98>)
 8001466:	f001 fae5 	bl	8002a34 <HAL_DAC_Start_DMA>
}
 800146a:	e012      	b.n	8001492 <processAcceleration+0x8a>
    } else if (zAxisValue > 1100) {
 800146c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001470:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001474:	4293      	cmp	r3, r2
 8001476:	dd0c      	ble.n	8001492 <processAcceleration+0x8a>
    	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001478:	2100      	movs	r1, #0
 800147a:	4809      	ldr	r0, [pc, #36]	@ (80014a0 <processAcceleration+0x98>)
 800147c:	f001 fba6 	bl	8002bcc <HAL_DAC_Stop_DMA>
    	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_table, SINE_TABLE_SIZE, DAC_ALIGN_8B_R);
 8001480:	2308      	movs	r3, #8
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001488:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <processAcceleration+0xa4>)
 800148a:	2100      	movs	r1, #0
 800148c:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <processAcceleration+0x98>)
 800148e:	f001 fad1 	bl	8002a34 <HAL_DAC_Start_DMA>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000444 	.word	0x20000444
 80014a0:	20000294 	.word	0x20000294
 80014a4:	20000a8c 	.word	0x20000a8c
 80014a8:	2000125c 	.word	0x2000125c
 80014ac:	2000044c 	.word	0x2000044c

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b6:	f001 f89f 	bl	80025f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ba:	f000 f833 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014be:	f000 f9c7 	bl	8001850 <MX_GPIO_Init>
  MX_DMA_Init();
 80014c2:	f000 f99b 	bl	80017fc <MX_DMA_Init>
  MX_I2C1_Init();
 80014c6:	f000 f8c1 	bl	800164c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014ca:	f000 f94b 	bl	8001764 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 80014ce:	f000 f87b 	bl	80015c8 <MX_DAC1_Init>
  MX_TIM2_Init();
 80014d2:	f000 f8fb 	bl	80016cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  BSP_MAGNETO_Init();
 80014d6:	f000 fb8b 	bl	8001bf0 <BSP_MAGNETO_Init>
  BSP_ACCELERO_Init();
 80014da:	f000 fb33 	bl	8001b44 <BSP_ACCELERO_Init>
  GenerateSineTable();
 80014de:	f7ff fddf 	bl	80010a0 <GenerateSineTable>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80014e2:	2100      	movs	r1, #0
 80014e4:	480c      	ldr	r0, [pc, #48]	@ (8001518 <main+0x68>)
 80014e6:	f001 fa52 	bl	800298e <HAL_DAC_Start>

  HAL_TIM_Base_Start(&htim2);
 80014ea:	480c      	ldr	r0, [pc, #48]	@ (800151c <main+0x6c>)
 80014ec:	f004 fe58 	bl	80061a0 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sine_table, SINE_TABLE_SIZE, DAC_ALIGN_8B_R);
 80014f0:	2308      	movs	r3, #8
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80014f8:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <main+0x70>)
 80014fa:	2100      	movs	r1, #0
 80014fc:	4806      	ldr	r0, [pc, #24]	@ (8001518 <main+0x68>)
 80014fe:	f001 fa99 	bl	8002a34 <HAL_DAC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Sensor_Read_with_Kalman();
 8001502:	f7ff fee5 	bl	80012d0 <Sensor_Read_with_Kalman>
	  processAcceleration();
 8001506:	f7ff ff7f 	bl	8001408 <processAcceleration>
	  HAL_Delay(1000);
 800150a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800150e:	f001 f8e7 	bl	80026e0 <HAL_Delay>
	  Sensor_Read_with_Kalman();
 8001512:	bf00      	nop
 8001514:	e7f5      	b.n	8001502 <main+0x52>
 8001516:	bf00      	nop
 8001518:	20000294 	.word	0x20000294
 800151c:	2000035c 	.word	0x2000035c
 8001520:	2000044c 	.word	0x2000044c

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b096      	sub	sp, #88	@ 0x58
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	2244      	movs	r2, #68	@ 0x44
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f006 fded 	bl	8008112 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001546:	2000      	movs	r0, #0
 8001548:	f003 f93e 	bl	80047c8 <HAL_PWREx_ControlVoltageScaling>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001552:	f000 f9a1 	bl	8001898 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001556:	2310      	movs	r3, #16
 8001558:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800155a:	2301      	movs	r3, #1
 800155c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001562:	2360      	movs	r3, #96	@ 0x60
 8001564:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800156a:	2301      	movs	r3, #1
 800156c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800156e:	2301      	movs	r3, #1
 8001570:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001572:	233c      	movs	r3, #60	@ 0x3c
 8001574:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001576:	2302      	movs	r3, #2
 8001578:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800157a:	2302      	movs	r3, #2
 800157c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800157e:	2302      	movs	r3, #2
 8001580:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4618      	mov	r0, r3
 8001588:	f003 f9c2 	bl	8004910 <HAL_RCC_OscConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001592:	f000 f981 	bl	8001898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	230f      	movs	r3, #15
 8001598:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159a:	2303      	movs	r3, #3
 800159c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015aa:	463b      	mov	r3, r7
 80015ac:	2105      	movs	r1, #5
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fdc8 	bl	8005144 <HAL_RCC_ClockConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015ba:	f000 f96d 	bl	8001898 <Error_Handler>
  }
}
 80015be:	bf00      	nop
 80015c0:	3758      	adds	r7, #88	@ 0x58
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	@ 0x28
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ce:	463b      	mov	r3, r7
 80015d0:	2228      	movs	r2, #40	@ 0x28
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f006 fd9c 	bl	8008112 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015da:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <MX_DAC1_Init+0x7c>)
 80015dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001648 <MX_DAC1_Init+0x80>)
 80015de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015e0:	4818      	ldr	r0, [pc, #96]	@ (8001644 <MX_DAC1_Init+0x7c>)
 80015e2:	f001 f9b2 	bl	800294a <HAL_DAC_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015ec:	f000 f954 	bl	8001898 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015f4:	230a      	movs	r3, #10
 80015f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80015f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015fc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	480c      	ldr	r0, [pc, #48]	@ (8001644 <MX_DAC1_Init+0x7c>)
 8001612:	f001 fb3f 	bl	8002c94 <HAL_DAC_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 800161c:	f000 f93c 	bl	8001898 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	2210      	movs	r2, #16
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	@ (8001644 <MX_DAC1_Init+0x7c>)
 800162c:	f001 fb32 	bl	8002c94 <HAL_DAC_ConfigChannel>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 8001636:	f000 f92f 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	@ 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000294 	.word	0x20000294
 8001648:	40007400 	.word	0x40007400

0800164c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001652:	4a1c      	ldr	r2, [pc, #112]	@ (80016c4 <MX_I2C1_Init+0x78>)
 8001654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A175AB;
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001658:	4a1b      	ldr	r2, [pc, #108]	@ (80016c8 <MX_I2C1_Init+0x7c>)
 800165a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800165c:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <MX_I2C1_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001664:	2201      	movs	r2, #1
 8001666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <MX_I2C1_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_I2C1_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001680:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001686:	480e      	ldr	r0, [pc, #56]	@ (80016c0 <MX_I2C1_Init+0x74>)
 8001688:	f002 fa2c 	bl	8003ae4 <HAL_I2C_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001692:	f000 f901 	bl	8001898 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001696:	2100      	movs	r1, #0
 8001698:	4809      	ldr	r0, [pc, #36]	@ (80016c0 <MX_I2C1_Init+0x74>)
 800169a:	f002 ffdd 	bl	8004658 <HAL_I2CEx_ConfigAnalogFilter>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016a4:	f000 f8f8 	bl	8001898 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016a8:	2100      	movs	r1, #0
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_I2C1_Init+0x74>)
 80016ac:	f003 f81f 	bl	80046ee <HAL_I2CEx_ConfigDigitalFilter>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016b6:	f000 f8ef 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000308 	.word	0x20000308
 80016c4:	40005400 	.word	0x40005400
 80016c8:	30a175ab 	.word	0x30a175ab

080016cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <MX_TIM2_Init+0x94>)
 80016ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <MX_TIM2_Init+0x94>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <MX_TIM2_Init+0x94>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 80016fe:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <MX_TIM2_Init+0x94>)
 8001700:	22c8      	movs	r2, #200	@ 0xc8
 8001702:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001704:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <MX_TIM2_Init+0x94>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <MX_TIM2_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001710:	4813      	ldr	r0, [pc, #76]	@ (8001760 <MX_TIM2_Init+0x94>)
 8001712:	f004 fced 	bl	80060f0 <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800171c:	f000 f8bc 	bl	8001898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001724:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	4619      	mov	r1, r3
 800172c:	480c      	ldr	r0, [pc, #48]	@ (8001760 <MX_TIM2_Init+0x94>)
 800172e:	f004 fd9f 	bl	8006270 <HAL_TIM_ConfigClockSource>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001738:	f000 f8ae 	bl	8001898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800173c:	2320      	movs	r3, #32
 800173e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_TIM2_Init+0x94>)
 800174a:	f004 ff9b 	bl	8006684 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001754:	f000 f8a0 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2000035c 	.word	0x2000035c

08001764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001768:	4b22      	ldr	r3, [pc, #136]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 800176a:	4a23      	ldr	r2, [pc, #140]	@ (80017f8 <MX_USART1_UART_Init+0x94>)
 800176c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800176e:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 8001770:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001782:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179a:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017a0:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a6:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ac:	4811      	ldr	r0, [pc, #68]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 80017ae:	f004 fff1 	bl	8006794 <HAL_UART_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017b8:	f000 f86e 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017bc:	2100      	movs	r1, #0
 80017be:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 80017c0:	f005 fe1a 	bl	80073f8 <HAL_UARTEx_SetTxFifoThreshold>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017ca:	f000 f865 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ce:	2100      	movs	r1, #0
 80017d0:	4808      	ldr	r0, [pc, #32]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 80017d2:	f005 fe4f 	bl	8007474 <HAL_UARTEx_SetRxFifoThreshold>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017dc:	f000 f85c 	bl	8001898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	@ (80017f4 <MX_USART1_UART_Init+0x90>)
 80017e2:	f005 fdd0 	bl	8007386 <HAL_UARTEx_DisableFifoMode>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017ec:	f000 f854 	bl	8001898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200003a8 	.word	0x200003a8
 80017f8:	40013800 	.word	0x40013800

080017fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001802:	4b12      	ldr	r3, [pc, #72]	@ (800184c <MX_DMA_Init+0x50>)
 8001804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001806:	4a11      	ldr	r2, [pc, #68]	@ (800184c <MX_DMA_Init+0x50>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	6493      	str	r3, [r2, #72]	@ 0x48
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <MX_DMA_Init+0x50>)
 8001810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800181a:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_DMA_Init+0x50>)
 800181c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800181e:	4a0b      	ldr	r2, [pc, #44]	@ (800184c <MX_DMA_Init+0x50>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6493      	str	r3, [r2, #72]	@ 0x48
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_DMA_Init+0x50>)
 8001828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	200d      	movs	r0, #13
 8001838:	f001 f851 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800183c:	200d      	movs	r0, #13
 800183e:	f001 f86a 	bl	8002916 <HAL_NVIC_EnableIRQ>

}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000

08001850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <MX_GPIO_Init+0x44>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	4a0e      	ldr	r2, [pc, #56]	@ (8001894 <MX_GPIO_Init+0x44>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001862:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <MX_GPIO_Init+0x44>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <MX_GPIO_Init+0x44>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a08      	ldr	r2, [pc, #32]	@ (8001894 <MX_GPIO_Init+0x44>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <MX_GPIO_Init+0x44>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000

08001898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189c:	b672      	cpsid	i
}
 800189e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <Error_Handler+0x8>

080018a4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	@ 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018ac:	4b27      	ldr	r3, [pc, #156]	@ (800194c <I2Cx_MspInit+0xa8>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b0:	4a26      	ldr	r2, [pc, #152]	@ (800194c <I2Cx_MspInit+0xa8>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b8:	4b24      	ldr	r3, [pc, #144]	@ (800194c <I2Cx_MspInit+0xa8>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80018c4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018c8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80018ca:	2312      	movs	r3, #18
 80018cc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80018d6:	2304      	movs	r3, #4
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	481b      	ldr	r0, [pc, #108]	@ (8001950 <I2Cx_MspInit+0xac>)
 80018e2:	f001 fe7b 	bl	80035dc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4818      	ldr	r0, [pc, #96]	@ (8001950 <I2Cx_MspInit+0xac>)
 80018ee:	f001 fe75 	bl	80035dc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80018f2:	4b16      	ldr	r3, [pc, #88]	@ (800194c <I2Cx_MspInit+0xa8>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	4a15      	ldr	r2, [pc, #84]	@ (800194c <I2Cx_MspInit+0xa8>)
 80018f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018fe:	4b13      	ldr	r3, [pc, #76]	@ (800194c <I2Cx_MspInit+0xa8>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <I2Cx_MspInit+0xa8>)
 800190c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800190e:	4a0f      	ldr	r2, [pc, #60]	@ (800194c <I2Cx_MspInit+0xa8>)
 8001910:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001914:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001916:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <I2Cx_MspInit+0xa8>)
 8001918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800191a:	4a0c      	ldr	r2, [pc, #48]	@ (800194c <I2Cx_MspInit+0xa8>)
 800191c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001920:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	210f      	movs	r1, #15
 8001926:	2021      	movs	r0, #33	@ 0x21
 8001928:	f000 ffd9 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800192c:	2021      	movs	r0, #33	@ 0x21
 800192e:	f000 fff2 	bl	8002916 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	210f      	movs	r1, #15
 8001936:	2022      	movs	r0, #34	@ 0x22
 8001938:	f000 ffd1 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800193c:	2022      	movs	r0, #34	@ 0x22
 800193e:	f000 ffea 	bl	8002916 <HAL_NVIC_EnableIRQ>
}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	@ 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	48000400 	.word	0x48000400

08001954 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <I2Cx_Init+0x54>)
 8001960:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a11      	ldr	r2, [pc, #68]	@ (80019ac <I2Cx_Init+0x58>)
 8001966:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff89 	bl	80018a4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f002 f8a6 	bl	8003ae4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001998:	2100      	movs	r1, #0
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f002 fe5c 	bl	8004658 <HAL_I2CEx_ConfigAnalogFilter>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40005800 	.word	0x40005800
 80019ac:	00702681 	.word	0x00702681

080019b0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af04      	add	r7, sp, #16
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	4608      	mov	r0, r1
 80019ba:	4611      	mov	r1, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	4603      	mov	r3, r0
 80019c0:	72fb      	strb	r3, [r7, #11]
 80019c2:	460b      	mov	r3, r1
 80019c4:	813b      	strh	r3, [r7, #8]
 80019c6:	4613      	mov	r3, r2
 80019c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019ce:	7afb      	ldrb	r3, [r7, #11]
 80019d0:	b299      	uxth	r1, r3
 80019d2:	88f8      	ldrh	r0, [r7, #6]
 80019d4:	893a      	ldrh	r2, [r7, #8]
 80019d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	4603      	mov	r3, r0
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f002 fa5a 	bl	8003ea0 <HAL_I2C_Mem_Read>
 80019ec:	4603      	mov	r3, r0
 80019ee:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80019f6:	7afb      	ldrb	r3, [r7, #11]
 80019f8:	4619      	mov	r1, r3
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f832 	bl	8001a64 <I2Cx_Error>
  }
  return status;
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b08a      	sub	sp, #40	@ 0x28
 8001a0e:	af04      	add	r7, sp, #16
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	4608      	mov	r0, r1
 8001a14:	4611      	mov	r1, r2
 8001a16:	461a      	mov	r2, r3
 8001a18:	4603      	mov	r3, r0
 8001a1a:	72fb      	strb	r3, [r7, #11]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	813b      	strh	r3, [r7, #8]
 8001a20:	4613      	mov	r3, r2
 8001a22:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	b299      	uxth	r1, r3
 8001a2c:	88f8      	ldrh	r0, [r7, #6]
 8001a2e:	893a      	ldrh	r2, [r7, #8]
 8001a30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a34:	9302      	str	r3, [sp, #8]
 8001a36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	4603      	mov	r3, r0
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f002 f919 	bl	8003c78 <HAL_I2C_Mem_Write>
 8001a46:	4603      	mov	r3, r0
 8001a48:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d004      	beq.n	8001a5a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001a50:	7afb      	ldrb	r3, [r7, #11]
 8001a52:	4619      	mov	r1, r3
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f805 	bl	8001a64 <I2Cx_Error>
  }
  return status;
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f002 f8d2 	bl	8003c1a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff6c 	bl	8001954 <I2Cx_Init>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <SENSOR_IO_Init+0x10>)
 8001a8a:	f7ff ff63 	bl	8001954 <I2Cx_Init>
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000251c 	.word	0x2000251c

08001a98 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	71bb      	strb	r3, [r7, #6]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001aaa:	79bb      	ldrb	r3, [r7, #6]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	79f9      	ldrb	r1, [r7, #7]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	1d7b      	adds	r3, r7, #5
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	4803      	ldr	r0, [pc, #12]	@ (8001ac8 <SENSOR_IO_Write+0x30>)
 8001abc:	f7ff ffa5 	bl	8001a0a <I2Cx_WriteMultiple>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2000251c 	.word	0x2000251c

08001acc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001ae0:	79bb      	ldrb	r3, [r7, #6]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	79f9      	ldrb	r1, [r7, #7]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	f107 030f 	add.w	r3, r7, #15
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2301      	movs	r3, #1
 8001af2:	4804      	ldr	r0, [pc, #16]	@ (8001b04 <SENSOR_IO_Read+0x38>)
 8001af4:	f7ff ff5c 	bl	80019b0 <I2Cx_ReadMultiple>

  return read_value;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000251c 	.word	0x2000251c

08001b08 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	603a      	str	r2, [r7, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
 8001b16:	460b      	mov	r3, r1
 8001b18:	71bb      	strb	r3, [r7, #6]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	79f9      	ldrb	r1, [r7, #7]
 8001b24:	88bb      	ldrh	r3, [r7, #4]
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	4804      	ldr	r0, [pc, #16]	@ (8001b40 <SENSOR_IO_ReadMultiple+0x38>)
 8001b30:	f7ff ff3e 	bl	80019b0 <I2Cx_ReadMultiple>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000251c 	.word	0x2000251c

08001b44 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001b52:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <BSP_ACCELERO_Init+0x74>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	4798      	blx	r3
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b6a      	cmp	r3, #106	@ 0x6a
 8001b5c:	d002      	beq.n	8001b64 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
 8001b62:	e024      	b.n	8001bae <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001b64:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <BSP_ACCELERO_Init+0x78>)
 8001b66:	4a14      	ldr	r2, [pc, #80]	@ (8001bb8 <BSP_ACCELERO_Init+0x74>)
 8001b68:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001b6a:	2330      	movs	r3, #48	@ 0x30
 8001b6c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001b72:	2300      	movs	r3, #0
 8001b74:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001b76:	2340      	movs	r3, #64	@ 0x40
 8001b78:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001b82:	797a      	ldrb	r2, [r7, #5]
 8001b84:	7abb      	ldrb	r3, [r7, #10]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001b8c:	7a3b      	ldrb	r3, [r7, #8]
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <BSP_ACCELERO_Init+0x78>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	89ba      	ldrh	r2, [r7, #12]
 8001baa:	4610      	mov	r0, r2
 8001bac:	4798      	blx	r3
  }  

  return ret;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000074 	.word	0x20000074
 8001bbc:	20002570 	.word	0x20002570

08001bc0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d009      	beq.n	8001be4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d004      	beq.n	8001be4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001bda:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
    }
  }
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20002570 	.word	0x20002570

08001bf0 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <BSP_MAGNETO_Init+0x50>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4798      	blx	r3
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b3d      	cmp	r3, #61	@ 0x3d
 8001c04:	d002      	beq.n	8001c0c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	e013      	b.n	8001c34 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <BSP_MAGNETO_Init+0x54>)
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c40 <BSP_MAGNETO_Init+0x50>)
 8001c10:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001c12:	2358      	movs	r3, #88	@ 0x58
 8001c14:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001c16:	2300      	movs	r3, #0
 8001c18:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001c1e:	2308      	movs	r3, #8
 8001c20:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001c22:	2340      	movs	r3, #64	@ 0x40
 8001c24:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <BSP_MAGNETO_Init+0x54>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	463a      	mov	r2, r7
 8001c2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c32:	4798      	blx	r3
  } 

  return ret;  
 8001c34:	79fb      	ldrb	r3, [r7, #7]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000040 	.word	0x20000040
 8001c44:	20002574 	.word	0x20002574

08001c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c52:	4a0e      	ldr	r2, [pc, #56]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6a:	4a08      	ldr	r2, [pc, #32]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000

08001c90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a2b      	ldr	r2, [pc, #172]	@ (8001d5c <HAL_DAC_MspInit+0xcc>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d14f      	bne.n	8001d52 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d60 <HAL_DAC_MspInit+0xd0>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8001d60 <HAL_DAC_MspInit+0xd0>)
 8001cb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cbe:	4b28      	ldr	r3, [pc, #160]	@ (8001d60 <HAL_DAC_MspInit+0xd0>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <HAL_DAC_MspInit+0xd0>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cce:	4a24      	ldr	r2, [pc, #144]	@ (8001d60 <HAL_DAC_MspInit+0xd0>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cd6:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <HAL_DAC_MspInit+0xd0>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ce2:	2330      	movs	r3, #48	@ 0x30
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf8:	f001 fc70 	bl	80035dc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001cfc:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <HAL_DAC_MspInit+0xd4>)
 8001cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8001d68 <HAL_DAC_MspInit+0xd8>)
 8001d00:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8001d02:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <HAL_DAC_MspInit+0xd4>)
 8001d04:	2206      	movs	r2, #6
 8001d06:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d08:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_DAC_MspInit+0xd4>)
 8001d0a:	2210      	movs	r2, #16
 8001d0c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <HAL_DAC_MspInit+0xd4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <HAL_DAC_MspInit+0xd4>)
 8001d16:	2280      	movs	r2, #128	@ 0x80
 8001d18:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d1a:	4b12      	ldr	r3, [pc, #72]	@ (8001d64 <HAL_DAC_MspInit+0xd4>)
 8001d1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d20:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d22:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <HAL_DAC_MspInit+0xd4>)
 8001d24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d28:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <HAL_DAC_MspInit+0xd4>)
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <HAL_DAC_MspInit+0xd4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001d36:	480b      	ldr	r0, [pc, #44]	@ (8001d64 <HAL_DAC_MspInit+0xd4>)
 8001d38:	f001 f982 	bl	8003040 <HAL_DMA_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001d42:	f7ff fda9 	bl	8001898 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a06      	ldr	r2, [pc, #24]	@ (8001d64 <HAL_DAC_MspInit+0xd4>)
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <HAL_DAC_MspInit+0xd4>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	@ 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40007400 	.word	0x40007400
 8001d60:	40021000 	.word	0x40021000
 8001d64:	200002a8 	.word	0x200002a8
 8001d68:	40020030 	.word	0x40020030

08001d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b0ae      	sub	sp, #184	@ 0xb8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	2294      	movs	r2, #148	@ 0x94
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f006 f9c0 	bl	8008112 <memset>
  if(hi2c->Instance==I2C1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a21      	ldr	r2, [pc, #132]	@ (8001e1c <HAL_I2C_MspInit+0xb0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d13b      	bne.n	8001e14 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d9c:	2340      	movs	r3, #64	@ 0x40
 8001d9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001da0:	2300      	movs	r3, #0
 8001da2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fc89 	bl	80056c0 <HAL_RCCEx_PeriphCLKConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001db4:	f7ff fd70 	bl	8001898 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db8:	4b19      	ldr	r3, [pc, #100]	@ (8001e20 <HAL_I2C_MspInit+0xb4>)
 8001dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbc:	4a18      	ldr	r2, [pc, #96]	@ (8001e20 <HAL_I2C_MspInit+0xb4>)
 8001dbe:	f043 0302 	orr.w	r3, r3, #2
 8001dc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc4:	4b16      	ldr	r3, [pc, #88]	@ (8001e20 <HAL_I2C_MspInit+0xb4>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dd0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd8:	2312      	movs	r3, #18
 8001dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dea:	2304      	movs	r3, #4
 8001dec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001df4:	4619      	mov	r1, r3
 8001df6:	480b      	ldr	r0, [pc, #44]	@ (8001e24 <HAL_I2C_MspInit+0xb8>)
 8001df8:	f001 fbf0 	bl	80035dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dfc:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <HAL_I2C_MspInit+0xb4>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	4a07      	ldr	r2, [pc, #28]	@ (8001e20 <HAL_I2C_MspInit+0xb4>)
 8001e02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_I2C_MspInit+0xb4>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e14:	bf00      	nop
 8001e16:	37b8      	adds	r7, #184	@ 0xb8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40005400 	.word	0x40005400
 8001e20:	40021000 	.word	0x40021000
 8001e24:	48000400 	.word	0x48000400

08001e28 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0b      	ldr	r2, [pc, #44]	@ (8001e64 <HAL_I2C_MspDeInit+0x3c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d10f      	bne.n	8001e5a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_I2C_MspDeInit+0x40>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <HAL_I2C_MspDeInit+0x40>)
 8001e40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e44:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001e46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e4a:	4808      	ldr	r0, [pc, #32]	@ (8001e6c <HAL_I2C_MspDeInit+0x44>)
 8001e4c:	f001 fd58 	bl	8003900 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001e50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e54:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <HAL_I2C_MspDeInit+0x44>)
 8001e56:	f001 fd53 	bl	8003900 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40005400 	.word	0x40005400
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	48000400 	.word	0x48000400

08001e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e80:	d10b      	bne.n	8001e9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x38>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e86:	4a08      	ldr	r2, [pc, #32]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x38>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x38>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0ae      	sub	sp, #184	@ 0xb8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	2294      	movs	r2, #148	@ 0x94
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f006 f920 	bl	8008112 <memset>
  if(huart->Instance==USART1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a21      	ldr	r2, [pc, #132]	@ (8001f5c <HAL_UART_MspInit+0xb0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d13a      	bne.n	8001f52 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fbe9 	bl	80056c0 <HAL_RCCEx_PeriphCLKConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ef4:	f7ff fcd0 	bl	8001898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ef8:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <HAL_UART_MspInit+0xb4>)
 8001efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001efc:	4a18      	ldr	r2, [pc, #96]	@ (8001f60 <HAL_UART_MspInit+0xb4>)
 8001efe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f02:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f04:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <HAL_UART_MspInit+0xb4>)
 8001f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f10:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <HAL_UART_MspInit+0xb4>)
 8001f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f14:	4a12      	ldr	r2, [pc, #72]	@ (8001f60 <HAL_UART_MspInit+0xb4>)
 8001f16:	f043 0302 	orr.w	r3, r3, #2
 8001f1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f1c:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <HAL_UART_MspInit+0xb4>)
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f28:	23c0      	movs	r3, #192	@ 0xc0
 8001f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f40:	2307      	movs	r3, #7
 8001f42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <HAL_UART_MspInit+0xb8>)
 8001f4e:	f001 fb45 	bl	80035dc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f52:	bf00      	nop
 8001f54:	37b8      	adds	r7, #184	@ 0xb8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40013800 	.word	0x40013800
 8001f60:	40021000 	.word	0x40021000
 8001f64:	48000400 	.word	0x48000400

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <NMI_Handler+0x4>

08001f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <MemManage_Handler+0x4>

08001f80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fbe:	f000 fb6f 	bl	80026a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <DMA1_Channel3_IRQHandler+0x10>)
 8001fce:	f001 f9b6 	bl	800333e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200002a8 	.word	0x200002a8

08001fdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return 1;
 8001fe0:	2301      	movs	r3, #1
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_kill>:

int _kill(int pid, int sig)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ff6:	f006 f8df 	bl	80081b8 <__errno>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2216      	movs	r2, #22
 8001ffe:	601a      	str	r2, [r3, #0]
  return -1;
 8002000:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <_exit>:

void _exit (int status)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ffe7 	bl	8001fec <_kill>
  while (1) {}    /* Make sure we hang here */
 800201e:	bf00      	nop
 8002020:	e7fd      	b.n	800201e <_exit+0x12>

08002022 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e00a      	b.n	800204a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002034:	f3af 8000 	nop.w
 8002038:	4601      	mov	r1, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	60ba      	str	r2, [r7, #8]
 8002040:	b2ca      	uxtb	r2, r1
 8002042:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	dbf0      	blt.n	8002034 <_read+0x12>
  }

  return len;
 8002052:	687b      	ldr	r3, [r7, #4]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e009      	b.n	8002082 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	60ba      	str	r2, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	dbf1      	blt.n	800206e <_write+0x12>
  }
  return len;
 800208a:	687b      	ldr	r3, [r7, #4]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_close>:

int _close(int file)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020bc:	605a      	str	r2, [r3, #4]
  return 0;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_isatty>:

int _isatty(int file)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020d4:	2301      	movs	r3, #1
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002104:	4a14      	ldr	r2, [pc, #80]	@ (8002158 <_sbrk+0x5c>)
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <_sbrk+0x60>)
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002110:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002118:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <_sbrk+0x64>)
 800211a:	4a12      	ldr	r2, [pc, #72]	@ (8002164 <_sbrk+0x68>)
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211e:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d207      	bcs.n	800213c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800212c:	f006 f844 	bl	80081b8 <__errno>
 8002130:	4603      	mov	r3, r0
 8002132:	220c      	movs	r2, #12
 8002134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	e009      	b.n	8002150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800213c:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002142:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	4a05      	ldr	r2, [pc, #20]	@ (8002160 <_sbrk+0x64>)
 800214c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	200a0000 	.word	0x200a0000
 800215c:	00000400 	.word	0x00000400
 8002160:	20002578 	.word	0x20002578
 8002164:	200026d0 	.word	0x200026d0

08002168 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <SystemInit+0x20>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	4a05      	ldr	r2, [pc, #20]	@ (8002188 <SystemInit+0x20>)
 8002174:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002178:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800218c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002190:	f7ff ffea 	bl	8002168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002194:	480c      	ldr	r0, [pc, #48]	@ (80021c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002196:	490d      	ldr	r1, [pc, #52]	@ (80021cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002198:	4a0d      	ldr	r2, [pc, #52]	@ (80021d0 <LoopForever+0xe>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800219c:	e002      	b.n	80021a4 <LoopCopyDataInit>

0800219e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a2:	3304      	adds	r3, #4

080021a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a8:	d3f9      	bcc.n	800219e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021aa:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021ac:	4c0a      	ldr	r4, [pc, #40]	@ (80021d8 <LoopForever+0x16>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b0:	e001      	b.n	80021b6 <LoopFillZerobss>

080021b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b4:	3204      	adds	r2, #4

080021b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b8:	d3fb      	bcc.n	80021b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ba:	f006 f803 	bl	80081c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021be:	f7ff f977 	bl	80014b0 <main>

080021c2 <LoopForever>:

LoopForever:
    b LoopForever
 80021c2:	e7fe      	b.n	80021c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021c4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80021c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021cc:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 80021d0:	0800af08 	.word	0x0800af08
  ldr r2, =_sbss
 80021d4:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 80021d8:	200026cc 	.word	0x200026cc

080021dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC1_IRQHandler>

080021de <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	463b      	mov	r3, r7
 80021e6:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80021ea:	783b      	ldrb	r3, [r7, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	2120      	movs	r1, #32
 80021f0:	203c      	movs	r0, #60	@ 0x3c
 80021f2:	f7ff fc51 	bl	8001a98 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80021f6:	787b      	ldrb	r3, [r7, #1]
 80021f8:	461a      	mov	r2, r3
 80021fa:	2121      	movs	r1, #33	@ 0x21
 80021fc:	203c      	movs	r0, #60	@ 0x3c
 80021fe:	f7ff fc4b 	bl	8001a98 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002202:	78bb      	ldrb	r3, [r7, #2]
 8002204:	461a      	mov	r2, r3
 8002206:	2122      	movs	r1, #34	@ 0x22
 8002208:	203c      	movs	r0, #60	@ 0x3c
 800220a:	f7ff fc45 	bl	8001a98 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	461a      	mov	r2, r3
 8002212:	2123      	movs	r1, #35	@ 0x23
 8002214:	203c      	movs	r0, #60	@ 0x3c
 8002216:	f7ff fc3f 	bl	8001a98 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 800221a:	793b      	ldrb	r3, [r7, #4]
 800221c:	461a      	mov	r2, r3
 800221e:	2124      	movs	r1, #36	@ 0x24
 8002220:	203c      	movs	r0, #60	@ 0x3c
 8002222:	f7ff fc39 	bl	8001a98 <SENSOR_IO_Write>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002234:	2300      	movs	r3, #0
 8002236:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002238:	2122      	movs	r1, #34	@ 0x22
 800223a:	203c      	movs	r0, #60	@ 0x3c
 800223c:	f7ff fc46 	bl	8001acc <SENSOR_IO_Read>
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	f023 0303 	bic.w	r3, r3, #3
 800224a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f043 0303 	orr.w	r3, r3, #3
 8002252:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	461a      	mov	r2, r3
 8002258:	2122      	movs	r1, #34	@ 0x22
 800225a:	203c      	movs	r0, #60	@ 0x3c
 800225c:	f7ff fc1c 	bl	8001a98 <SENSOR_IO_Write>
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800226c:	f7ff fc0a 	bl	8001a84 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002270:	210f      	movs	r1, #15
 8002272:	203c      	movs	r0, #60	@ 0x3c
 8002274:	f7ff fc2a 	bl	8001acc <SENSOR_IO_Read>
 8002278:	4603      	mov	r3, r0
}
 800227a:	4618      	mov	r0, r3
 800227c:	bd80      	pop	{r7, pc}

0800227e <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800228c:	2122      	movs	r1, #34	@ 0x22
 800228e:	203c      	movs	r0, #60	@ 0x3c
 8002290:	f7ff fc1c 	bl	8001acc <SENSOR_IO_Read>
 8002294:	4603      	mov	r3, r0
 8002296:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	f023 0320 	bic.w	r3, r3, #32
 800229e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	f043 0320 	orr.w	r3, r3, #32
 80022ac:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	461a      	mov	r2, r3
 80022b2:	2122      	movs	r1, #34	@ 0x22
 80022b4:	203c      	movs	r0, #60	@ 0x3c
 80022b6:	f7ff fbef 	bl	8001a98 <SENSOR_IO_Write>
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80022da:	2121      	movs	r1, #33	@ 0x21
 80022dc:	203c      	movs	r0, #60	@ 0x3c
 80022de:	f7ff fbf5 	bl	8001acc <SENSOR_IO_Read>
 80022e2:	4603      	mov	r3, r0
 80022e4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80022e6:	f107 0208 	add.w	r2, r7, #8
 80022ea:	2306      	movs	r3, #6
 80022ec:	21a8      	movs	r1, #168	@ 0xa8
 80022ee:	203c      	movs	r0, #60	@ 0x3c
 80022f0:	f7ff fc0a 	bl	8001b08 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	77fb      	strb	r3, [r7, #31]
 80022f8:	e01a      	b.n	8002330 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80022fa:	7ffb      	ldrb	r3, [r7, #31]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	3301      	adds	r3, #1
 8002300:	3320      	adds	r3, #32
 8002302:	443b      	add	r3, r7
 8002304:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	b29b      	uxth	r3, r3
 800230c:	7ffa      	ldrb	r2, [r7, #31]
 800230e:	0052      	lsls	r2, r2, #1
 8002310:	3220      	adds	r2, #32
 8002312:	443a      	add	r2, r7
 8002314:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002318:	4413      	add	r3, r2
 800231a:	b29a      	uxth	r2, r3
 800231c:	7ffb      	ldrb	r3, [r7, #31]
 800231e:	b212      	sxth	r2, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	3320      	adds	r3, #32
 8002324:	443b      	add	r3, r7
 8002326:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800232a:	7ffb      	ldrb	r3, [r7, #31]
 800232c:	3301      	adds	r3, #1
 800232e:	77fb      	strb	r3, [r7, #31]
 8002330:	7ffb      	ldrb	r3, [r7, #31]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d9e1      	bls.n	80022fa <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800233c:	2b60      	cmp	r3, #96	@ 0x60
 800233e:	d013      	beq.n	8002368 <LIS3MDL_MagReadXYZ+0xa4>
 8002340:	2b60      	cmp	r3, #96	@ 0x60
 8002342:	dc14      	bgt.n	800236e <LIS3MDL_MagReadXYZ+0xaa>
 8002344:	2b40      	cmp	r3, #64	@ 0x40
 8002346:	d00c      	beq.n	8002362 <LIS3MDL_MagReadXYZ+0x9e>
 8002348:	2b40      	cmp	r3, #64	@ 0x40
 800234a:	dc10      	bgt.n	800236e <LIS3MDL_MagReadXYZ+0xaa>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <LIS3MDL_MagReadXYZ+0x92>
 8002350:	2b20      	cmp	r3, #32
 8002352:	d003      	beq.n	800235c <LIS3MDL_MagReadXYZ+0x98>
 8002354:	e00b      	b.n	800236e <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002356:	4b19      	ldr	r3, [pc, #100]	@ (80023bc <LIS3MDL_MagReadXYZ+0xf8>)
 8002358:	61bb      	str	r3, [r7, #24]
    break;
 800235a:	e008      	b.n	800236e <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800235c:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <LIS3MDL_MagReadXYZ+0xfc>)
 800235e:	61bb      	str	r3, [r7, #24]
    break;
 8002360:	e005      	b.n	800236e <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002362:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <LIS3MDL_MagReadXYZ+0x100>)
 8002364:	61bb      	str	r3, [r7, #24]
    break;
 8002366:	e002      	b.n	800236e <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002368:	4b17      	ldr	r3, [pc, #92]	@ (80023c8 <LIS3MDL_MagReadXYZ+0x104>)
 800236a:	61bb      	str	r3, [r7, #24]
    break;    
 800236c:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800236e:	2300      	movs	r3, #0
 8002370:	77fb      	strb	r3, [r7, #31]
 8002372:	e01a      	b.n	80023aa <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002374:	7ffb      	ldrb	r3, [r7, #31]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	3320      	adds	r3, #32
 800237a:	443b      	add	r3, r7
 800237c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002380:	ee07 3a90 	vmov	s15, r3
 8002384:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002388:	edd7 7a06 	vldr	s15, [r7, #24]
 800238c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002390:	7ffb      	ldrb	r3, [r7, #31]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800239c:	ee17 2a90 	vmov	r2, s15
 80023a0:	b212      	sxth	r2, r2
 80023a2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80023a4:	7ffb      	ldrb	r3, [r7, #31]
 80023a6:	3301      	adds	r3, #1
 80023a8:	77fb      	strb	r3, [r7, #31]
 80023aa:	7ffb      	ldrb	r3, [r7, #31]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d9e1      	bls.n	8002374 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3720      	adds	r7, #32
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	3e0f5c29 	.word	0x3e0f5c29
 80023c0:	3e947ae1 	.word	0x3e947ae1
 80023c4:	3edc28f6 	.word	0x3edc28f6
 80023c8:	3f147ae1 	.word	0x3f147ae1

080023cc <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80023da:	2110      	movs	r1, #16
 80023dc:	20d4      	movs	r0, #212	@ 0xd4
 80023de:	f7ff fb75 	bl	8001acc <SENSOR_IO_Read>
 80023e2:	4603      	mov	r3, r0
 80023e4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80023ea:	7bbb      	ldrb	r3, [r7, #14]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80023f2:	7bba      	ldrb	r2, [r7, #14]
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80023fa:	7bbb      	ldrb	r3, [r7, #14]
 80023fc:	461a      	mov	r2, r3
 80023fe:	2110      	movs	r1, #16
 8002400:	20d4      	movs	r0, #212	@ 0xd4
 8002402:	f7ff fb49 	bl	8001a98 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002406:	2112      	movs	r1, #18
 8002408:	20d4      	movs	r0, #212	@ 0xd4
 800240a:	f7ff fb5f 	bl	8001acc <SENSOR_IO_Read>
 800240e:	4603      	mov	r3, r0
 8002410:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	b29b      	uxth	r3, r3
 8002418:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800241a:	7bbb      	ldrb	r3, [r7, #14]
 800241c:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002420:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002422:	7bba      	ldrb	r2, [r7, #14]
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	4313      	orrs	r3, r2
 8002428:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800242a:	7bbb      	ldrb	r3, [r7, #14]
 800242c:	461a      	mov	r2, r3
 800242e:	2112      	movs	r1, #18
 8002430:	20d4      	movs	r0, #212	@ 0xd4
 8002432:	f7ff fb31 	bl	8001a98 <SENSOR_IO_Write>
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002444:	2300      	movs	r3, #0
 8002446:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002448:	2110      	movs	r1, #16
 800244a:	20d4      	movs	r0, #212	@ 0xd4
 800244c:	f7ff fb3e 	bl	8001acc <SENSOR_IO_Read>
 8002450:	4603      	mov	r3, r0
 8002452:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	461a      	mov	r2, r3
 8002460:	2110      	movs	r1, #16
 8002462:	20d4      	movs	r0, #212	@ 0xd4
 8002464:	f7ff fb18 	bl	8001a98 <SENSOR_IO_Write>
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002474:	f7ff fb06 	bl	8001a84 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002478:	210f      	movs	r1, #15
 800247a:	20d4      	movs	r0, #212	@ 0xd4
 800247c:	f7ff fb26 	bl	8001acc <SENSOR_IO_Read>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	bd80      	pop	{r7, pc}

08002486 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002494:	2115      	movs	r1, #21
 8002496:	20d4      	movs	r0, #212	@ 0xd4
 8002498:	f7ff fb18 	bl	8001acc <SENSOR_IO_Read>
 800249c:	4603      	mov	r3, r0
 800249e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	f023 0310 	bic.w	r3, r3, #16
 80024a6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	f043 0310 	orr.w	r3, r3, #16
 80024b4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	461a      	mov	r2, r3
 80024ba:	2115      	movs	r1, #21
 80024bc:	20d4      	movs	r0, #212	@ 0xd4
 80024be:	f7ff faeb 	bl	8001a98 <SENSOR_IO_Write>
}
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80024e2:	2110      	movs	r1, #16
 80024e4:	20d4      	movs	r0, #212	@ 0xd4
 80024e6:	f7ff faf1 	bl	8001acc <SENSOR_IO_Read>
 80024ea:	4603      	mov	r3, r0
 80024ec:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80024ee:	f107 0208 	add.w	r2, r7, #8
 80024f2:	2306      	movs	r3, #6
 80024f4:	2128      	movs	r1, #40	@ 0x28
 80024f6:	20d4      	movs	r0, #212	@ 0xd4
 80024f8:	f7ff fb06 	bl	8001b08 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	77fb      	strb	r3, [r7, #31]
 8002500:	e01a      	b.n	8002538 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002502:	7ffb      	ldrb	r3, [r7, #31]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	3301      	adds	r3, #1
 8002508:	3320      	adds	r3, #32
 800250a:	443b      	add	r3, r7
 800250c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	b29b      	uxth	r3, r3
 8002514:	7ffa      	ldrb	r2, [r7, #31]
 8002516:	0052      	lsls	r2, r2, #1
 8002518:	3220      	adds	r2, #32
 800251a:	443a      	add	r2, r7
 800251c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002520:	4413      	add	r3, r2
 8002522:	b29a      	uxth	r2, r3
 8002524:	7ffb      	ldrb	r3, [r7, #31]
 8002526:	b212      	sxth	r2, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	3320      	adds	r3, #32
 800252c:	443b      	add	r3, r7
 800252e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002532:	7ffb      	ldrb	r3, [r7, #31]
 8002534:	3301      	adds	r3, #1
 8002536:	77fb      	strb	r3, [r7, #31]
 8002538:	7ffb      	ldrb	r3, [r7, #31]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d9e1      	bls.n	8002502 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b0c      	cmp	r3, #12
 8002546:	d829      	bhi.n	800259c <LSM6DSL_AccReadXYZ+0xd0>
 8002548:	a201      	add	r2, pc, #4	@ (adr r2, 8002550 <LSM6DSL_AccReadXYZ+0x84>)
 800254a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254e:	bf00      	nop
 8002550:	08002585 	.word	0x08002585
 8002554:	0800259d 	.word	0x0800259d
 8002558:	0800259d 	.word	0x0800259d
 800255c:	0800259d 	.word	0x0800259d
 8002560:	08002597 	.word	0x08002597
 8002564:	0800259d 	.word	0x0800259d
 8002568:	0800259d 	.word	0x0800259d
 800256c:	0800259d 	.word	0x0800259d
 8002570:	0800258b 	.word	0x0800258b
 8002574:	0800259d 	.word	0x0800259d
 8002578:	0800259d 	.word	0x0800259d
 800257c:	0800259d 	.word	0x0800259d
 8002580:	08002591 	.word	0x08002591
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002584:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <LSM6DSL_AccReadXYZ+0x11c>)
 8002586:	61bb      	str	r3, [r7, #24]
    break;
 8002588:	e008      	b.n	800259c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800258a:	4b18      	ldr	r3, [pc, #96]	@ (80025ec <LSM6DSL_AccReadXYZ+0x120>)
 800258c:	61bb      	str	r3, [r7, #24]
    break;
 800258e:	e005      	b.n	800259c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002590:	4b17      	ldr	r3, [pc, #92]	@ (80025f0 <LSM6DSL_AccReadXYZ+0x124>)
 8002592:	61bb      	str	r3, [r7, #24]
    break;
 8002594:	e002      	b.n	800259c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002596:	4b17      	ldr	r3, [pc, #92]	@ (80025f4 <LSM6DSL_AccReadXYZ+0x128>)
 8002598:	61bb      	str	r3, [r7, #24]
    break;    
 800259a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800259c:	2300      	movs	r3, #0
 800259e:	77fb      	strb	r3, [r7, #31]
 80025a0:	e01a      	b.n	80025d8 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80025a2:	7ffb      	ldrb	r3, [r7, #31]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	3320      	adds	r3, #32
 80025a8:	443b      	add	r3, r7
 80025aa:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025be:	7ffb      	ldrb	r3, [r7, #31]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ca:	ee17 2a90 	vmov	r2, s15
 80025ce:	b212      	sxth	r2, r2
 80025d0:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
 80025d4:	3301      	adds	r3, #1
 80025d6:	77fb      	strb	r3, [r7, #31]
 80025d8:	7ffb      	ldrb	r3, [r7, #31]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d9e1      	bls.n	80025a2 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80025de:	bf00      	nop
 80025e0:	bf00      	nop
 80025e2:	3720      	adds	r7, #32
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	3d79db23 	.word	0x3d79db23
 80025ec:	3df9db23 	.word	0x3df9db23
 80025f0:	3e79db23 	.word	0x3e79db23
 80025f4:	3ef9db23 	.word	0x3ef9db23

080025f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002602:	2003      	movs	r0, #3
 8002604:	f000 f960 	bl	80028c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002608:	2000      	movs	r0, #0
 800260a:	f000 f80d 	bl	8002628 <HAL_InitTick>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	71fb      	strb	r3, [r7, #7]
 8002618:	e001      	b.n	800261e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800261a:	f7ff fb15 	bl	8001c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800261e:	79fb      	ldrb	r3, [r7, #7]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002634:	4b17      	ldr	r3, [pc, #92]	@ (8002694 <HAL_InitTick+0x6c>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d023      	beq.n	8002684 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800263c:	4b16      	ldr	r3, [pc, #88]	@ (8002698 <HAL_InitTick+0x70>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b14      	ldr	r3, [pc, #80]	@ (8002694 <HAL_InitTick+0x6c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800264a:	fbb3 f3f1 	udiv	r3, r3, r1
 800264e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f96d 	bl	8002932 <HAL_SYSTICK_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10f      	bne.n	800267e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b0f      	cmp	r3, #15
 8002662:	d809      	bhi.n	8002678 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002664:	2200      	movs	r2, #0
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	f04f 30ff 	mov.w	r0, #4294967295
 800266c:	f000 f937 	bl	80028de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002670:	4a0a      	ldr	r2, [pc, #40]	@ (800269c <HAL_InitTick+0x74>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e007      	b.n	8002688 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	e004      	b.n	8002688 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	e001      	b.n	8002688 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200000ac 	.word	0x200000ac
 8002698:	2000003c 	.word	0x2000003c
 800269c:	200000a8 	.word	0x200000a8

080026a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HAL_IncTick+0x20>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_IncTick+0x24>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <HAL_IncTick+0x24>)
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	200000ac 	.word	0x200000ac
 80026c4:	2000257c 	.word	0x2000257c

080026c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b03      	ldr	r3, [pc, #12]	@ (80026dc <HAL_GetTick+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	2000257c 	.word	0x2000257c

080026e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff ffee 	bl	80026c8 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d005      	beq.n	8002706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <HAL_Delay+0x44>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002706:	bf00      	nop
 8002708:	f7ff ffde 	bl	80026c8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d8f7      	bhi.n	8002708 <HAL_Delay+0x28>
  {
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200000ac 	.word	0x200000ac

08002728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002738:	4b0c      	ldr	r3, [pc, #48]	@ (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002744:	4013      	ands	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002750:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275a:	4a04      	ldr	r2, [pc, #16]	@ (800276c <__NVIC_SetPriorityGrouping+0x44>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60d3      	str	r3, [r2, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002774:	4b04      	ldr	r3, [pc, #16]	@ (8002788 <__NVIC_GetPriorityGrouping+0x18>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	f003 0307 	and.w	r3, r3, #7
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	db0b      	blt.n	80027b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	4907      	ldr	r1, [pc, #28]	@ (80027c4 <__NVIC_EnableIRQ+0x38>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	2001      	movs	r0, #1
 80027ae:	fa00 f202 	lsl.w	r2, r0, r2
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000e100 	.word	0xe000e100

080027c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	db0a      	blt.n	80027f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	490c      	ldr	r1, [pc, #48]	@ (8002814 <__NVIC_SetPriority+0x4c>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	440b      	add	r3, r1
 80027ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f0:	e00a      	b.n	8002808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4908      	ldr	r1, [pc, #32]	@ (8002818 <__NVIC_SetPriority+0x50>)
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	3b04      	subs	r3, #4
 8002800:	0112      	lsls	r2, r2, #4
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	440b      	add	r3, r1
 8002806:	761a      	strb	r2, [r3, #24]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000e100 	.word	0xe000e100
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	@ 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f1c3 0307 	rsb	r3, r3, #7
 8002836:	2b04      	cmp	r3, #4
 8002838:	bf28      	it	cs
 800283a:	2304      	movcs	r3, #4
 800283c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3304      	adds	r3, #4
 8002842:	2b06      	cmp	r3, #6
 8002844:	d902      	bls.n	800284c <NVIC_EncodePriority+0x30>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3b03      	subs	r3, #3
 800284a:	e000      	b.n	800284e <NVIC_EncodePriority+0x32>
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	f04f 32ff 	mov.w	r2, #4294967295
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002864:	f04f 31ff 	mov.w	r1, #4294967295
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	43d9      	mvns	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	4313      	orrs	r3, r2
         );
}
 8002876:	4618      	mov	r0, r3
 8002878:	3724      	adds	r7, #36	@ 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002894:	d301      	bcc.n	800289a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002896:	2301      	movs	r3, #1
 8002898:	e00f      	b.n	80028ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <SysTick_Config+0x40>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a2:	210f      	movs	r1, #15
 80028a4:	f04f 30ff 	mov.w	r0, #4294967295
 80028a8:	f7ff ff8e 	bl	80027c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <SysTick_Config+0x40>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b2:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <SysTick_Config+0x40>)
 80028b4:	2207      	movs	r2, #7
 80028b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	e000e010 	.word	0xe000e010

080028c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff29 	bl	8002728 <__NVIC_SetPriorityGrouping>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028f0:	f7ff ff3e 	bl	8002770 <__NVIC_GetPriorityGrouping>
 80028f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	f7ff ff8e 	bl	800281c <NVIC_EncodePriority>
 8002900:	4602      	mov	r2, r0
 8002902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff5d 	bl	80027c8 <__NVIC_SetPriority>
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff31 	bl	800278c <__NVIC_EnableIRQ>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ffa2 	bl	8002884 <SysTick_Config>
 8002940:	4603      	mov	r3, r0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e014      	b.n	8002986 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	791b      	ldrb	r3, [r3, #4]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d105      	bne.n	8002972 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff f98f 	bl	8001c90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2202      	movs	r2, #2
 8002976:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	795b      	ldrb	r3, [r3, #5]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_DAC_Start+0x16>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e040      	b.n	8002a26 <HAL_DAC_Start+0x98>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2202      	movs	r2, #2
 80029ae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2201      	movs	r2, #1
 80029be:	409a      	lsls	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d11d      	bne.n	8002a18 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	e014      	b.n	8002a18 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2102      	movs	r1, #2
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d107      	bne.n	8002a18 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0202 	orr.w	r2, r2, #2
 8002a16:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	795b      	ldrb	r3, [r3, #5]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_DAC_Start_DMA+0x1e>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e0ab      	b.n	8002baa <HAL_DAC_Start_DMA+0x176>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d12f      	bne.n	8002ac4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a52      	ldr	r2, [pc, #328]	@ (8002bb4 <HAL_DAC_Start_DMA+0x180>)
 8002a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4a51      	ldr	r2, [pc, #324]	@ (8002bb8 <HAL_DAC_Start_DMA+0x184>)
 8002a72:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4a50      	ldr	r2, [pc, #320]	@ (8002bbc <HAL_DAC_Start_DMA+0x188>)
 8002a7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a8a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d013      	beq.n	8002aba <HAL_DAC_Start_DMA+0x86>
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d845      	bhi.n	8002b24 <HAL_DAC_Start_DMA+0xf0>
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_DAC_Start_DMA+0x72>
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d005      	beq.n	8002ab0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002aa4:	e03e      	b.n	8002b24 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3308      	adds	r3, #8
 8002aac:	613b      	str	r3, [r7, #16]
        break;
 8002aae:	e03c      	b.n	8002b2a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	613b      	str	r3, [r7, #16]
        break;
 8002ab8:	e037      	b.n	8002b2a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3310      	adds	r3, #16
 8002ac0:	613b      	str	r3, [r7, #16]
        break;
 8002ac2:	e032      	b.n	8002b2a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a3d      	ldr	r2, [pc, #244]	@ (8002bc0 <HAL_DAC_Start_DMA+0x18c>)
 8002aca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a3c      	ldr	r2, [pc, #240]	@ (8002bc4 <HAL_DAC_Start_DMA+0x190>)
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4a3b      	ldr	r2, [pc, #236]	@ (8002bc8 <HAL_DAC_Start_DMA+0x194>)
 8002ada:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002aea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d013      	beq.n	8002b1a <HAL_DAC_Start_DMA+0xe6>
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d817      	bhi.n	8002b28 <HAL_DAC_Start_DMA+0xf4>
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_DAC_Start_DMA+0xd2>
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d005      	beq.n	8002b10 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002b04:	e010      	b.n	8002b28 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3314      	adds	r3, #20
 8002b0c:	613b      	str	r3, [r7, #16]
        break;
 8002b0e:	e00c      	b.n	8002b2a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3318      	adds	r3, #24
 8002b16:	613b      	str	r3, [r7, #16]
        break;
 8002b18:	e007      	b.n	8002b2a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	331c      	adds	r3, #28
 8002b20:	613b      	str	r3, [r7, #16]
        break;
 8002b22:	e002      	b.n	8002b2a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002b24:	bf00      	nop
 8002b26:	e000      	b.n	8002b2a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002b28:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d111      	bne.n	8002b54 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6898      	ldr	r0, [r3, #8]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	f000 fb21 	bl	8003190 <HAL_DMA_Start_IT>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	75fb      	strb	r3, [r7, #23]
 8002b52:	e010      	b.n	8002b76 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002b62:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68d8      	ldr	r0, [r3, #12]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	f000 fb0f 	bl	8003190 <HAL_DMA_Start_IT>
 8002b72:	4603      	mov	r3, r0
 8002b74:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10c      	bne.n	8002b9c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2201      	movs	r2, #1
 8002b90:	409a      	lsls	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e005      	b.n	8002ba8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f043 0204 	orr.w	r2, r3, #4
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	08002f2d 	.word	0x08002f2d
 8002bb8:	08002f4f 	.word	0x08002f4f
 8002bbc:	08002f6b 	.word	0x08002f6b
 8002bc0:	08002fd5 	.word	0x08002fd5
 8002bc4:	08002ff7 	.word	0x08002ff7
 8002bc8:	08003013 	.word	0x08003013

08002bcc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6819      	ldr	r1, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2201      	movs	r2, #1
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10d      	bne.n	8002c32 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fb33 	bl	8003286 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e00c      	b.n	8002c4c <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fb25 	bl	8003286 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8002c4a:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	795b      	ldrb	r3, [r3, #5]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_DAC_ConfigChannel+0x1c>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e137      	b.n	8002f20 <HAL_DAC_ConfigChannel+0x28c>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	f040 8081 	bne.w	8002dc8 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002cc6:	f7ff fcff 	bl	80026c8 <HAL_GetTick>
 8002cca:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d140      	bne.n	8002d54 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cd2:	e018      	b.n	8002d06 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cd4:	f7ff fcf8 	bl	80026c8 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d911      	bls.n	8002d06 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f043 0208 	orr.w	r2, r3, #8
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2203      	movs	r2, #3
 8002d00:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e10c      	b.n	8002f20 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1df      	bne.n	8002cd4 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002d14:	2001      	movs	r0, #1
 8002d16:	f7ff fce3 	bl	80026e0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	69d2      	ldr	r2, [r2, #28]
 8002d22:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d24:	e023      	b.n	8002d6e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d26:	f7ff fccf 	bl	80026c8 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d90f      	bls.n	8002d54 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	da0a      	bge.n	8002d54 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f043 0208 	orr.w	r2, r3, #8
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e0e5      	b.n	8002f20 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	dbe3      	blt.n	8002d26 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002d5e:	2001      	movs	r0, #1
 8002d60:	f7ff fcbe 	bl	80026e0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	69d2      	ldr	r2, [r2, #28]
 8002d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	ea02 0103 	and.w	r1, r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6a1a      	ldr	r2, [r3, #32]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	409a      	lsls	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	21ff      	movs	r1, #255	@ 0xff
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	ea02 0103 	and.w	r1, r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d11d      	bne.n	8002e0c <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd6:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	221f      	movs	r2, #31
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e12:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6819      	ldr	r1, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43da      	mvns	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	400a      	ands	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eb0:	d104      	bne.n	8002ebc <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	e018      	b.n	8002eee <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d104      	bne.n	8002ece <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	e00f      	b.n	8002eee <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002ece:	f002 faff 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
 8002ed2:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4a14      	ldr	r2, [pc, #80]	@ (8002f28 <HAL_DAC_ConfigChannel+0x294>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d904      	bls.n	8002ee6 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	e003      	b.n	8002eee <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002eec:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6819      	ldr	r1, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	22c0      	movs	r2, #192	@ 0xc0
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	400a      	ands	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	04c4b400 	.word	0x04c4b400

08002f2c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f7ff fe8b 	bl	8002c56 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	711a      	strb	r2, [r3, #4]
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7ff fe84 	bl	8002c6a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f043 0204 	orr.w	r2, r3, #4
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7ff fe7a 	bl	8002c7e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	711a      	strb	r2, [r3, #4]
}
 8002f90:	bf00      	nop
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f7ff ffd8 	bl	8002f98 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	711a      	strb	r2, [r3, #4]
}
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003002:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f7ff ffd1 	bl	8002fac <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f043 0204 	orr.w	r2, r3, #4
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7ff ffc7 	bl	8002fc0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	711a      	strb	r2, [r3, #4]
}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e08d      	b.n	800316e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	4b47      	ldr	r3, [pc, #284]	@ (8003178 <HAL_DMA_Init+0x138>)
 800305a:	429a      	cmp	r2, r3
 800305c:	d80f      	bhi.n	800307e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	4b45      	ldr	r3, [pc, #276]	@ (800317c <HAL_DMA_Init+0x13c>)
 8003066:	4413      	add	r3, r2
 8003068:	4a45      	ldr	r2, [pc, #276]	@ (8003180 <HAL_DMA_Init+0x140>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	009a      	lsls	r2, r3, #2
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a42      	ldr	r2, [pc, #264]	@ (8003184 <HAL_DMA_Init+0x144>)
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40
 800307c:	e00e      	b.n	800309c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	4b40      	ldr	r3, [pc, #256]	@ (8003188 <HAL_DMA_Init+0x148>)
 8003086:	4413      	add	r3, r2
 8003088:	4a3d      	ldr	r2, [pc, #244]	@ (8003180 <HAL_DMA_Init+0x140>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	009a      	lsls	r2, r3, #2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a3c      	ldr	r2, [pc, #240]	@ (800318c <HAL_DMA_Init+0x14c>)
 800309a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80030b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fa12 	bl	8003518 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030fc:	d102      	bne.n	8003104 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003118:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d010      	beq.n	8003144 <HAL_DMA_Init+0x104>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b04      	cmp	r3, #4
 8003128:	d80c      	bhi.n	8003144 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fa32 	bl	8003594 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	e008      	b.n	8003156 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40020407 	.word	0x40020407
 800317c:	bffdfff8 	.word	0xbffdfff8
 8003180:	cccccccd 	.word	0xcccccccd
 8003184:	40020000 	.word	0x40020000
 8003188:	bffdfbf8 	.word	0xbffdfbf8
 800318c:	40020400 	.word	0x40020400

08003190 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_DMA_Start_IT+0x20>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e066      	b.n	800327e <HAL_DMA_Start_IT+0xee>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d155      	bne.n	8003270 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f957 	bl	800349c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 020e 	orr.w	r2, r2, #14
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e00f      	b.n	8003228 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0204 	bic.w	r2, r2, #4
 8003216:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 020a 	orr.w	r2, r2, #10
 8003226:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003240:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003244:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003258:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800325c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0201 	orr.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e005      	b.n	800327c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003278:	2302      	movs	r3, #2
 800327a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800327c:	7dfb      	ldrb	r3, [r7, #23]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d008      	beq.n	80032b0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2204      	movs	r2, #4
 80032a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e040      	b.n	8003332 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 020e 	bic.w	r2, r2, #14
 80032be:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032ce:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e4:	f003 021c 	and.w	r2, r3, #28
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	2101      	movs	r1, #1
 80032ee:	fa01 f202 	lsl.w	r2, r1, r2
 80032f2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00c      	beq.n	8003320 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003310:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003314:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800331e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003330:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335a:	f003 031c 	and.w	r3, r3, #28
 800335e:	2204      	movs	r2, #4
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d026      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x7a>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d021      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	d107      	bne.n	8003392 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0204 	bic.w	r2, r2, #4
 8003390:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	f003 021c 	and.w	r2, r3, #28
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	2104      	movs	r1, #4
 80033a0:	fa01 f202 	lsl.w	r2, r1, r2
 80033a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d071      	beq.n	8003492 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80033b6:	e06c      	b.n	8003492 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033bc:	f003 031c 	and.w	r3, r3, #28
 80033c0:	2202      	movs	r2, #2
 80033c2:	409a      	lsls	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d02e      	beq.n	800342a <HAL_DMA_IRQHandler+0xec>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d029      	beq.n	800342a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10b      	bne.n	80033fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 020a 	bic.w	r2, r2, #10
 80033f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003400:	f003 021c 	and.w	r2, r3, #28
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	2102      	movs	r1, #2
 800340a:	fa01 f202 	lsl.w	r2, r1, r2
 800340e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d038      	beq.n	8003492 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003428:	e033      	b.n	8003492 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342e:	f003 031c 	and.w	r3, r3, #28
 8003432:	2208      	movs	r2, #8
 8003434:	409a      	lsls	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d02a      	beq.n	8003494 <HAL_DMA_IRQHandler+0x156>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d025      	beq.n	8003494 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 020e 	bic.w	r2, r2, #14
 8003456:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345c:	f003 021c 	and.w	r2, r3, #28
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	2101      	movs	r1, #1
 8003466:	fa01 f202 	lsl.w	r2, r1, r2
 800346a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003486:	2b00      	cmp	r3, #0
 8003488:	d004      	beq.n	8003494 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003492:	bf00      	nop
 8003494:	bf00      	nop
}
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034b2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d004      	beq.n	80034c6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034c4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	f003 021c 	and.w	r2, r3, #28
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f202 	lsl.w	r2, r1, r2
 80034d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d108      	bne.n	80034fc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034fa:	e007      	b.n	800350c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	60da      	str	r2, [r3, #12]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	4b17      	ldr	r3, [pc, #92]	@ (8003584 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003528:	429a      	cmp	r2, r3
 800352a:	d80a      	bhi.n	8003542 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003538:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003540:	e007      	b.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	009a      	lsls	r2, r3, #2
 800354a:	4b0f      	ldr	r3, [pc, #60]	@ (8003588 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800354c:	4413      	add	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	3b08      	subs	r3, #8
 800355a:	4a0c      	ldr	r2, [pc, #48]	@ (800358c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003568:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	2201      	movs	r2, #1
 8003572:	409a      	lsls	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	40020407 	.word	0x40020407
 8003588:	4002081c 	.word	0x4002081c
 800358c:	cccccccd 	.word	0xcccccccd
 8003590:	40020880 	.word	0x40020880

08003594 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	461a      	mov	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a08      	ldr	r2, [pc, #32]	@ (80035d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80035b6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2201      	movs	r2, #1
 80035c2:	409a      	lsls	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	1000823f 	.word	0x1000823f
 80035d8:	40020940 	.word	0x40020940

080035dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ea:	e166      	b.n	80038ba <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	2101      	movs	r1, #1
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	4013      	ands	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8158 	beq.w	80038b4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d005      	beq.n	800361c <HAL_GPIO_Init+0x40>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d130      	bne.n	800367e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	2203      	movs	r2, #3
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003652:	2201      	movs	r2, #1
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4013      	ands	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	f003 0201 	and.w	r2, r3, #1
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b03      	cmp	r3, #3
 8003688:	d017      	beq.n	80036ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	2203      	movs	r2, #3
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d123      	bne.n	800370e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	08da      	lsrs	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3208      	adds	r2, #8
 80036ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	220f      	movs	r2, #15
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	08da      	lsrs	r2, r3, #3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3208      	adds	r2, #8
 8003708:	6939      	ldr	r1, [r7, #16]
 800370a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	2203      	movs	r2, #3
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4013      	ands	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0203 	and.w	r2, r3, #3
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80b2 	beq.w	80038b4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003750:	4b61      	ldr	r3, [pc, #388]	@ (80038d8 <HAL_GPIO_Init+0x2fc>)
 8003752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003754:	4a60      	ldr	r2, [pc, #384]	@ (80038d8 <HAL_GPIO_Init+0x2fc>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6613      	str	r3, [r2, #96]	@ 0x60
 800375c:	4b5e      	ldr	r3, [pc, #376]	@ (80038d8 <HAL_GPIO_Init+0x2fc>)
 800375e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003768:	4a5c      	ldr	r2, [pc, #368]	@ (80038dc <HAL_GPIO_Init+0x300>)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	089b      	lsrs	r3, r3, #2
 800376e:	3302      	adds	r3, #2
 8003770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	220f      	movs	r2, #15
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003792:	d02b      	beq.n	80037ec <HAL_GPIO_Init+0x210>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a52      	ldr	r2, [pc, #328]	@ (80038e0 <HAL_GPIO_Init+0x304>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d025      	beq.n	80037e8 <HAL_GPIO_Init+0x20c>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a51      	ldr	r2, [pc, #324]	@ (80038e4 <HAL_GPIO_Init+0x308>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d01f      	beq.n	80037e4 <HAL_GPIO_Init+0x208>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a50      	ldr	r2, [pc, #320]	@ (80038e8 <HAL_GPIO_Init+0x30c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d019      	beq.n	80037e0 <HAL_GPIO_Init+0x204>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a4f      	ldr	r2, [pc, #316]	@ (80038ec <HAL_GPIO_Init+0x310>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d013      	beq.n	80037dc <HAL_GPIO_Init+0x200>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a4e      	ldr	r2, [pc, #312]	@ (80038f0 <HAL_GPIO_Init+0x314>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00d      	beq.n	80037d8 <HAL_GPIO_Init+0x1fc>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a4d      	ldr	r2, [pc, #308]	@ (80038f4 <HAL_GPIO_Init+0x318>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d007      	beq.n	80037d4 <HAL_GPIO_Init+0x1f8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a4c      	ldr	r2, [pc, #304]	@ (80038f8 <HAL_GPIO_Init+0x31c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_GPIO_Init+0x1f4>
 80037cc:	2307      	movs	r3, #7
 80037ce:	e00e      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037d0:	2308      	movs	r3, #8
 80037d2:	e00c      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037d4:	2306      	movs	r3, #6
 80037d6:	e00a      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037d8:	2305      	movs	r3, #5
 80037da:	e008      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037dc:	2304      	movs	r3, #4
 80037de:	e006      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037e0:	2303      	movs	r3, #3
 80037e2:	e004      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e002      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <HAL_GPIO_Init+0x212>
 80037ec:	2300      	movs	r3, #0
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	f002 0203 	and.w	r2, r2, #3
 80037f4:	0092      	lsls	r2, r2, #2
 80037f6:	4093      	lsls	r3, r2
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037fe:	4937      	ldr	r1, [pc, #220]	@ (80038dc <HAL_GPIO_Init+0x300>)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	3302      	adds	r3, #2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800380c:	4b3b      	ldr	r3, [pc, #236]	@ (80038fc <HAL_GPIO_Init+0x320>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	43db      	mvns	r3, r3
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003830:	4a32      	ldr	r2, [pc, #200]	@ (80038fc <HAL_GPIO_Init+0x320>)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003836:	4b31      	ldr	r3, [pc, #196]	@ (80038fc <HAL_GPIO_Init+0x320>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	43db      	mvns	r3, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800385a:	4a28      	ldr	r2, [pc, #160]	@ (80038fc <HAL_GPIO_Init+0x320>)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003860:	4b26      	ldr	r3, [pc, #152]	@ (80038fc <HAL_GPIO_Init+0x320>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	43db      	mvns	r3, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003884:	4a1d      	ldr	r2, [pc, #116]	@ (80038fc <HAL_GPIO_Init+0x320>)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800388a:	4b1c      	ldr	r3, [pc, #112]	@ (80038fc <HAL_GPIO_Init+0x320>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	43db      	mvns	r3, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4013      	ands	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038ae:	4a13      	ldr	r2, [pc, #76]	@ (80038fc <HAL_GPIO_Init+0x320>)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	3301      	adds	r3, #1
 80038b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f ae91 	bne.w	80035ec <HAL_GPIO_Init+0x10>
  }
}
 80038ca:	bf00      	nop
 80038cc:	bf00      	nop
 80038ce:	371c      	adds	r7, #28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40010000 	.word	0x40010000
 80038e0:	48000400 	.word	0x48000400
 80038e4:	48000800 	.word	0x48000800
 80038e8:	48000c00 	.word	0x48000c00
 80038ec:	48001000 	.word	0x48001000
 80038f0:	48001400 	.word	0x48001400
 80038f4:	48001800 	.word	0x48001800
 80038f8:	48001c00 	.word	0x48001c00
 80038fc:	40010400 	.word	0x40010400

08003900 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800390e:	e0c9      	b.n	8003aa4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003910:	2201      	movs	r2, #1
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	4013      	ands	r3, r2
 800391c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80bc 	beq.w	8003a9e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003926:	4a66      	ldr	r2, [pc, #408]	@ (8003ac0 <HAL_GPIO_DeInit+0x1c0>)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	3302      	adds	r3, #2
 800392e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003932:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	220f      	movs	r2, #15
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800394e:	d02b      	beq.n	80039a8 <HAL_GPIO_DeInit+0xa8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a5c      	ldr	r2, [pc, #368]	@ (8003ac4 <HAL_GPIO_DeInit+0x1c4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d025      	beq.n	80039a4 <HAL_GPIO_DeInit+0xa4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ac8 <HAL_GPIO_DeInit+0x1c8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d01f      	beq.n	80039a0 <HAL_GPIO_DeInit+0xa0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a5a      	ldr	r2, [pc, #360]	@ (8003acc <HAL_GPIO_DeInit+0x1cc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d019      	beq.n	800399c <HAL_GPIO_DeInit+0x9c>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a59      	ldr	r2, [pc, #356]	@ (8003ad0 <HAL_GPIO_DeInit+0x1d0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d013      	beq.n	8003998 <HAL_GPIO_DeInit+0x98>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a58      	ldr	r2, [pc, #352]	@ (8003ad4 <HAL_GPIO_DeInit+0x1d4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00d      	beq.n	8003994 <HAL_GPIO_DeInit+0x94>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a57      	ldr	r2, [pc, #348]	@ (8003ad8 <HAL_GPIO_DeInit+0x1d8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <HAL_GPIO_DeInit+0x90>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a56      	ldr	r2, [pc, #344]	@ (8003adc <HAL_GPIO_DeInit+0x1dc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d101      	bne.n	800398c <HAL_GPIO_DeInit+0x8c>
 8003988:	2307      	movs	r3, #7
 800398a:	e00e      	b.n	80039aa <HAL_GPIO_DeInit+0xaa>
 800398c:	2308      	movs	r3, #8
 800398e:	e00c      	b.n	80039aa <HAL_GPIO_DeInit+0xaa>
 8003990:	2306      	movs	r3, #6
 8003992:	e00a      	b.n	80039aa <HAL_GPIO_DeInit+0xaa>
 8003994:	2305      	movs	r3, #5
 8003996:	e008      	b.n	80039aa <HAL_GPIO_DeInit+0xaa>
 8003998:	2304      	movs	r3, #4
 800399a:	e006      	b.n	80039aa <HAL_GPIO_DeInit+0xaa>
 800399c:	2303      	movs	r3, #3
 800399e:	e004      	b.n	80039aa <HAL_GPIO_DeInit+0xaa>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e002      	b.n	80039aa <HAL_GPIO_DeInit+0xaa>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <HAL_GPIO_DeInit+0xaa>
 80039a8:	2300      	movs	r3, #0
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	f002 0203 	and.w	r2, r2, #3
 80039b0:	0092      	lsls	r2, r2, #2
 80039b2:	4093      	lsls	r3, r2
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d132      	bne.n	8003a20 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80039ba:	4b49      	ldr	r3, [pc, #292]	@ (8003ae0 <HAL_GPIO_DeInit+0x1e0>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	4947      	ldr	r1, [pc, #284]	@ (8003ae0 <HAL_GPIO_DeInit+0x1e0>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80039c8:	4b45      	ldr	r3, [pc, #276]	@ (8003ae0 <HAL_GPIO_DeInit+0x1e0>)
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	4943      	ldr	r1, [pc, #268]	@ (8003ae0 <HAL_GPIO_DeInit+0x1e0>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80039d6:	4b42      	ldr	r3, [pc, #264]	@ (8003ae0 <HAL_GPIO_DeInit+0x1e0>)
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	43db      	mvns	r3, r3
 80039de:	4940      	ldr	r1, [pc, #256]	@ (8003ae0 <HAL_GPIO_DeInit+0x1e0>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80039e4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ae0 <HAL_GPIO_DeInit+0x1e0>)
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	493c      	ldr	r1, [pc, #240]	@ (8003ae0 <HAL_GPIO_DeInit+0x1e0>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	220f      	movs	r2, #15
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003a02:	4a2f      	ldr	r2, [pc, #188]	@ (8003ac0 <HAL_GPIO_DeInit+0x1c0>)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	089b      	lsrs	r3, r3, #2
 8003a08:	3302      	adds	r3, #2
 8003a0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	43da      	mvns	r2, r3
 8003a12:	482b      	ldr	r0, [pc, #172]	@ (8003ac0 <HAL_GPIO_DeInit+0x1c0>)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	400a      	ands	r2, r1
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	2103      	movs	r1, #3
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	08da      	lsrs	r2, r3, #3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3208      	adds	r2, #8
 8003a3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	220f      	movs	r2, #15
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	08d2      	lsrs	r2, r2, #3
 8003a54:	4019      	ands	r1, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3208      	adds	r2, #8
 8003a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	2103      	movs	r1, #3
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	401a      	ands	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	2101      	movs	r1, #1
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	401a      	ands	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	2103      	movs	r1, #3
 8003a92:	fa01 f303 	lsl.w	r3, r1, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	401a      	ands	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f47f af2f 	bne.w	8003910 <HAL_GPIO_DeInit+0x10>
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	48000400 	.word	0x48000400
 8003ac8:	48000800 	.word	0x48000800
 8003acc:	48000c00 	.word	0x48000c00
 8003ad0:	48001000 	.word	0x48001000
 8003ad4:	48001400 	.word	0x48001400
 8003ad8:	48001800 	.word	0x48001800
 8003adc:	48001c00 	.word	0x48001c00
 8003ae0:	40010400 	.word	0x40010400

08003ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e08d      	b.n	8003c12 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fe f92e 	bl	8001d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2224      	movs	r2, #36	@ 0x24
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d107      	bne.n	8003b5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	e006      	b.n	8003b6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d108      	bne.n	8003b86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	e007      	b.n	8003b96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ba8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69d9      	ldr	r1, [r3, #28]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1a      	ldr	r2, [r3, #32]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e021      	b.n	8003c70 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	@ 0x24
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0201 	bic.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7fe f8ef 	bl	8001e28 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	4608      	mov	r0, r1
 8003c82:	4611      	mov	r1, r2
 8003c84:	461a      	mov	r2, r3
 8003c86:	4603      	mov	r3, r0
 8003c88:	817b      	strh	r3, [r7, #10]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	813b      	strh	r3, [r7, #8]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	f040 80f9 	bne.w	8003e92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_I2C_Mem_Write+0x34>
 8003ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cb2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0ed      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_I2C_Mem_Write+0x4e>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e0e6      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cce:	f7fe fcfb 	bl	80026c8 <HAL_GetTick>
 8003cd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	2319      	movs	r3, #25
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fac3 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0d1      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2221      	movs	r2, #33	@ 0x21
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2240      	movs	r2, #64	@ 0x40
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a3a      	ldr	r2, [r7, #32]
 8003d0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d18:	88f8      	ldrh	r0, [r7, #6]
 8003d1a:	893a      	ldrh	r2, [r7, #8]
 8003d1c:	8979      	ldrh	r1, [r7, #10]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	4603      	mov	r3, r0
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f9d3 	bl	80040d4 <I2C_RequestMemoryWrite>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0a9      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2bff      	cmp	r3, #255	@ 0xff
 8003d48:	d90e      	bls.n	8003d68 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	22ff      	movs	r2, #255	@ 0xff
 8003d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	8979      	ldrh	r1, [r7, #10]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fc47 	bl	80045f4 <I2C_TransferConfig>
 8003d66:	e00f      	b.n	8003d88 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	8979      	ldrh	r1, [r7, #10]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 fc36 	bl	80045f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fac6 	bl	800431e <I2C_WaitOnTXISFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e07b      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	781a      	ldrb	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d034      	beq.n	8003e40 <HAL_I2C_Mem_Write+0x1c8>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d130      	bne.n	8003e40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de4:	2200      	movs	r2, #0
 8003de6:	2180      	movs	r1, #128	@ 0x80
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fa3f 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e04d      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2bff      	cmp	r3, #255	@ 0xff
 8003e00:	d90e      	bls.n	8003e20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	22ff      	movs	r2, #255	@ 0xff
 8003e06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	8979      	ldrh	r1, [r7, #10]
 8003e10:	2300      	movs	r3, #0
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 fbeb 	bl	80045f4 <I2C_TransferConfig>
 8003e1e:	e00f      	b.n	8003e40 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	8979      	ldrh	r1, [r7, #10]
 8003e32:	2300      	movs	r3, #0
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fbda 	bl	80045f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d19e      	bne.n	8003d88 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 faac 	bl	80043ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e01a      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2220      	movs	r2, #32
 8003e64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b0a      	ldr	r3, [pc, #40]	@ (8003e9c <HAL_I2C_Mem_Write+0x224>)
 8003e72:	400b      	ands	r3, r1
 8003e74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	fe00e800 	.word	0xfe00e800

08003ea0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	817b      	strh	r3, [r7, #10]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	813b      	strh	r3, [r7, #8]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	f040 80fd 	bne.w	80040c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_I2C_Mem_Read+0x34>
 8003ece:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eda:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0f1      	b.n	80040c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_I2C_Mem_Read+0x4e>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e0ea      	b.n	80040c4 <HAL_I2C_Mem_Read+0x224>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ef6:	f7fe fbe7 	bl	80026c8 <HAL_GetTick>
 8003efa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	2319      	movs	r3, #25
 8003f02:	2201      	movs	r2, #1
 8003f04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f9af 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0d5      	b.n	80040c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2222      	movs	r2, #34	@ 0x22
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2240      	movs	r2, #64	@ 0x40
 8003f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f40:	88f8      	ldrh	r0, [r7, #6]
 8003f42:	893a      	ldrh	r2, [r7, #8]
 8003f44:	8979      	ldrh	r1, [r7, #10]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	4603      	mov	r3, r0
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f913 	bl	800417c <I2C_RequestMemoryRead>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0ad      	b.n	80040c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2bff      	cmp	r3, #255	@ 0xff
 8003f70:	d90e      	bls.n	8003f90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	8979      	ldrh	r1, [r7, #10]
 8003f80:	4b52      	ldr	r3, [pc, #328]	@ (80040cc <HAL_I2C_Mem_Read+0x22c>)
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fb33 	bl	80045f4 <I2C_TransferConfig>
 8003f8e:	e00f      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	8979      	ldrh	r1, [r7, #10]
 8003fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80040cc <HAL_I2C_Mem_Read+0x22c>)
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fb22 	bl	80045f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2104      	movs	r1, #4
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f956 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e07c      	b.n	80040c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d034      	beq.n	8004070 <HAL_I2C_Mem_Read+0x1d0>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400a:	2b00      	cmp	r3, #0
 800400c:	d130      	bne.n	8004070 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004014:	2200      	movs	r2, #0
 8004016:	2180      	movs	r1, #128	@ 0x80
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f927 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e04d      	b.n	80040c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402c:	b29b      	uxth	r3, r3
 800402e:	2bff      	cmp	r3, #255	@ 0xff
 8004030:	d90e      	bls.n	8004050 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403c:	b2da      	uxtb	r2, r3
 800403e:	8979      	ldrh	r1, [r7, #10]
 8004040:	2300      	movs	r3, #0
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fad3 	bl	80045f4 <I2C_TransferConfig>
 800404e:	e00f      	b.n	8004070 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405e:	b2da      	uxtb	r2, r3
 8004060:	8979      	ldrh	r1, [r7, #10]
 8004062:	2300      	movs	r3, #0
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fac2 	bl	80045f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d19a      	bne.n	8003fb0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f994 	bl	80043ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e01a      	b.n	80040c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2220      	movs	r2, #32
 8004094:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <HAL_I2C_Mem_Read+0x230>)
 80040a2:	400b      	ands	r3, r1
 80040a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	e000      	b.n	80040c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80040c2:	2302      	movs	r3, #2
  }
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	80002400 	.word	0x80002400
 80040d0:	fe00e800 	.word	0xfe00e800

080040d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	4608      	mov	r0, r1
 80040de:	4611      	mov	r1, r2
 80040e0:	461a      	mov	r2, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	817b      	strh	r3, [r7, #10]
 80040e6:	460b      	mov	r3, r1
 80040e8:	813b      	strh	r3, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	8979      	ldrh	r1, [r7, #10]
 80040f4:	4b20      	ldr	r3, [pc, #128]	@ (8004178 <I2C_RequestMemoryWrite+0xa4>)
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fa79 	bl	80045f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	69b9      	ldr	r1, [r7, #24]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f909 	bl	800431e <I2C_WaitOnTXISFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e02c      	b.n	8004170 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d105      	bne.n	8004128 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800411c:	893b      	ldrh	r3, [r7, #8]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	629a      	str	r2, [r3, #40]	@ 0x28
 8004126:	e015      	b.n	8004154 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004128:	893b      	ldrh	r3, [r7, #8]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	b29b      	uxth	r3, r3
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	69b9      	ldr	r1, [r7, #24]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f8ef 	bl	800431e <I2C_WaitOnTXISFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e012      	b.n	8004170 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800414a:	893b      	ldrh	r3, [r7, #8]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2200      	movs	r2, #0
 800415c:	2180      	movs	r1, #128	@ 0x80
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f884 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	80002000 	.word	0x80002000

0800417c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af02      	add	r7, sp, #8
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	4608      	mov	r0, r1
 8004186:	4611      	mov	r1, r2
 8004188:	461a      	mov	r2, r3
 800418a:	4603      	mov	r3, r0
 800418c:	817b      	strh	r3, [r7, #10]
 800418e:	460b      	mov	r3, r1
 8004190:	813b      	strh	r3, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	b2da      	uxtb	r2, r3
 800419a:	8979      	ldrh	r1, [r7, #10]
 800419c:	4b20      	ldr	r3, [pc, #128]	@ (8004220 <I2C_RequestMemoryRead+0xa4>)
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	2300      	movs	r3, #0
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fa26 	bl	80045f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	69b9      	ldr	r1, [r7, #24]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f8b6 	bl	800431e <I2C_WaitOnTXISFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e02c      	b.n	8004216 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d105      	bne.n	80041ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041c2:	893b      	ldrh	r3, [r7, #8]
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80041cc:	e015      	b.n	80041fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041ce:	893b      	ldrh	r3, [r7, #8]
 80041d0:	0a1b      	lsrs	r3, r3, #8
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	69b9      	ldr	r1, [r7, #24]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f89c 	bl	800431e <I2C_WaitOnTXISFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e012      	b.n	8004216 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041f0:	893b      	ldrh	r3, [r7, #8]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2200      	movs	r2, #0
 8004202:	2140      	movs	r1, #64	@ 0x40
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f831 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	80002000 	.word	0x80002000

08004224 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b02      	cmp	r3, #2
 8004238:	d103      	bne.n	8004242 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2200      	movs	r2, #0
 8004240:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	d007      	beq.n	8004260 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	619a      	str	r2, [r3, #24]
  }
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800427c:	e03b      	b.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	6839      	ldr	r1, [r7, #0]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f8d6 	bl	8004434 <I2C_IsErrorOccurred>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e041      	b.n	8004316 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d02d      	beq.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429a:	f7fe fa15 	bl	80026c8 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d302      	bcc.n	80042b0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d122      	bne.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4013      	ands	r3, r2
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	429a      	cmp	r2, r3
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d113      	bne.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d2:	f043 0220 	orr.w	r2, r3, #32
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e00f      	b.n	8004316 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699a      	ldr	r2, [r3, #24]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	429a      	cmp	r2, r3
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	429a      	cmp	r2, r3
 8004312:	d0b4      	beq.n	800427e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b084      	sub	sp, #16
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800432a:	e033      	b.n	8004394 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f87f 	bl	8004434 <I2C_IsErrorOccurred>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e031      	b.n	80043a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d025      	beq.n	8004394 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004348:	f7fe f9be 	bl	80026c8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	429a      	cmp	r2, r3
 8004356:	d302      	bcc.n	800435e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d11a      	bne.n	8004394 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b02      	cmp	r3, #2
 800436a:	d013      	beq.n	8004394 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e007      	b.n	80043a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d1c4      	bne.n	800432c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043b8:	e02f      	b.n	800441a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f838 	bl	8004434 <I2C_IsErrorOccurred>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e02d      	b.n	800442a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ce:	f7fe f97b 	bl	80026c8 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d11a      	bne.n	800441a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d013      	beq.n	800441a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f6:	f043 0220 	orr.w	r2, r3, #32
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e007      	b.n	800442a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b20      	cmp	r3, #32
 8004426:	d1c8      	bne.n	80043ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08a      	sub	sp, #40	@ 0x28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b00      	cmp	r3, #0
 800445e:	d068      	beq.n	8004532 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2210      	movs	r2, #16
 8004466:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004468:	e049      	b.n	80044fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d045      	beq.n	80044fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004472:	f7fe f929 	bl	80026c8 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	429a      	cmp	r2, r3
 8004480:	d302      	bcc.n	8004488 <I2C_IsErrorOccurred+0x54>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d13a      	bne.n	80044fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004492:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800449a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044aa:	d121      	bne.n	80044f0 <I2C_IsErrorOccurred+0xbc>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044b2:	d01d      	beq.n	80044f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d01a      	beq.n	80044f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044ca:	f7fe f8fd 	bl	80026c8 <HAL_GetTick>
 80044ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044d0:	e00e      	b.n	80044f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044d2:	f7fe f8f9 	bl	80026c8 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b19      	cmp	r3, #25
 80044de:	d907      	bls.n	80044f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	f043 0320 	orr.w	r3, r3, #32
 80044e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80044ee:	e006      	b.n	80044fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d1e9      	bne.n	80044d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b20      	cmp	r3, #32
 800450a:	d003      	beq.n	8004514 <I2C_IsErrorOccurred+0xe0>
 800450c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0aa      	beq.n	800446a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004518:	2b00      	cmp	r3, #0
 800451a:	d103      	bne.n	8004524 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2220      	movs	r2, #32
 8004522:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	f043 0304 	orr.w	r3, r3, #4
 800452a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00b      	beq.n	800455c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004554:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00b      	beq.n	800457e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	f043 0308 	orr.w	r3, r3, #8
 800456c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004576:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00b      	beq.n	80045a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	f043 0302 	orr.w	r3, r3, #2
 800458e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004598:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80045a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01c      	beq.n	80045e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7ff fe3b 	bl	8004224 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4b0d      	ldr	r3, [pc, #52]	@ (80045f0 <I2C_IsErrorOccurred+0x1bc>)
 80045ba:	400b      	ands	r3, r1
 80045bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80045e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3728      	adds	r7, #40	@ 0x28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	fe00e800 	.word	0xfe00e800

080045f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	817b      	strh	r3, [r7, #10]
 8004602:	4613      	mov	r3, r2
 8004604:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004606:	897b      	ldrh	r3, [r7, #10]
 8004608:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800460c:	7a7b      	ldrb	r3, [r7, #9]
 800460e:	041b      	lsls	r3, r3, #16
 8004610:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004614:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	4313      	orrs	r3, r2
 800461e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004622:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	0d5b      	lsrs	r3, r3, #21
 800462e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004632:	4b08      	ldr	r3, [pc, #32]	@ (8004654 <I2C_TransferConfig+0x60>)
 8004634:	430b      	orrs	r3, r1
 8004636:	43db      	mvns	r3, r3
 8004638:	ea02 0103 	and.w	r1, r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	03ff63ff 	.word	0x03ff63ff

08004658 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b20      	cmp	r3, #32
 800466c:	d138      	bne.n	80046e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004678:	2302      	movs	r3, #2
 800467a:	e032      	b.n	80046e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2224      	movs	r2, #36	@ 0x24
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6819      	ldr	r1, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	e000      	b.n	80046e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046e0:	2302      	movs	r3, #2
  }
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b20      	cmp	r3, #32
 8004702:	d139      	bne.n	8004778 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800470e:	2302      	movs	r3, #2
 8004710:	e033      	b.n	800477a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2224      	movs	r2, #36	@ 0x24
 800471e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0201 	bic.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004740:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	e000      	b.n	800477a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004778:	2302      	movs	r3, #2
  }
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800478c:	4b0d      	ldr	r3, [pc, #52]	@ (80047c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004798:	d102      	bne.n	80047a0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800479a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800479e:	e00b      	b.n	80047b8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80047a0:	4b08      	ldr	r3, [pc, #32]	@ (80047c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80047a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ae:	d102      	bne.n	80047b6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80047b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047b4:	e000      	b.n	80047b8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80047b6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40007000 	.word	0x40007000

080047c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d141      	bne.n	800485a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e2:	d131      	bne.n	8004848 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047e4:	4b47      	ldr	r3, [pc, #284]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ea:	4a46      	ldr	r2, [pc, #280]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047f4:	4b43      	ldr	r3, [pc, #268]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047fc:	4a41      	ldr	r2, [pc, #260]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004802:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004804:	4b40      	ldr	r3, [pc, #256]	@ (8004908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2232      	movs	r2, #50	@ 0x32
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	4a3f      	ldr	r2, [pc, #252]	@ (800490c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	0c9b      	lsrs	r3, r3, #18
 8004816:	3301      	adds	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800481a:	e002      	b.n	8004822 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3b01      	subs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004822:	4b38      	ldr	r3, [pc, #224]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800482e:	d102      	bne.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f2      	bne.n	800481c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004836:	4b33      	ldr	r3, [pc, #204]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004842:	d158      	bne.n	80048f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e057      	b.n	80048f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004848:	4b2e      	ldr	r3, [pc, #184]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800484e:	4a2d      	ldr	r2, [pc, #180]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004854:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004858:	e04d      	b.n	80048f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004860:	d141      	bne.n	80048e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004862:	4b28      	ldr	r3, [pc, #160]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800486a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800486e:	d131      	bne.n	80048d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004870:	4b24      	ldr	r3, [pc, #144]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004876:	4a23      	ldr	r2, [pc, #140]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800487c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004880:	4b20      	ldr	r3, [pc, #128]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004888:	4a1e      	ldr	r2, [pc, #120]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800488e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004890:	4b1d      	ldr	r3, [pc, #116]	@ (8004908 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2232      	movs	r2, #50	@ 0x32
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	4a1c      	ldr	r2, [pc, #112]	@ (800490c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	0c9b      	lsrs	r3, r3, #18
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048a6:	e002      	b.n	80048ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ae:	4b15      	ldr	r3, [pc, #84]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ba:	d102      	bne.n	80048c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f2      	bne.n	80048a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048c2:	4b10      	ldr	r3, [pc, #64]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ce:	d112      	bne.n	80048f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e011      	b.n	80048f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048da:	4a0a      	ldr	r2, [pc, #40]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048e4:	e007      	b.n	80048f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048e6:	4b07      	ldr	r3, [pc, #28]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048ee:	4a05      	ldr	r2, [pc, #20]	@ (8004904 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048f4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	40007000 	.word	0x40007000
 8004908:	2000003c 	.word	0x2000003c
 800490c:	431bde83 	.word	0x431bde83

08004910 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d102      	bne.n	8004924 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f000 bc08 	b.w	8005134 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004924:	4b96      	ldr	r3, [pc, #600]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 030c 	and.w	r3, r3, #12
 800492c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800492e:	4b94      	ldr	r3, [pc, #592]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80e4 	beq.w	8004b0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <HAL_RCC_OscConfig+0x4c>
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b0c      	cmp	r3, #12
 8004950:	f040 808b 	bne.w	8004a6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2b01      	cmp	r3, #1
 8004958:	f040 8087 	bne.w	8004a6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800495c:	4b88      	ldr	r3, [pc, #544]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_OscConfig+0x64>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e3df      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1a      	ldr	r2, [r3, #32]
 8004978:	4b81      	ldr	r3, [pc, #516]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <HAL_RCC_OscConfig+0x7e>
 8004984:	4b7e      	ldr	r3, [pc, #504]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800498c:	e005      	b.n	800499a <HAL_RCC_OscConfig+0x8a>
 800498e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004990:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800499a:	4293      	cmp	r3, r2
 800499c:	d223      	bcs.n	80049e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fdcc 	bl	8005540 <RCC_SetFlashLatencyFromMSIRange>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e3c0      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049b2:	4b73      	ldr	r3, [pc, #460]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a72      	ldr	r2, [pc, #456]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 80049b8:	f043 0308 	orr.w	r3, r3, #8
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	4b70      	ldr	r3, [pc, #448]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	496d      	ldr	r1, [pc, #436]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049d0:	4b6b      	ldr	r3, [pc, #428]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	4968      	ldr	r1, [pc, #416]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	604b      	str	r3, [r1, #4]
 80049e4:	e025      	b.n	8004a32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049e6:	4b66      	ldr	r3, [pc, #408]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a65      	ldr	r2, [pc, #404]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 80049ec:	f043 0308 	orr.w	r3, r3, #8
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	4b63      	ldr	r3, [pc, #396]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	4960      	ldr	r1, [pc, #384]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a04:	4b5e      	ldr	r3, [pc, #376]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	495b      	ldr	r1, [pc, #364]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fd8c 	bl	8005540 <RCC_SetFlashLatencyFromMSIRange>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e380      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a32:	f000 fcc1 	bl	80053b8 <HAL_RCC_GetSysClockFreq>
 8004a36:	4602      	mov	r2, r0
 8004a38:	4b51      	ldr	r3, [pc, #324]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	4950      	ldr	r1, [pc, #320]	@ (8004b84 <HAL_RCC_OscConfig+0x274>)
 8004a44:	5ccb      	ldrb	r3, [r1, r3]
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4e:	4a4e      	ldr	r2, [pc, #312]	@ (8004b88 <HAL_RCC_OscConfig+0x278>)
 8004a50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a52:	4b4e      	ldr	r3, [pc, #312]	@ (8004b8c <HAL_RCC_OscConfig+0x27c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fd fde6 	bl	8002628 <HAL_InitTick>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d052      	beq.n	8004b0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	e364      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d032      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a72:	4b43      	ldr	r3, [pc, #268]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a42      	ldr	r2, [pc, #264]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a7e:	f7fd fe23 	bl	80026c8 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a86:	f7fd fe1f 	bl	80026c8 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e34d      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a98:	4b39      	ldr	r3, [pc, #228]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aa4:	4b36      	ldr	r3, [pc, #216]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a35      	ldr	r2, [pc, #212]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004aaa:	f043 0308 	orr.w	r3, r3, #8
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	4b33      	ldr	r3, [pc, #204]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	4930      	ldr	r1, [pc, #192]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	492b      	ldr	r1, [pc, #172]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	604b      	str	r3, [r1, #4]
 8004ad6:	e01a      	b.n	8004b0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ad8:	4b29      	ldr	r3, [pc, #164]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a28      	ldr	r2, [pc, #160]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004ade:	f023 0301 	bic.w	r3, r3, #1
 8004ae2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fdf0 	bl	80026c8 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aec:	f7fd fdec 	bl	80026c8 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e31a      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004afe:	4b20      	ldr	r3, [pc, #128]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x1dc>
 8004b0a:	e000      	b.n	8004b0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d073      	beq.n	8004c02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCC_OscConfig+0x21c>
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b0c      	cmp	r3, #12
 8004b24:	d10e      	bne.n	8004b44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d10b      	bne.n	8004b44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2c:	4b14      	ldr	r3, [pc, #80]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d063      	beq.n	8004c00 <HAL_RCC_OscConfig+0x2f0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d15f      	bne.n	8004c00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e2f7      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b4c:	d106      	bne.n	8004b5c <HAL_RCC_OscConfig+0x24c>
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a0b      	ldr	r2, [pc, #44]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e025      	b.n	8004ba8 <HAL_RCC_OscConfig+0x298>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b64:	d114      	bne.n	8004b90 <HAL_RCC_OscConfig+0x280>
 8004b66:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a05      	ldr	r2, [pc, #20]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	4b03      	ldr	r3, [pc, #12]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a02      	ldr	r2, [pc, #8]	@ (8004b80 <HAL_RCC_OscConfig+0x270>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e013      	b.n	8004ba8 <HAL_RCC_OscConfig+0x298>
 8004b80:	40021000 	.word	0x40021000
 8004b84:	0800a314 	.word	0x0800a314
 8004b88:	2000003c 	.word	0x2000003c
 8004b8c:	200000a8 	.word	0x200000a8
 8004b90:	4ba0      	ldr	r3, [pc, #640]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a9f      	ldr	r2, [pc, #636]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4b9d      	ldr	r3, [pc, #628]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a9c      	ldr	r2, [pc, #624]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d013      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fd fd8a 	bl	80026c8 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb8:	f7fd fd86 	bl	80026c8 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	@ 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e2b4      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bca:	4b92      	ldr	r3, [pc, #584]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x2a8>
 8004bd6:	e014      	b.n	8004c02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fd fd76 	bl	80026c8 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be0:	f7fd fd72 	bl	80026c8 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	@ 0x64
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e2a0      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bf2:	4b88      	ldr	r3, [pc, #544]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x2d0>
 8004bfe:	e000      	b.n	8004c02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d060      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_OscConfig+0x310>
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d119      	bne.n	8004c4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d116      	bne.n	8004c4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c20:	4b7c      	ldr	r3, [pc, #496]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_OscConfig+0x328>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e27d      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c38:	4b76      	ldr	r3, [pc, #472]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	061b      	lsls	r3, r3, #24
 8004c46:	4973      	ldr	r1, [pc, #460]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c4c:	e040      	b.n	8004cd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d023      	beq.n	8004c9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c56:	4b6f      	ldr	r3, [pc, #444]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a6e      	ldr	r2, [pc, #440]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c62:	f7fd fd31 	bl	80026c8 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c6a:	f7fd fd2d 	bl	80026c8 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e25b      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c7c:	4b65      	ldr	r3, [pc, #404]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c88:	4b62      	ldr	r3, [pc, #392]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	061b      	lsls	r3, r3, #24
 8004c96:	495f      	ldr	r1, [pc, #380]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	604b      	str	r3, [r1, #4]
 8004c9c:	e018      	b.n	8004cd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c9e:	4b5d      	ldr	r3, [pc, #372]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a5c      	ldr	r2, [pc, #368]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004caa:	f7fd fd0d 	bl	80026c8 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb2:	f7fd fd09 	bl	80026c8 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e237      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cc4:	4b53      	ldr	r3, [pc, #332]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f0      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d03c      	beq.n	8004d56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01c      	beq.n	8004d1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cea:	4a4a      	ldr	r2, [pc, #296]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fd fce8 	bl	80026c8 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cfc:	f7fd fce4 	bl	80026c8 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e212      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d0e:	4b41      	ldr	r3, [pc, #260]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0ef      	beq.n	8004cfc <HAL_RCC_OscConfig+0x3ec>
 8004d1c:	e01b      	b.n	8004d56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d24:	4a3b      	ldr	r2, [pc, #236]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2e:	f7fd fccb 	bl	80026c8 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d36:	f7fd fcc7 	bl	80026c8 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e1f5      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d48:	4b32      	ldr	r3, [pc, #200]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1ef      	bne.n	8004d36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 80a6 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d64:	2300      	movs	r3, #0
 8004d66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d68:	4b2a      	ldr	r3, [pc, #168]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10d      	bne.n	8004d90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d74:	4b27      	ldr	r3, [pc, #156]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d78:	4a26      	ldr	r2, [pc, #152]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d80:	4b24      	ldr	r3, [pc, #144]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d90:	4b21      	ldr	r3, [pc, #132]	@ (8004e18 <HAL_RCC_OscConfig+0x508>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d118      	bne.n	8004dce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004e18 <HAL_RCC_OscConfig+0x508>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e18 <HAL_RCC_OscConfig+0x508>)
 8004da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004da6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004da8:	f7fd fc8e 	bl	80026c8 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db0:	f7fd fc8a 	bl	80026c8 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e1b8      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc2:	4b15      	ldr	r3, [pc, #84]	@ (8004e18 <HAL_RCC_OscConfig+0x508>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0f0      	beq.n	8004db0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d108      	bne.n	8004de8 <HAL_RCC_OscConfig+0x4d8>
 8004dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004de6:	e029      	b.n	8004e3c <HAL_RCC_OscConfig+0x52c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b05      	cmp	r3, #5
 8004dee:	d115      	bne.n	8004e1c <HAL_RCC_OscConfig+0x50c>
 8004df0:	4b08      	ldr	r3, [pc, #32]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df6:	4a07      	ldr	r2, [pc, #28]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004df8:	f043 0304 	orr.w	r3, r3, #4
 8004dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e00:	4b04      	ldr	r3, [pc, #16]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e06:	4a03      	ldr	r2, [pc, #12]	@ (8004e14 <HAL_RCC_OscConfig+0x504>)
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e10:	e014      	b.n	8004e3c <HAL_RCC_OscConfig+0x52c>
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000
 8004e18:	40007000 	.word	0x40007000
 8004e1c:	4b9d      	ldr	r3, [pc, #628]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e22:	4a9c      	ldr	r2, [pc, #624]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e2c:	4b99      	ldr	r3, [pc, #612]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e32:	4a98      	ldr	r2, [pc, #608]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004e34:	f023 0304 	bic.w	r3, r3, #4
 8004e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d016      	beq.n	8004e72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e44:	f7fd fc40 	bl	80026c8 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e4a:	e00a      	b.n	8004e62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4c:	f7fd fc3c 	bl	80026c8 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e168      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e62:	4b8c      	ldr	r3, [pc, #560]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0ed      	beq.n	8004e4c <HAL_RCC_OscConfig+0x53c>
 8004e70:	e015      	b.n	8004e9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e72:	f7fd fc29 	bl	80026c8 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e78:	e00a      	b.n	8004e90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7a:	f7fd fc25 	bl	80026c8 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e151      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e90:	4b80      	ldr	r3, [pc, #512]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1ed      	bne.n	8004e7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d105      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea4:	4b7b      	ldr	r3, [pc, #492]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea8:	4a7a      	ldr	r2, [pc, #488]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d03c      	beq.n	8004f36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01c      	beq.n	8004efe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ec4:	4b73      	ldr	r3, [pc, #460]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eca:	4a72      	ldr	r2, [pc, #456]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed4:	f7fd fbf8 	bl	80026c8 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004edc:	f7fd fbf4 	bl	80026c8 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e122      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004eee:	4b69      	ldr	r3, [pc, #420]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0ef      	beq.n	8004edc <HAL_RCC_OscConfig+0x5cc>
 8004efc:	e01b      	b.n	8004f36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004efe:	4b65      	ldr	r3, [pc, #404]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f04:	4a63      	ldr	r2, [pc, #396]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0e:	f7fd fbdb 	bl	80026c8 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f16:	f7fd fbd7 	bl	80026c8 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e105      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f28:	4b5a      	ldr	r3, [pc, #360]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1ef      	bne.n	8004f16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80f9 	beq.w	8005132 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	f040 80cf 	bne.w	80050e8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f4a:	4b52      	ldr	r3, [pc, #328]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f003 0203 	and.w	r2, r3, #3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d12c      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d123      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d113      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d109      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d071      	beq.n	800509c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	2b0c      	cmp	r3, #12
 8004fbc:	d068      	beq.n	8005090 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fbe:	4b35      	ldr	r3, [pc, #212]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d105      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004fca:	4b32      	ldr	r3, [pc, #200]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e0ac      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fda:	4b2e      	ldr	r3, [pc, #184]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a2d      	ldr	r2, [pc, #180]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8004fe0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fe4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fe6:	f7fd fb6f 	bl	80026c8 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fec:	e008      	b.n	8005000 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fee:	f7fd fb6b 	bl	80026c8 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e099      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005000:	4b24      	ldr	r3, [pc, #144]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f0      	bne.n	8004fee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800500c:	4b21      	ldr	r3, [pc, #132]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	4b21      	ldr	r3, [pc, #132]	@ (8005098 <HAL_RCC_OscConfig+0x788>)
 8005012:	4013      	ands	r3, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800501c:	3a01      	subs	r2, #1
 800501e:	0112      	lsls	r2, r2, #4
 8005020:	4311      	orrs	r1, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005026:	0212      	lsls	r2, r2, #8
 8005028:	4311      	orrs	r1, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800502e:	0852      	lsrs	r2, r2, #1
 8005030:	3a01      	subs	r2, #1
 8005032:	0552      	lsls	r2, r2, #21
 8005034:	4311      	orrs	r1, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800503a:	0852      	lsrs	r2, r2, #1
 800503c:	3a01      	subs	r2, #1
 800503e:	0652      	lsls	r2, r2, #25
 8005040:	4311      	orrs	r1, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005046:	06d2      	lsls	r2, r2, #27
 8005048:	430a      	orrs	r2, r1
 800504a:	4912      	ldr	r1, [pc, #72]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 800504c:	4313      	orrs	r3, r2
 800504e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005050:	4b10      	ldr	r3, [pc, #64]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a0f      	ldr	r2, [pc, #60]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8005056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800505a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800505c:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4a0c      	ldr	r2, [pc, #48]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8005062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005066:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005068:	f7fd fb2e 	bl	80026c8 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005070:	f7fd fb2a 	bl	80026c8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e058      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005082:	4b04      	ldr	r3, [pc, #16]	@ (8005094 <HAL_RCC_OscConfig+0x784>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800508e:	e050      	b.n	8005132 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e04f      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
 8005094:	40021000 	.word	0x40021000
 8005098:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800509c:	4b27      	ldr	r3, [pc, #156]	@ (800513c <HAL_RCC_OscConfig+0x82c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d144      	bne.n	8005132 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050a8:	4b24      	ldr	r3, [pc, #144]	@ (800513c <HAL_RCC_OscConfig+0x82c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a23      	ldr	r2, [pc, #140]	@ (800513c <HAL_RCC_OscConfig+0x82c>)
 80050ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050b4:	4b21      	ldr	r3, [pc, #132]	@ (800513c <HAL_RCC_OscConfig+0x82c>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	4a20      	ldr	r2, [pc, #128]	@ (800513c <HAL_RCC_OscConfig+0x82c>)
 80050ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050c0:	f7fd fb02 	bl	80026c8 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fd fafe 	bl	80026c8 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e02c      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050da:	4b18      	ldr	r3, [pc, #96]	@ (800513c <HAL_RCC_OscConfig+0x82c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0x7b8>
 80050e6:	e024      	b.n	8005132 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	2b0c      	cmp	r3, #12
 80050ec:	d01f      	beq.n	800512e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ee:	4b13      	ldr	r3, [pc, #76]	@ (800513c <HAL_RCC_OscConfig+0x82c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a12      	ldr	r2, [pc, #72]	@ (800513c <HAL_RCC_OscConfig+0x82c>)
 80050f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fd fae5 	bl	80026c8 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005102:	f7fd fae1 	bl	80026c8 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e00f      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005114:	4b09      	ldr	r3, [pc, #36]	@ (800513c <HAL_RCC_OscConfig+0x82c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f0      	bne.n	8005102 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005120:	4b06      	ldr	r3, [pc, #24]	@ (800513c <HAL_RCC_OscConfig+0x82c>)
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	4905      	ldr	r1, [pc, #20]	@ (800513c <HAL_RCC_OscConfig+0x82c>)
 8005126:	4b06      	ldr	r3, [pc, #24]	@ (8005140 <HAL_RCC_OscConfig+0x830>)
 8005128:	4013      	ands	r3, r2
 800512a:	60cb      	str	r3, [r1, #12]
 800512c:	e001      	b.n	8005132 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3720      	adds	r7, #32
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40021000 	.word	0x40021000
 8005140:	feeefffc 	.word	0xfeeefffc

08005144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e11d      	b.n	8005398 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800515c:	4b90      	ldr	r3, [pc, #576]	@ (80053a0 <HAL_RCC_ClockConfig+0x25c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 030f 	and.w	r3, r3, #15
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d910      	bls.n	800518c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516a:	4b8d      	ldr	r3, [pc, #564]	@ (80053a0 <HAL_RCC_ClockConfig+0x25c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 020f 	bic.w	r2, r3, #15
 8005172:	498b      	ldr	r1, [pc, #556]	@ (80053a0 <HAL_RCC_ClockConfig+0x25c>)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	4313      	orrs	r3, r2
 8005178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800517a:	4b89      	ldr	r3, [pc, #548]	@ (80053a0 <HAL_RCC_ClockConfig+0x25c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d001      	beq.n	800518c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e105      	b.n	8005398 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d010      	beq.n	80051ba <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	4b81      	ldr	r3, [pc, #516]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d908      	bls.n	80051ba <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a8:	4b7e      	ldr	r3, [pc, #504]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	497b      	ldr	r1, [pc, #492]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d079      	beq.n	80052ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d11e      	bne.n	800520c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ce:	4b75      	ldr	r3, [pc, #468]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e0dc      	b.n	8005398 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80051de:	f000 fa09 	bl	80055f4 <RCC_GetSysClockFreqFromPLLSource>
 80051e2:	4603      	mov	r3, r0
 80051e4:	4a70      	ldr	r2, [pc, #448]	@ (80053a8 <HAL_RCC_ClockConfig+0x264>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d946      	bls.n	8005278 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80051ea:	4b6e      	ldr	r3, [pc, #440]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d140      	bne.n	8005278 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051f6:	4b6b      	ldr	r3, [pc, #428]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051fe:	4a69      	ldr	r2, [pc, #420]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 8005200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005204:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005206:	2380      	movs	r3, #128	@ 0x80
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	e035      	b.n	8005278 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d107      	bne.n	8005224 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005214:	4b63      	ldr	r3, [pc, #396]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d115      	bne.n	800524c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e0b9      	b.n	8005398 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d107      	bne.n	800523c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800522c:	4b5d      	ldr	r3, [pc, #372]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d109      	bne.n	800524c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e0ad      	b.n	8005398 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800523c:	4b59      	ldr	r3, [pc, #356]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0a5      	b.n	8005398 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800524c:	f000 f8b4 	bl	80053b8 <HAL_RCC_GetSysClockFreq>
 8005250:	4603      	mov	r3, r0
 8005252:	4a55      	ldr	r2, [pc, #340]	@ (80053a8 <HAL_RCC_ClockConfig+0x264>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d90f      	bls.n	8005278 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005258:	4b52      	ldr	r3, [pc, #328]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005264:	4b4f      	ldr	r3, [pc, #316]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800526c:	4a4d      	ldr	r2, [pc, #308]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 800526e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005272:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005274:	2380      	movs	r3, #128	@ 0x80
 8005276:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005278:	4b4a      	ldr	r3, [pc, #296]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f023 0203 	bic.w	r2, r3, #3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4947      	ldr	r1, [pc, #284]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 8005286:	4313      	orrs	r3, r2
 8005288:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800528a:	f7fd fa1d 	bl	80026c8 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005290:	e00a      	b.n	80052a8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005292:	f7fd fa19 	bl	80026c8 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e077      	b.n	8005398 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a8:	4b3e      	ldr	r3, [pc, #248]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 020c 	and.w	r2, r3, #12
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d1eb      	bne.n	8005292 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b80      	cmp	r3, #128	@ 0x80
 80052be:	d105      	bne.n	80052cc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80052c0:	4b38      	ldr	r3, [pc, #224]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4a37      	ldr	r2, [pc, #220]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 80052c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052ca:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d010      	beq.n	80052fa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	4b31      	ldr	r3, [pc, #196]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d208      	bcs.n	80052fa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e8:	4b2e      	ldr	r3, [pc, #184]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	492b      	ldr	r1, [pc, #172]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052fa:	4b29      	ldr	r3, [pc, #164]	@ (80053a0 <HAL_RCC_ClockConfig+0x25c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d210      	bcs.n	800532a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005308:	4b25      	ldr	r3, [pc, #148]	@ (80053a0 <HAL_RCC_ClockConfig+0x25c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f023 020f 	bic.w	r2, r3, #15
 8005310:	4923      	ldr	r1, [pc, #140]	@ (80053a0 <HAL_RCC_ClockConfig+0x25c>)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	4313      	orrs	r3, r2
 8005316:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005318:	4b21      	ldr	r3, [pc, #132]	@ (80053a0 <HAL_RCC_ClockConfig+0x25c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d001      	beq.n	800532a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e036      	b.n	8005398 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	d008      	beq.n	8005348 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005336:	4b1b      	ldr	r3, [pc, #108]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	4918      	ldr	r1, [pc, #96]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 8005344:	4313      	orrs	r3, r2
 8005346:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005354:	4b13      	ldr	r3, [pc, #76]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	4910      	ldr	r1, [pc, #64]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 8005364:	4313      	orrs	r3, r2
 8005366:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005368:	f000 f826 	bl	80053b8 <HAL_RCC_GetSysClockFreq>
 800536c:	4602      	mov	r2, r0
 800536e:	4b0d      	ldr	r3, [pc, #52]	@ (80053a4 <HAL_RCC_ClockConfig+0x260>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	091b      	lsrs	r3, r3, #4
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	490c      	ldr	r1, [pc, #48]	@ (80053ac <HAL_RCC_ClockConfig+0x268>)
 800537a:	5ccb      	ldrb	r3, [r1, r3]
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	fa22 f303 	lsr.w	r3, r2, r3
 8005384:	4a0a      	ldr	r2, [pc, #40]	@ (80053b0 <HAL_RCC_ClockConfig+0x26c>)
 8005386:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005388:	4b0a      	ldr	r3, [pc, #40]	@ (80053b4 <HAL_RCC_ClockConfig+0x270>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f7fd f94b 	bl	8002628 <HAL_InitTick>
 8005392:	4603      	mov	r3, r0
 8005394:	73fb      	strb	r3, [r7, #15]

  return status;
 8005396:	7bfb      	ldrb	r3, [r7, #15]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40022000 	.word	0x40022000
 80053a4:	40021000 	.word	0x40021000
 80053a8:	04c4b400 	.word	0x04c4b400
 80053ac:	0800a314 	.word	0x0800a314
 80053b0:	2000003c 	.word	0x2000003c
 80053b4:	200000a8 	.word	0x200000a8

080053b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b089      	sub	sp, #36	@ 0x24
 80053bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	2300      	movs	r3, #0
 80053c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053c6:	4b3e      	ldr	r3, [pc, #248]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053d0:	4b3b      	ldr	r3, [pc, #236]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0x34>
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2b0c      	cmp	r3, #12
 80053e4:	d121      	bne.n	800542a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d11e      	bne.n	800542a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053ec:	4b34      	ldr	r3, [pc, #208]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d107      	bne.n	8005408 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053f8:	4b31      	ldr	r3, [pc, #196]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053fe:	0a1b      	lsrs	r3, r3, #8
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	e005      	b.n	8005414 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005408:	4b2d      	ldr	r3, [pc, #180]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	091b      	lsrs	r3, r3, #4
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005414:	4a2b      	ldr	r2, [pc, #172]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10d      	bne.n	8005440 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005428:	e00a      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b04      	cmp	r3, #4
 800542e:	d102      	bne.n	8005436 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005430:	4b25      	ldr	r3, [pc, #148]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	e004      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b08      	cmp	r3, #8
 800543a:	d101      	bne.n	8005440 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800543c:	4b23      	ldr	r3, [pc, #140]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x114>)
 800543e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b0c      	cmp	r3, #12
 8005444:	d134      	bne.n	80054b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005446:	4b1e      	ldr	r3, [pc, #120]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d003      	beq.n	800545e <HAL_RCC_GetSysClockFreq+0xa6>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b03      	cmp	r3, #3
 800545a:	d003      	beq.n	8005464 <HAL_RCC_GetSysClockFreq+0xac>
 800545c:	e005      	b.n	800546a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800545e:	4b1a      	ldr	r3, [pc, #104]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005460:	617b      	str	r3, [r7, #20]
      break;
 8005462:	e005      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005464:	4b19      	ldr	r3, [pc, #100]	@ (80054cc <HAL_RCC_GetSysClockFreq+0x114>)
 8005466:	617b      	str	r3, [r7, #20]
      break;
 8005468:	e002      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	617b      	str	r3, [r7, #20]
      break;
 800546e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005470:	4b13      	ldr	r3, [pc, #76]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	091b      	lsrs	r3, r3, #4
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	3301      	adds	r3, #1
 800547c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800547e:	4b10      	ldr	r3, [pc, #64]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	fb03 f202 	mul.w	r2, r3, r2
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	fbb2 f3f3 	udiv	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005496:	4b0a      	ldr	r3, [pc, #40]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	0e5b      	lsrs	r3, r3, #25
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	3301      	adds	r3, #1
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80054b0:	69bb      	ldr	r3, [r7, #24]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3724      	adds	r7, #36	@ 0x24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40021000 	.word	0x40021000
 80054c4:	0800a32c 	.word	0x0800a32c
 80054c8:	00f42400 	.word	0x00f42400
 80054cc:	007a1200 	.word	0x007a1200

080054d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d4:	4b03      	ldr	r3, [pc, #12]	@ (80054e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054d6:	681b      	ldr	r3, [r3, #0]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	2000003c 	.word	0x2000003c

080054e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054ec:	f7ff fff0 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4b06      	ldr	r3, [pc, #24]	@ (800550c <HAL_RCC_GetPCLK1Freq+0x24>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	0a1b      	lsrs	r3, r3, #8
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	4904      	ldr	r1, [pc, #16]	@ (8005510 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054fe:	5ccb      	ldrb	r3, [r1, r3]
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40021000 	.word	0x40021000
 8005510:	0800a324 	.word	0x0800a324

08005514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005518:	f7ff ffda 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
 800551c:	4602      	mov	r2, r0
 800551e:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	0adb      	lsrs	r3, r3, #11
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	4904      	ldr	r1, [pc, #16]	@ (800553c <HAL_RCC_GetPCLK2Freq+0x28>)
 800552a:	5ccb      	ldrb	r3, [r1, r3]
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005534:	4618      	mov	r0, r3
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40021000 	.word	0x40021000
 800553c:	0800a324 	.word	0x0800a324

08005540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800554c:	4b27      	ldr	r3, [pc, #156]	@ (80055ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800554e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005558:	f7ff f916 	bl	8004788 <HAL_PWREx_GetVoltageRange>
 800555c:	6178      	str	r0, [r7, #20]
 800555e:	e014      	b.n	800558a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005560:	4b22      	ldr	r3, [pc, #136]	@ (80055ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005564:	4a21      	ldr	r2, [pc, #132]	@ (80055ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800556a:	6593      	str	r3, [r2, #88]	@ 0x58
 800556c:	4b1f      	ldr	r3, [pc, #124]	@ (80055ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800556e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005578:	f7ff f906 	bl	8004788 <HAL_PWREx_GetVoltageRange>
 800557c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800557e:	4b1b      	ldr	r3, [pc, #108]	@ (80055ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005582:	4a1a      	ldr	r2, [pc, #104]	@ (80055ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005588:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005590:	d10b      	bne.n	80055aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b80      	cmp	r3, #128	@ 0x80
 8005596:	d913      	bls.n	80055c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2ba0      	cmp	r3, #160	@ 0xa0
 800559c:	d902      	bls.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800559e:	2302      	movs	r3, #2
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	e00d      	b.n	80055c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055a4:	2301      	movs	r3, #1
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	e00a      	b.n	80055c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80055ae:	d902      	bls.n	80055b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80055b0:	2302      	movs	r3, #2
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	e004      	b.n	80055c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b70      	cmp	r3, #112	@ 0x70
 80055ba:	d101      	bne.n	80055c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055bc:	2301      	movs	r3, #1
 80055be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055c0:	4b0b      	ldr	r3, [pc, #44]	@ (80055f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f023 020f 	bic.w	r2, r3, #15
 80055c8:	4909      	ldr	r1, [pc, #36]	@ (80055f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80055d0:	4b07      	ldr	r3, [pc, #28]	@ (80055f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d001      	beq.n	80055e2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40021000 	.word	0x40021000
 80055f0:	40022000 	.word	0x40022000

080055f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055fa:	4b2d      	ldr	r3, [pc, #180]	@ (80056b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b03      	cmp	r3, #3
 8005608:	d00b      	beq.n	8005622 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d825      	bhi.n	800565c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d008      	beq.n	8005628 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b02      	cmp	r3, #2
 800561a:	d11f      	bne.n	800565c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800561c:	4b25      	ldr	r3, [pc, #148]	@ (80056b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800561e:	613b      	str	r3, [r7, #16]
    break;
 8005620:	e01f      	b.n	8005662 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005622:	4b25      	ldr	r3, [pc, #148]	@ (80056b8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005624:	613b      	str	r3, [r7, #16]
    break;
 8005626:	e01c      	b.n	8005662 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005628:	4b21      	ldr	r3, [pc, #132]	@ (80056b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d107      	bne.n	8005644 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005634:	4b1e      	ldr	r3, [pc, #120]	@ (80056b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	e005      	b.n	8005650 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005644:	4b1a      	ldr	r3, [pc, #104]	@ (80056b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005650:	4a1a      	ldr	r2, [pc, #104]	@ (80056bc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005658:	613b      	str	r3, [r7, #16]
    break;
 800565a:	e002      	b.n	8005662 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	613b      	str	r3, [r7, #16]
    break;
 8005660:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005662:	4b13      	ldr	r3, [pc, #76]	@ (80056b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	3301      	adds	r3, #1
 800566e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005670:	4b0f      	ldr	r3, [pc, #60]	@ (80056b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	0a1b      	lsrs	r3, r3, #8
 8005676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	fb03 f202 	mul.w	r2, r3, r2
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	fbb2 f3f3 	udiv	r3, r2, r3
 8005686:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005688:	4b09      	ldr	r3, [pc, #36]	@ (80056b0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	0e5b      	lsrs	r3, r3, #25
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	3301      	adds	r3, #1
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80056a2:	683b      	ldr	r3, [r7, #0]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	40021000 	.word	0x40021000
 80056b4:	00f42400 	.word	0x00f42400
 80056b8:	007a1200 	.word	0x007a1200
 80056bc:	0800a32c 	.word	0x0800a32c

080056c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056c8:	2300      	movs	r3, #0
 80056ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056cc:	2300      	movs	r3, #0
 80056ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d040      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056e0:	2b80      	cmp	r3, #128	@ 0x80
 80056e2:	d02a      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80056e4:	2b80      	cmp	r3, #128	@ 0x80
 80056e6:	d825      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80056e8:	2b60      	cmp	r3, #96	@ 0x60
 80056ea:	d026      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80056ec:	2b60      	cmp	r3, #96	@ 0x60
 80056ee:	d821      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80056f0:	2b40      	cmp	r3, #64	@ 0x40
 80056f2:	d006      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80056f4:	2b40      	cmp	r3, #64	@ 0x40
 80056f6:	d81d      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d009      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d010      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005700:	e018      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005702:	4b89      	ldr	r3, [pc, #548]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	4a88      	ldr	r2, [pc, #544]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800570c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800570e:	e015      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	2100      	movs	r1, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fb02 	bl	8005d20 <RCCEx_PLLSAI1_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005720:	e00c      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3320      	adds	r3, #32
 8005726:	2100      	movs	r1, #0
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fbed 	bl	8005f08 <RCCEx_PLLSAI2_Config>
 800572e:	4603      	mov	r3, r0
 8005730:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005732:	e003      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	74fb      	strb	r3, [r7, #19]
      break;
 8005738:	e000      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800573a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800573c:	7cfb      	ldrb	r3, [r7, #19]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10b      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005742:	4b79      	ldr	r3, [pc, #484]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005744:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005748:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005750:	4975      	ldr	r1, [pc, #468]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005758:	e001      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575a:	7cfb      	ldrb	r3, [r7, #19]
 800575c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d047      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005772:	d030      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005778:	d82a      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800577a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800577e:	d02a      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005780:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005784:	d824      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005786:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800578a:	d008      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800578c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005790:	d81e      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800579a:	d010      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800579c:	e018      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800579e:	4b62      	ldr	r3, [pc, #392]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	4a61      	ldr	r2, [pc, #388]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057a8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057aa:	e015      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fab4 	bl	8005d20 <RCCEx_PLLSAI1_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057bc:	e00c      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3320      	adds	r3, #32
 80057c2:	2100      	movs	r1, #0
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fb9f 	bl	8005f08 <RCCEx_PLLSAI2_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057ce:	e003      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	74fb      	strb	r3, [r7, #19]
      break;
 80057d4:	e000      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80057d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057d8:	7cfb      	ldrb	r3, [r7, #19]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10b      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057de:	4b52      	ldr	r3, [pc, #328]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ec:	494e      	ldr	r1, [pc, #312]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80057f4:	e001      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f6:	7cfb      	ldrb	r3, [r7, #19]
 80057f8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 809f 	beq.w	8005946 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005808:	2300      	movs	r3, #0
 800580a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800580c:	4b46      	ldr	r3, [pc, #280]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800580e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800581c:	2300      	movs	r3, #0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00d      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005822:	4b41      	ldr	r3, [pc, #260]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005826:	4a40      	ldr	r2, [pc, #256]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800582c:	6593      	str	r3, [r2, #88]	@ 0x58
 800582e:	4b3e      	ldr	r3, [pc, #248]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800583a:	2301      	movs	r3, #1
 800583c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800583e:	4b3b      	ldr	r3, [pc, #236]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a3a      	ldr	r2, [pc, #232]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005848:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800584a:	f7fc ff3d 	bl	80026c8 <HAL_GetTick>
 800584e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005850:	e009      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005852:	f7fc ff39 	bl	80026c8 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d902      	bls.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	74fb      	strb	r3, [r7, #19]
        break;
 8005864:	e005      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005866:	4b31      	ldr	r3, [pc, #196]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0ef      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005872:	7cfb      	ldrb	r3, [r7, #19]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d15b      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005878:	4b2b      	ldr	r3, [pc, #172]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005882:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01f      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	429a      	cmp	r2, r3
 8005894:	d019      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005896:	4b24      	ldr	r3, [pc, #144]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058a2:	4b21      	ldr	r3, [pc, #132]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058c2:	4a19      	ldr	r2, [pc, #100]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d016      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d4:	f7fc fef8 	bl	80026c8 <HAL_GetTick>
 80058d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058da:	e00b      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058dc:	f7fc fef4 	bl	80026c8 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d902      	bls.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	74fb      	strb	r3, [r7, #19]
            break;
 80058f2:	e006      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0ec      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005902:	7cfb      	ldrb	r3, [r7, #19]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10c      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005908:	4b07      	ldr	r3, [pc, #28]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800590a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800590e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005918:	4903      	ldr	r1, [pc, #12]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005920:	e008      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005922:	7cfb      	ldrb	r3, [r7, #19]
 8005924:	74bb      	strb	r3, [r7, #18]
 8005926:	e005      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005928:	40021000 	.word	0x40021000
 800592c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005930:	7cfb      	ldrb	r3, [r7, #19]
 8005932:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005934:	7c7b      	ldrb	r3, [r7, #17]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d105      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800593a:	4ba0      	ldr	r3, [pc, #640]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800593c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800593e:	4a9f      	ldr	r2, [pc, #636]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005940:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005944:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005952:	4b9a      	ldr	r3, [pc, #616]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005958:	f023 0203 	bic.w	r2, r3, #3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005960:	4996      	ldr	r1, [pc, #600]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005974:	4b91      	ldr	r3, [pc, #580]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597a:	f023 020c 	bic.w	r2, r3, #12
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005982:	498e      	ldr	r1, [pc, #568]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005984:	4313      	orrs	r3, r2
 8005986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005996:	4b89      	ldr	r3, [pc, #548]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800599c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a4:	4985      	ldr	r1, [pc, #532]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059b8:	4b80      	ldr	r3, [pc, #512]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059c6:	497d      	ldr	r1, [pc, #500]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0310 	and.w	r3, r3, #16
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059da:	4b78      	ldr	r3, [pc, #480]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e8:	4974      	ldr	r1, [pc, #464]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059fc:	4b6f      	ldr	r3, [pc, #444]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a0a:	496c      	ldr	r1, [pc, #432]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a1e:	4b67      	ldr	r3, [pc, #412]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a2c:	4963      	ldr	r1, [pc, #396]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a40:	4b5e      	ldr	r3, [pc, #376]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a4e:	495b      	ldr	r1, [pc, #364]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a62:	4b56      	ldr	r3, [pc, #344]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a68:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a70:	4952      	ldr	r1, [pc, #328]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a84:	4b4d      	ldr	r3, [pc, #308]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a92:	494a      	ldr	r1, [pc, #296]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005aa6:	4b45      	ldr	r3, [pc, #276]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab4:	4941      	ldr	r1, [pc, #260]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ac8:	4b3c      	ldr	r3, [pc, #240]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ace:	f023 0203 	bic.w	r2, r3, #3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ad6:	4939      	ldr	r1, [pc, #228]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d028      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aea:	4b34      	ldr	r3, [pc, #208]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af8:	4930      	ldr	r1, [pc, #192]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b08:	d106      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	4a2b      	ldr	r2, [pc, #172]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b14:	60d3      	str	r3, [r2, #12]
 8005b16:	e011      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b20:	d10c      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	2101      	movs	r1, #1
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 f8f9 	bl	8005d20 <RCCEx_PLLSAI1_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b32:	7cfb      	ldrb	r3, [r7, #19]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005b38:	7cfb      	ldrb	r3, [r7, #19]
 8005b3a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d04d      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b50:	d108      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005b52:	4b1a      	ldr	r3, [pc, #104]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b58:	4a18      	ldr	r2, [pc, #96]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b5e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005b62:	e012      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005b64:	4b15      	ldr	r3, [pc, #84]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b6a:	4a14      	ldr	r2, [pc, #80]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b70:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005b74:	4b11      	ldr	r3, [pc, #68]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b82:	490e      	ldr	r1, [pc, #56]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b92:	d106      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b94:	4b09      	ldr	r3, [pc, #36]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	4a08      	ldr	r2, [pc, #32]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b9e:	60d3      	str	r3, [r2, #12]
 8005ba0:	e020      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ba6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005baa:	d109      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005bac:	4b03      	ldr	r3, [pc, #12]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	4a02      	ldr	r2, [pc, #8]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bb6:	60d3      	str	r3, [r2, #12]
 8005bb8:	e014      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005bba:	bf00      	nop
 8005bbc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bc8:	d10c      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	2101      	movs	r1, #1
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 f8a5 	bl	8005d20 <RCCEx_PLLSAI1_Config>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bda:	7cfb      	ldrb	r3, [r7, #19]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005be0:	7cfb      	ldrb	r3, [r7, #19]
 8005be2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d028      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bfe:	4947      	ldr	r1, [pc, #284]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c0e:	d106      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c10:	4b42      	ldr	r3, [pc, #264]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	4a41      	ldr	r2, [pc, #260]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c1a:	60d3      	str	r3, [r2, #12]
 8005c1c:	e011      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c26:	d10c      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 f876 	bl	8005d20 <RCCEx_PLLSAI1_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c38:	7cfb      	ldrb	r3, [r7, #19]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005c3e:	7cfb      	ldrb	r3, [r7, #19]
 8005c40:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01e      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c4e:	4b33      	ldr	r3, [pc, #204]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c54:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c5e:	492f      	ldr	r1, [pc, #188]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c70:	d10c      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3304      	adds	r3, #4
 8005c76:	2102      	movs	r1, #2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 f851 	bl	8005d20 <RCCEx_PLLSAI1_Config>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c82:	7cfb      	ldrb	r3, [r7, #19]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005c88:	7cfb      	ldrb	r3, [r7, #19]
 8005c8a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00b      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c98:	4b20      	ldr	r3, [pc, #128]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c9e:	f023 0204 	bic.w	r2, r3, #4
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ca8:	491c      	ldr	r1, [pc, #112]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005cbc:	4b17      	ldr	r3, [pc, #92]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cc2:	f023 0218 	bic.w	r2, r3, #24
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ccc:	4913      	ldr	r1, [pc, #76]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d017      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ce6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cf0:	490a      	ldr	r1, [pc, #40]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d02:	d105      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d04:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	4a04      	ldr	r2, [pc, #16]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d10:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	40021000 	.word	0x40021000

08005d20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d2e:	4b72      	ldr	r3, [pc, #456]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00e      	beq.n	8005d58 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0203 	and.w	r2, r3, #3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d103      	bne.n	8005d52 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d142      	bne.n	8005dd8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	73fb      	strb	r3, [r7, #15]
 8005d56:	e03f      	b.n	8005dd8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d018      	beq.n	8005d92 <RCCEx_PLLSAI1_Config+0x72>
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d825      	bhi.n	8005db0 <RCCEx_PLLSAI1_Config+0x90>
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d002      	beq.n	8005d6e <RCCEx_PLLSAI1_Config+0x4e>
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d009      	beq.n	8005d80 <RCCEx_PLLSAI1_Config+0x60>
 8005d6c:	e020      	b.n	8005db0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d6e:	4b62      	ldr	r3, [pc, #392]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d11d      	bne.n	8005db6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d7e:	e01a      	b.n	8005db6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d80:	4b5d      	ldr	r3, [pc, #372]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d116      	bne.n	8005dba <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d90:	e013      	b.n	8005dba <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d92:	4b59      	ldr	r3, [pc, #356]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10f      	bne.n	8005dbe <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d9e:	4b56      	ldr	r3, [pc, #344]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dae:	e006      	b.n	8005dbe <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
      break;
 8005db4:	e004      	b.n	8005dc0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005dbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d108      	bne.n	8005dd8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005dc6:	4b4c      	ldr	r3, [pc, #304]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f023 0203 	bic.w	r2, r3, #3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4949      	ldr	r1, [pc, #292]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f040 8086 	bne.w	8005eec <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005de0:	4b45      	ldr	r3, [pc, #276]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a44      	ldr	r2, [pc, #272]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005de6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dec:	f7fc fc6c 	bl	80026c8 <HAL_GetTick>
 8005df0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005df2:	e009      	b.n	8005e08 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005df4:	f7fc fc68 	bl	80026c8 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d902      	bls.n	8005e08 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	73fb      	strb	r3, [r7, #15]
        break;
 8005e06:	e005      	b.n	8005e14 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e08:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1ef      	bne.n	8005df4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d168      	bne.n	8005eec <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d113      	bne.n	8005e48 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e20:	4b35      	ldr	r3, [pc, #212]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	4b35      	ldr	r3, [pc, #212]	@ (8005efc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e26:	4013      	ands	r3, r2
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6892      	ldr	r2, [r2, #8]
 8005e2c:	0211      	lsls	r1, r2, #8
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	68d2      	ldr	r2, [r2, #12]
 8005e32:	06d2      	lsls	r2, r2, #27
 8005e34:	4311      	orrs	r1, r2
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6852      	ldr	r2, [r2, #4]
 8005e3a:	3a01      	subs	r2, #1
 8005e3c:	0112      	lsls	r2, r2, #4
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	492d      	ldr	r1, [pc, #180]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	610b      	str	r3, [r1, #16]
 8005e46:	e02d      	b.n	8005ea4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d115      	bne.n	8005e7a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	4b2b      	ldr	r3, [pc, #172]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6892      	ldr	r2, [r2, #8]
 8005e5a:	0211      	lsls	r1, r2, #8
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6912      	ldr	r2, [r2, #16]
 8005e60:	0852      	lsrs	r2, r2, #1
 8005e62:	3a01      	subs	r2, #1
 8005e64:	0552      	lsls	r2, r2, #21
 8005e66:	4311      	orrs	r1, r2
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6852      	ldr	r2, [r2, #4]
 8005e6c:	3a01      	subs	r2, #1
 8005e6e:	0112      	lsls	r2, r2, #4
 8005e70:	430a      	orrs	r2, r1
 8005e72:	4921      	ldr	r1, [pc, #132]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	610b      	str	r3, [r1, #16]
 8005e78:	e014      	b.n	8005ea4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	4b21      	ldr	r3, [pc, #132]	@ (8005f04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6892      	ldr	r2, [r2, #8]
 8005e86:	0211      	lsls	r1, r2, #8
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6952      	ldr	r2, [r2, #20]
 8005e8c:	0852      	lsrs	r2, r2, #1
 8005e8e:	3a01      	subs	r2, #1
 8005e90:	0652      	lsls	r2, r2, #25
 8005e92:	4311      	orrs	r1, r2
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6852      	ldr	r2, [r2, #4]
 8005e98:	3a01      	subs	r2, #1
 8005e9a:	0112      	lsls	r2, r2, #4
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	4916      	ldr	r1, [pc, #88]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ea4:	4b14      	ldr	r3, [pc, #80]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a13      	ldr	r2, [pc, #76]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eaa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005eae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb0:	f7fc fc0a 	bl	80026c8 <HAL_GetTick>
 8005eb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005eb6:	e009      	b.n	8005ecc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eb8:	f7fc fc06 	bl	80026c8 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d902      	bls.n	8005ecc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	73fb      	strb	r3, [r7, #15]
          break;
 8005eca:	e005      	b.n	8005ed8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0ef      	beq.n	8005eb8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ede:	4b06      	ldr	r3, [pc, #24]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	4904      	ldr	r1, [pc, #16]	@ (8005ef8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	07ff800f 	.word	0x07ff800f
 8005f00:	ff9f800f 	.word	0xff9f800f
 8005f04:	f9ff800f 	.word	0xf9ff800f

08005f08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f16:	4b72      	ldr	r3, [pc, #456]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00e      	beq.n	8005f40 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f22:	4b6f      	ldr	r3, [pc, #444]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f003 0203 	and.w	r2, r3, #3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d103      	bne.n	8005f3a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
       ||
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d142      	bne.n	8005fc0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
 8005f3e:	e03f      	b.n	8005fc0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d018      	beq.n	8005f7a <RCCEx_PLLSAI2_Config+0x72>
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d825      	bhi.n	8005f98 <RCCEx_PLLSAI2_Config+0x90>
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d002      	beq.n	8005f56 <RCCEx_PLLSAI2_Config+0x4e>
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d009      	beq.n	8005f68 <RCCEx_PLLSAI2_Config+0x60>
 8005f54:	e020      	b.n	8005f98 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f56:	4b62      	ldr	r3, [pc, #392]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d11d      	bne.n	8005f9e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f66:	e01a      	b.n	8005f9e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f68:	4b5d      	ldr	r3, [pc, #372]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d116      	bne.n	8005fa2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f78:	e013      	b.n	8005fa2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f7a:	4b59      	ldr	r3, [pc, #356]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10f      	bne.n	8005fa6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f86:	4b56      	ldr	r3, [pc, #344]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f96:	e006      	b.n	8005fa6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f9c:	e004      	b.n	8005fa8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f9e:	bf00      	nop
 8005fa0:	e002      	b.n	8005fa8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005fa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d108      	bne.n	8005fc0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005fae:	4b4c      	ldr	r3, [pc, #304]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f023 0203 	bic.w	r2, r3, #3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4949      	ldr	r1, [pc, #292]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f040 8086 	bne.w	80060d4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005fc8:	4b45      	ldr	r3, [pc, #276]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a44      	ldr	r2, [pc, #272]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd4:	f7fc fb78 	bl	80026c8 <HAL_GetTick>
 8005fd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fda:	e009      	b.n	8005ff0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fdc:	f7fc fb74 	bl	80026c8 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d902      	bls.n	8005ff0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	73fb      	strb	r3, [r7, #15]
        break;
 8005fee:	e005      	b.n	8005ffc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1ef      	bne.n	8005fdc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d168      	bne.n	80060d4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d113      	bne.n	8006030 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006008:	4b35      	ldr	r3, [pc, #212]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800600a:	695a      	ldr	r2, [r3, #20]
 800600c:	4b35      	ldr	r3, [pc, #212]	@ (80060e4 <RCCEx_PLLSAI2_Config+0x1dc>)
 800600e:	4013      	ands	r3, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6892      	ldr	r2, [r2, #8]
 8006014:	0211      	lsls	r1, r2, #8
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	68d2      	ldr	r2, [r2, #12]
 800601a:	06d2      	lsls	r2, r2, #27
 800601c:	4311      	orrs	r1, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6852      	ldr	r2, [r2, #4]
 8006022:	3a01      	subs	r2, #1
 8006024:	0112      	lsls	r2, r2, #4
 8006026:	430a      	orrs	r2, r1
 8006028:	492d      	ldr	r1, [pc, #180]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800602a:	4313      	orrs	r3, r2
 800602c:	614b      	str	r3, [r1, #20]
 800602e:	e02d      	b.n	800608c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d115      	bne.n	8006062 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006036:	4b2a      	ldr	r3, [pc, #168]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006038:	695a      	ldr	r2, [r3, #20]
 800603a:	4b2b      	ldr	r3, [pc, #172]	@ (80060e8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800603c:	4013      	ands	r3, r2
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6892      	ldr	r2, [r2, #8]
 8006042:	0211      	lsls	r1, r2, #8
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6912      	ldr	r2, [r2, #16]
 8006048:	0852      	lsrs	r2, r2, #1
 800604a:	3a01      	subs	r2, #1
 800604c:	0552      	lsls	r2, r2, #21
 800604e:	4311      	orrs	r1, r2
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6852      	ldr	r2, [r2, #4]
 8006054:	3a01      	subs	r2, #1
 8006056:	0112      	lsls	r2, r2, #4
 8006058:	430a      	orrs	r2, r1
 800605a:	4921      	ldr	r1, [pc, #132]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800605c:	4313      	orrs	r3, r2
 800605e:	614b      	str	r3, [r1, #20]
 8006060:	e014      	b.n	800608c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006062:	4b1f      	ldr	r3, [pc, #124]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006064:	695a      	ldr	r2, [r3, #20]
 8006066:	4b21      	ldr	r3, [pc, #132]	@ (80060ec <RCCEx_PLLSAI2_Config+0x1e4>)
 8006068:	4013      	ands	r3, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6892      	ldr	r2, [r2, #8]
 800606e:	0211      	lsls	r1, r2, #8
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6952      	ldr	r2, [r2, #20]
 8006074:	0852      	lsrs	r2, r2, #1
 8006076:	3a01      	subs	r2, #1
 8006078:	0652      	lsls	r2, r2, #25
 800607a:	4311      	orrs	r1, r2
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6852      	ldr	r2, [r2, #4]
 8006080:	3a01      	subs	r2, #1
 8006082:	0112      	lsls	r2, r2, #4
 8006084:	430a      	orrs	r2, r1
 8006086:	4916      	ldr	r1, [pc, #88]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006088:	4313      	orrs	r3, r2
 800608a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800608c:	4b14      	ldr	r3, [pc, #80]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a13      	ldr	r2, [pc, #76]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006096:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006098:	f7fc fb16 	bl	80026c8 <HAL_GetTick>
 800609c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800609e:	e009      	b.n	80060b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060a0:	f7fc fb12 	bl	80026c8 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d902      	bls.n	80060b4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	73fb      	strb	r3, [r7, #15]
          break;
 80060b2:	e005      	b.n	80060c0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060b4:	4b0a      	ldr	r3, [pc, #40]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0ef      	beq.n	80060a0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80060c6:	4b06      	ldr	r3, [pc, #24]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060c8:	695a      	ldr	r2, [r3, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	4904      	ldr	r1, [pc, #16]	@ (80060e0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	40021000 	.word	0x40021000
 80060e4:	07ff800f 	.word	0x07ff800f
 80060e8:	ff9f800f 	.word	0xff9f800f
 80060ec:	f9ff800f 	.word	0xf9ff800f

080060f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e049      	b.n	8006196 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fb feaa 	bl	8001e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3304      	adds	r3, #4
 800612c:	4619      	mov	r1, r3
 800612e:	4610      	mov	r0, r2
 8006130:	f000 f968 	bl	8006404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d001      	beq.n	80061b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e047      	b.n	8006248 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a23      	ldr	r2, [pc, #140]	@ (8006254 <HAL_TIM_Base_Start+0xb4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01d      	beq.n	8006206 <HAL_TIM_Base_Start+0x66>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d2:	d018      	beq.n	8006206 <HAL_TIM_Base_Start+0x66>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006258 <HAL_TIM_Base_Start+0xb8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d013      	beq.n	8006206 <HAL_TIM_Base_Start+0x66>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1e      	ldr	r2, [pc, #120]	@ (800625c <HAL_TIM_Base_Start+0xbc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00e      	beq.n	8006206 <HAL_TIM_Base_Start+0x66>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006260 <HAL_TIM_Base_Start+0xc0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d009      	beq.n	8006206 <HAL_TIM_Base_Start+0x66>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006264 <HAL_TIM_Base_Start+0xc4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d004      	beq.n	8006206 <HAL_TIM_Base_Start+0x66>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a19      	ldr	r2, [pc, #100]	@ (8006268 <HAL_TIM_Base_Start+0xc8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d115      	bne.n	8006232 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	4b17      	ldr	r3, [pc, #92]	@ (800626c <HAL_TIM_Base_Start+0xcc>)
 800620e:	4013      	ands	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b06      	cmp	r3, #6
 8006216:	d015      	beq.n	8006244 <HAL_TIM_Base_Start+0xa4>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800621e:	d011      	beq.n	8006244 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0201 	orr.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006230:	e008      	b.n	8006244 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0201 	orr.w	r2, r2, #1
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	e000      	b.n	8006246 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006244:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	40012c00 	.word	0x40012c00
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00
 8006264:	40013400 	.word	0x40013400
 8006268:	40014000 	.word	0x40014000
 800626c:	00010007 	.word	0x00010007

08006270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_TIM_ConfigClockSource+0x1c>
 8006288:	2302      	movs	r3, #2
 800628a:	e0b6      	b.n	80063fa <HAL_TIM_ConfigClockSource+0x18a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062c8:	d03e      	beq.n	8006348 <HAL_TIM_ConfigClockSource+0xd8>
 80062ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062ce:	f200 8087 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x170>
 80062d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d6:	f000 8086 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x176>
 80062da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062de:	d87f      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x170>
 80062e0:	2b70      	cmp	r3, #112	@ 0x70
 80062e2:	d01a      	beq.n	800631a <HAL_TIM_ConfigClockSource+0xaa>
 80062e4:	2b70      	cmp	r3, #112	@ 0x70
 80062e6:	d87b      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x170>
 80062e8:	2b60      	cmp	r3, #96	@ 0x60
 80062ea:	d050      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x11e>
 80062ec:	2b60      	cmp	r3, #96	@ 0x60
 80062ee:	d877      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x170>
 80062f0:	2b50      	cmp	r3, #80	@ 0x50
 80062f2:	d03c      	beq.n	800636e <HAL_TIM_ConfigClockSource+0xfe>
 80062f4:	2b50      	cmp	r3, #80	@ 0x50
 80062f6:	d873      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x170>
 80062f8:	2b40      	cmp	r3, #64	@ 0x40
 80062fa:	d058      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x13e>
 80062fc:	2b40      	cmp	r3, #64	@ 0x40
 80062fe:	d86f      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x170>
 8006300:	2b30      	cmp	r3, #48	@ 0x30
 8006302:	d064      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x15e>
 8006304:	2b30      	cmp	r3, #48	@ 0x30
 8006306:	d86b      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x170>
 8006308:	2b20      	cmp	r3, #32
 800630a:	d060      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x15e>
 800630c:	2b20      	cmp	r3, #32
 800630e:	d867      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x170>
 8006310:	2b00      	cmp	r3, #0
 8006312:	d05c      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x15e>
 8006314:	2b10      	cmp	r3, #16
 8006316:	d05a      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x15e>
 8006318:	e062      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800632a:	f000 f98b 	bl	8006644 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800633c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	609a      	str	r2, [r3, #8]
      break;
 8006346:	e04f      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006358:	f000 f974 	bl	8006644 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800636a:	609a      	str	r2, [r3, #8]
      break;
 800636c:	e03c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800637a:	461a      	mov	r2, r3
 800637c:	f000 f8e8 	bl	8006550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2150      	movs	r1, #80	@ 0x50
 8006386:	4618      	mov	r0, r3
 8006388:	f000 f941 	bl	800660e <TIM_ITRx_SetConfig>
      break;
 800638c:	e02c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800639a:	461a      	mov	r2, r3
 800639c:	f000 f907 	bl	80065ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2160      	movs	r1, #96	@ 0x60
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 f931 	bl	800660e <TIM_ITRx_SetConfig>
      break;
 80063ac:	e01c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ba:	461a      	mov	r2, r3
 80063bc:	f000 f8c8 	bl	8006550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2140      	movs	r1, #64	@ 0x40
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 f921 	bl	800660e <TIM_ITRx_SetConfig>
      break;
 80063cc:	e00c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f000 f918 	bl	800660e <TIM_ITRx_SetConfig>
      break;
 80063de:	e003      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
      break;
 80063e4:	e000      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80063e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a46      	ldr	r2, [pc, #280]	@ (8006530 <TIM_Base_SetConfig+0x12c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d013      	beq.n	8006444 <TIM_Base_SetConfig+0x40>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006422:	d00f      	beq.n	8006444 <TIM_Base_SetConfig+0x40>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a43      	ldr	r2, [pc, #268]	@ (8006534 <TIM_Base_SetConfig+0x130>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00b      	beq.n	8006444 <TIM_Base_SetConfig+0x40>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a42      	ldr	r2, [pc, #264]	@ (8006538 <TIM_Base_SetConfig+0x134>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d007      	beq.n	8006444 <TIM_Base_SetConfig+0x40>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a41      	ldr	r2, [pc, #260]	@ (800653c <TIM_Base_SetConfig+0x138>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_Base_SetConfig+0x40>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a40      	ldr	r2, [pc, #256]	@ (8006540 <TIM_Base_SetConfig+0x13c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d108      	bne.n	8006456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800644a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a35      	ldr	r2, [pc, #212]	@ (8006530 <TIM_Base_SetConfig+0x12c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01f      	beq.n	800649e <TIM_Base_SetConfig+0x9a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006464:	d01b      	beq.n	800649e <TIM_Base_SetConfig+0x9a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a32      	ldr	r2, [pc, #200]	@ (8006534 <TIM_Base_SetConfig+0x130>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d017      	beq.n	800649e <TIM_Base_SetConfig+0x9a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a31      	ldr	r2, [pc, #196]	@ (8006538 <TIM_Base_SetConfig+0x134>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d013      	beq.n	800649e <TIM_Base_SetConfig+0x9a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a30      	ldr	r2, [pc, #192]	@ (800653c <TIM_Base_SetConfig+0x138>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d00f      	beq.n	800649e <TIM_Base_SetConfig+0x9a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2f      	ldr	r2, [pc, #188]	@ (8006540 <TIM_Base_SetConfig+0x13c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00b      	beq.n	800649e <TIM_Base_SetConfig+0x9a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2e      	ldr	r2, [pc, #184]	@ (8006544 <TIM_Base_SetConfig+0x140>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d007      	beq.n	800649e <TIM_Base_SetConfig+0x9a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2d      	ldr	r2, [pc, #180]	@ (8006548 <TIM_Base_SetConfig+0x144>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d003      	beq.n	800649e <TIM_Base_SetConfig+0x9a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2c      	ldr	r2, [pc, #176]	@ (800654c <TIM_Base_SetConfig+0x148>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d108      	bne.n	80064b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a16      	ldr	r2, [pc, #88]	@ (8006530 <TIM_Base_SetConfig+0x12c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00f      	beq.n	80064fc <TIM_Base_SetConfig+0xf8>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a18      	ldr	r2, [pc, #96]	@ (8006540 <TIM_Base_SetConfig+0x13c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00b      	beq.n	80064fc <TIM_Base_SetConfig+0xf8>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a17      	ldr	r2, [pc, #92]	@ (8006544 <TIM_Base_SetConfig+0x140>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d007      	beq.n	80064fc <TIM_Base_SetConfig+0xf8>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a16      	ldr	r2, [pc, #88]	@ (8006548 <TIM_Base_SetConfig+0x144>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d003      	beq.n	80064fc <TIM_Base_SetConfig+0xf8>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a15      	ldr	r2, [pc, #84]	@ (800654c <TIM_Base_SetConfig+0x148>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d103      	bne.n	8006504 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b01      	cmp	r3, #1
 8006514:	d105      	bne.n	8006522 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f023 0201 	bic.w	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	611a      	str	r2, [r3, #16]
  }
}
 8006522:	bf00      	nop
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40012c00 	.word	0x40012c00
 8006534:	40000400 	.word	0x40000400
 8006538:	40000800 	.word	0x40000800
 800653c:	40000c00 	.word	0x40000c00
 8006540:	40013400 	.word	0x40013400
 8006544:	40014000 	.word	0x40014000
 8006548:	40014400 	.word	0x40014400
 800654c:	40014800 	.word	0x40014800

08006550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	f023 0201 	bic.w	r2, r3, #1
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800657a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f023 030a 	bic.w	r3, r3, #10
 800658c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	621a      	str	r2, [r3, #32]
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b087      	sub	sp, #28
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	f023 0210 	bic.w	r2, r3, #16
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	031b      	lsls	r3, r3, #12
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800660e:	b480      	push	{r7}
 8006610:	b085      	sub	sp, #20
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006624:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	f043 0307 	orr.w	r3, r3, #7
 8006630:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	609a      	str	r2, [r3, #8]
}
 8006638:	bf00      	nop
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800665e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	021a      	lsls	r2, r3, #8
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	431a      	orrs	r2, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4313      	orrs	r3, r2
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	609a      	str	r2, [r3, #8]
}
 8006678:	bf00      	nop
 800667a:	371c      	adds	r7, #28
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006698:	2302      	movs	r3, #2
 800669a:	e068      	b.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a2e      	ldr	r2, [pc, #184]	@ (800677c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d004      	beq.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006780 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d108      	bne.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80066d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1e      	ldr	r2, [pc, #120]	@ (800677c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01d      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800670e:	d018      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a1b      	ldr	r2, [pc, #108]	@ (8006784 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d013      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a1a      	ldr	r2, [pc, #104]	@ (8006788 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00e      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a18      	ldr	r2, [pc, #96]	@ (800678c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d009      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a13      	ldr	r2, [pc, #76]	@ (8006780 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d004      	beq.n	8006742 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a14      	ldr	r2, [pc, #80]	@ (8006790 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d10c      	bne.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	4313      	orrs	r3, r2
 8006752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40012c00 	.word	0x40012c00
 8006780:	40013400 	.word	0x40013400
 8006784:	40000400 	.word	0x40000400
 8006788:	40000800 	.word	0x40000800
 800678c:	40000c00 	.word	0x40000c00
 8006790:	40014000 	.word	0x40014000

08006794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e042      	b.n	800682c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d106      	bne.n	80067be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7fb fb77 	bl	8001eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2224      	movs	r2, #36	@ 0x24
 80067c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0201 	bic.w	r2, r2, #1
 80067d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fbb2 	bl	8006f48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f8b3 	bl	8006950 <UART_SetConfig>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e01b      	b.n	800682c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006802:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006812:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fc31 	bl	800708c <UART_CheckIdleState>
 800682a:	4603      	mov	r3, r0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	@ 0x28
 8006838:	af02      	add	r7, sp, #8
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	4613      	mov	r3, r2
 8006842:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800684a:	2b20      	cmp	r3, #32
 800684c:	d17b      	bne.n	8006946 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <HAL_UART_Transmit+0x26>
 8006854:	88fb      	ldrh	r3, [r7, #6]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e074      	b.n	8006948 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2221      	movs	r2, #33	@ 0x21
 800686a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800686e:	f7fb ff2b 	bl	80026c8 <HAL_GetTick>
 8006872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	88fa      	ldrh	r2, [r7, #6]
 8006878:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	88fa      	ldrh	r2, [r7, #6]
 8006880:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800688c:	d108      	bne.n	80068a0 <HAL_UART_Transmit+0x6c>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006896:	2300      	movs	r3, #0
 8006898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	e003      	b.n	80068a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068a8:	e030      	b.n	800690c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2200      	movs	r2, #0
 80068b2:	2180      	movs	r1, #128	@ 0x80
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 fc93 	bl	80071e0 <UART_WaitOnFlagUntilTimeout>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e03d      	b.n	8006948 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10b      	bne.n	80068ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	881a      	ldrh	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068de:	b292      	uxth	r2, r2
 80068e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	3302      	adds	r3, #2
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	e007      	b.n	80068fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	781a      	ldrb	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	3301      	adds	r3, #1
 80068f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1c8      	bne.n	80068aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2200      	movs	r2, #0
 8006920:	2140      	movs	r1, #64	@ 0x40
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 fc5c 	bl	80071e0 <UART_WaitOnFlagUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e006      	b.n	8006948 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	e000      	b.n	8006948 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006946:	2302      	movs	r3, #2
  }
}
 8006948:	4618      	mov	r0, r3
 800694a:	3720      	adds	r7, #32
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006954:	b08c      	sub	sp, #48	@ 0x30
 8006956:	af00      	add	r7, sp, #0
 8006958:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	431a      	orrs	r2, r3
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	431a      	orrs	r2, r3
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	4313      	orrs	r3, r2
 8006976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4baa      	ldr	r3, [pc, #680]	@ (8006c28 <UART_SetConfig+0x2d8>)
 8006980:	4013      	ands	r3, r2
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006988:	430b      	orrs	r3, r1
 800698a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a9f      	ldr	r2, [pc, #636]	@ (8006c2c <UART_SetConfig+0x2dc>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d004      	beq.n	80069bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069b8:	4313      	orrs	r3, r2
 80069ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80069c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069d0:	430b      	orrs	r3, r1
 80069d2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069da:	f023 010f 	bic.w	r1, r3, #15
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a90      	ldr	r2, [pc, #576]	@ (8006c30 <UART_SetConfig+0x2e0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d125      	bne.n	8006a40 <UART_SetConfig+0xf0>
 80069f4:	4b8f      	ldr	r3, [pc, #572]	@ (8006c34 <UART_SetConfig+0x2e4>)
 80069f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d81a      	bhi.n	8006a38 <UART_SetConfig+0xe8>
 8006a02:	a201      	add	r2, pc, #4	@ (adr r2, 8006a08 <UART_SetConfig+0xb8>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a19 	.word	0x08006a19
 8006a0c:	08006a29 	.word	0x08006a29
 8006a10:	08006a21 	.word	0x08006a21
 8006a14:	08006a31 	.word	0x08006a31
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a1e:	e116      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006a20:	2302      	movs	r3, #2
 8006a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a26:	e112      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006a28:	2304      	movs	r3, #4
 8006a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2e:	e10e      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006a30:	2308      	movs	r3, #8
 8006a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a36:	e10a      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3e:	e106      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a7c      	ldr	r2, [pc, #496]	@ (8006c38 <UART_SetConfig+0x2e8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d138      	bne.n	8006abc <UART_SetConfig+0x16c>
 8006a4a:	4b7a      	ldr	r3, [pc, #488]	@ (8006c34 <UART_SetConfig+0x2e4>)
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a50:	f003 030c 	and.w	r3, r3, #12
 8006a54:	2b0c      	cmp	r3, #12
 8006a56:	d82d      	bhi.n	8006ab4 <UART_SetConfig+0x164>
 8006a58:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <UART_SetConfig+0x110>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a95 	.word	0x08006a95
 8006a64:	08006ab5 	.word	0x08006ab5
 8006a68:	08006ab5 	.word	0x08006ab5
 8006a6c:	08006ab5 	.word	0x08006ab5
 8006a70:	08006aa5 	.word	0x08006aa5
 8006a74:	08006ab5 	.word	0x08006ab5
 8006a78:	08006ab5 	.word	0x08006ab5
 8006a7c:	08006ab5 	.word	0x08006ab5
 8006a80:	08006a9d 	.word	0x08006a9d
 8006a84:	08006ab5 	.word	0x08006ab5
 8006a88:	08006ab5 	.word	0x08006ab5
 8006a8c:	08006ab5 	.word	0x08006ab5
 8006a90:	08006aad 	.word	0x08006aad
 8006a94:	2300      	movs	r3, #0
 8006a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9a:	e0d8      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa2:	e0d4      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aaa:	e0d0      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006aac:	2308      	movs	r3, #8
 8006aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab2:	e0cc      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aba:	e0c8      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a5e      	ldr	r2, [pc, #376]	@ (8006c3c <UART_SetConfig+0x2ec>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d125      	bne.n	8006b12 <UART_SetConfig+0x1c2>
 8006ac6:	4b5b      	ldr	r3, [pc, #364]	@ (8006c34 <UART_SetConfig+0x2e4>)
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006acc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ad0:	2b30      	cmp	r3, #48	@ 0x30
 8006ad2:	d016      	beq.n	8006b02 <UART_SetConfig+0x1b2>
 8006ad4:	2b30      	cmp	r3, #48	@ 0x30
 8006ad6:	d818      	bhi.n	8006b0a <UART_SetConfig+0x1ba>
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d00a      	beq.n	8006af2 <UART_SetConfig+0x1a2>
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d814      	bhi.n	8006b0a <UART_SetConfig+0x1ba>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <UART_SetConfig+0x19a>
 8006ae4:	2b10      	cmp	r3, #16
 8006ae6:	d008      	beq.n	8006afa <UART_SetConfig+0x1aa>
 8006ae8:	e00f      	b.n	8006b0a <UART_SetConfig+0x1ba>
 8006aea:	2300      	movs	r3, #0
 8006aec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af0:	e0ad      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006af2:	2302      	movs	r3, #2
 8006af4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af8:	e0a9      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006afa:	2304      	movs	r3, #4
 8006afc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b00:	e0a5      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b02:	2308      	movs	r3, #8
 8006b04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b08:	e0a1      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b0a:	2310      	movs	r3, #16
 8006b0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b10:	e09d      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a4a      	ldr	r2, [pc, #296]	@ (8006c40 <UART_SetConfig+0x2f0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d125      	bne.n	8006b68 <UART_SetConfig+0x218>
 8006b1c:	4b45      	ldr	r3, [pc, #276]	@ (8006c34 <UART_SetConfig+0x2e4>)
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b26:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b28:	d016      	beq.n	8006b58 <UART_SetConfig+0x208>
 8006b2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b2c:	d818      	bhi.n	8006b60 <UART_SetConfig+0x210>
 8006b2e:	2b80      	cmp	r3, #128	@ 0x80
 8006b30:	d00a      	beq.n	8006b48 <UART_SetConfig+0x1f8>
 8006b32:	2b80      	cmp	r3, #128	@ 0x80
 8006b34:	d814      	bhi.n	8006b60 <UART_SetConfig+0x210>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <UART_SetConfig+0x1f0>
 8006b3a:	2b40      	cmp	r3, #64	@ 0x40
 8006b3c:	d008      	beq.n	8006b50 <UART_SetConfig+0x200>
 8006b3e:	e00f      	b.n	8006b60 <UART_SetConfig+0x210>
 8006b40:	2300      	movs	r3, #0
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b46:	e082      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4e:	e07e      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b50:	2304      	movs	r3, #4
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b56:	e07a      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b58:	2308      	movs	r3, #8
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b5e:	e076      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b60:	2310      	movs	r3, #16
 8006b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b66:	e072      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a35      	ldr	r2, [pc, #212]	@ (8006c44 <UART_SetConfig+0x2f4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d12a      	bne.n	8006bc8 <UART_SetConfig+0x278>
 8006b72:	4b30      	ldr	r3, [pc, #192]	@ (8006c34 <UART_SetConfig+0x2e4>)
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b80:	d01a      	beq.n	8006bb8 <UART_SetConfig+0x268>
 8006b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b86:	d81b      	bhi.n	8006bc0 <UART_SetConfig+0x270>
 8006b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b8c:	d00c      	beq.n	8006ba8 <UART_SetConfig+0x258>
 8006b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b92:	d815      	bhi.n	8006bc0 <UART_SetConfig+0x270>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <UART_SetConfig+0x250>
 8006b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b9c:	d008      	beq.n	8006bb0 <UART_SetConfig+0x260>
 8006b9e:	e00f      	b.n	8006bc0 <UART_SetConfig+0x270>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba6:	e052      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bae:	e04e      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb6:	e04a      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006bb8:	2308      	movs	r3, #8
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bbe:	e046      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bc6:	e042      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a17      	ldr	r2, [pc, #92]	@ (8006c2c <UART_SetConfig+0x2dc>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d13a      	bne.n	8006c48 <UART_SetConfig+0x2f8>
 8006bd2:	4b18      	ldr	r3, [pc, #96]	@ (8006c34 <UART_SetConfig+0x2e4>)
 8006bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006bdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006be0:	d01a      	beq.n	8006c18 <UART_SetConfig+0x2c8>
 8006be2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006be6:	d81b      	bhi.n	8006c20 <UART_SetConfig+0x2d0>
 8006be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bec:	d00c      	beq.n	8006c08 <UART_SetConfig+0x2b8>
 8006bee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bf2:	d815      	bhi.n	8006c20 <UART_SetConfig+0x2d0>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <UART_SetConfig+0x2b0>
 8006bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bfc:	d008      	beq.n	8006c10 <UART_SetConfig+0x2c0>
 8006bfe:	e00f      	b.n	8006c20 <UART_SetConfig+0x2d0>
 8006c00:	2300      	movs	r3, #0
 8006c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c06:	e022      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0e:	e01e      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006c10:	2304      	movs	r3, #4
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c16:	e01a      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006c18:	2308      	movs	r3, #8
 8006c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1e:	e016      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006c20:	2310      	movs	r3, #16
 8006c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c26:	e012      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006c28:	cfff69f3 	.word	0xcfff69f3
 8006c2c:	40008000 	.word	0x40008000
 8006c30:	40013800 	.word	0x40013800
 8006c34:	40021000 	.word	0x40021000
 8006c38:	40004400 	.word	0x40004400
 8006c3c:	40004800 	.word	0x40004800
 8006c40:	40004c00 	.word	0x40004c00
 8006c44:	40005000 	.word	0x40005000
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4aae      	ldr	r2, [pc, #696]	@ (8006f0c <UART_SetConfig+0x5bc>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	f040 8097 	bne.w	8006d88 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d823      	bhi.n	8006caa <UART_SetConfig+0x35a>
 8006c62:	a201      	add	r2, pc, #4	@ (adr r2, 8006c68 <UART_SetConfig+0x318>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006c8d 	.word	0x08006c8d
 8006c6c:	08006cab 	.word	0x08006cab
 8006c70:	08006c95 	.word	0x08006c95
 8006c74:	08006cab 	.word	0x08006cab
 8006c78:	08006c9b 	.word	0x08006c9b
 8006c7c:	08006cab 	.word	0x08006cab
 8006c80:	08006cab 	.word	0x08006cab
 8006c84:	08006cab 	.word	0x08006cab
 8006c88:	08006ca3 	.word	0x08006ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c8c:	f7fe fc2c 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8006c90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c92:	e010      	b.n	8006cb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c94:	4b9e      	ldr	r3, [pc, #632]	@ (8006f10 <UART_SetConfig+0x5c0>)
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c98:	e00d      	b.n	8006cb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c9a:	f7fe fb8d 	bl	80053b8 <HAL_RCC_GetSysClockFreq>
 8006c9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ca0:	e009      	b.n	8006cb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ca8:	e005      	b.n	8006cb6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006cb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8130 	beq.w	8006f1e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc2:	4a94      	ldr	r2, [pc, #592]	@ (8006f14 <UART_SetConfig+0x5c4>)
 8006cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cd0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	4413      	add	r3, r2
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d305      	bcc.n	8006cee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d903      	bls.n	8006cf6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cf4:	e113      	b.n	8006f1e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	60bb      	str	r3, [r7, #8]
 8006cfc:	60fa      	str	r2, [r7, #12]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	4a84      	ldr	r2, [pc, #528]	@ (8006f14 <UART_SetConfig+0x5c4>)
 8006d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	603b      	str	r3, [r7, #0]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d18:	f7f9 ffae 	bl	8000c78 <__aeabi_uldivmod>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4610      	mov	r0, r2
 8006d22:	4619      	mov	r1, r3
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	f04f 0300 	mov.w	r3, #0
 8006d2c:	020b      	lsls	r3, r1, #8
 8006d2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d32:	0202      	lsls	r2, r0, #8
 8006d34:	6979      	ldr	r1, [r7, #20]
 8006d36:	6849      	ldr	r1, [r1, #4]
 8006d38:	0849      	lsrs	r1, r1, #1
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	4605      	mov	r5, r0
 8006d40:	eb12 0804 	adds.w	r8, r2, r4
 8006d44:	eb43 0905 	adc.w	r9, r3, r5
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	469a      	mov	sl, r3
 8006d50:	4693      	mov	fp, r2
 8006d52:	4652      	mov	r2, sl
 8006d54:	465b      	mov	r3, fp
 8006d56:	4640      	mov	r0, r8
 8006d58:	4649      	mov	r1, r9
 8006d5a:	f7f9 ff8d 	bl	8000c78 <__aeabi_uldivmod>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4613      	mov	r3, r2
 8006d64:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d6c:	d308      	bcc.n	8006d80 <UART_SetConfig+0x430>
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d74:	d204      	bcs.n	8006d80 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6a3a      	ldr	r2, [r7, #32]
 8006d7c:	60da      	str	r2, [r3, #12]
 8006d7e:	e0ce      	b.n	8006f1e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d86:	e0ca      	b.n	8006f1e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d90:	d166      	bne.n	8006e60 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006d92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d827      	bhi.n	8006dea <UART_SetConfig+0x49a>
 8006d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006da0 <UART_SetConfig+0x450>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006dc5 	.word	0x08006dc5
 8006da4:	08006dcd 	.word	0x08006dcd
 8006da8:	08006dd5 	.word	0x08006dd5
 8006dac:	08006deb 	.word	0x08006deb
 8006db0:	08006ddb 	.word	0x08006ddb
 8006db4:	08006deb 	.word	0x08006deb
 8006db8:	08006deb 	.word	0x08006deb
 8006dbc:	08006deb 	.word	0x08006deb
 8006dc0:	08006de3 	.word	0x08006de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc4:	f7fe fb90 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8006dc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dca:	e014      	b.n	8006df6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dcc:	f7fe fba2 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 8006dd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dd2:	e010      	b.n	8006df6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd4:	4b4e      	ldr	r3, [pc, #312]	@ (8006f10 <UART_SetConfig+0x5c0>)
 8006dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dd8:	e00d      	b.n	8006df6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dda:	f7fe faed 	bl	80053b8 <HAL_RCC_GetSysClockFreq>
 8006dde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006de0:	e009      	b.n	8006df6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006de6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006de8:	e005      	b.n	8006df6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006df4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 8090 	beq.w	8006f1e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e02:	4a44      	ldr	r2, [pc, #272]	@ (8006f14 <UART_SetConfig+0x5c4>)
 8006e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e10:	005a      	lsls	r2, r3, #1
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	085b      	lsrs	r3, r3, #1
 8006e18:	441a      	add	r2, r3
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e22:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	2b0f      	cmp	r3, #15
 8006e28:	d916      	bls.n	8006e58 <UART_SetConfig+0x508>
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e30:	d212      	bcs.n	8006e58 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	f023 030f 	bic.w	r3, r3, #15
 8006e3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	085b      	lsrs	r3, r3, #1
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	8bfb      	ldrh	r3, [r7, #30]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	8bfa      	ldrh	r2, [r7, #30]
 8006e54:	60da      	str	r2, [r3, #12]
 8006e56:	e062      	b.n	8006f1e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e5e:	e05e      	b.n	8006f1e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d828      	bhi.n	8006eba <UART_SetConfig+0x56a>
 8006e68:	a201      	add	r2, pc, #4	@ (adr r2, 8006e70 <UART_SetConfig+0x520>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006e95 	.word	0x08006e95
 8006e74:	08006e9d 	.word	0x08006e9d
 8006e78:	08006ea5 	.word	0x08006ea5
 8006e7c:	08006ebb 	.word	0x08006ebb
 8006e80:	08006eab 	.word	0x08006eab
 8006e84:	08006ebb 	.word	0x08006ebb
 8006e88:	08006ebb 	.word	0x08006ebb
 8006e8c:	08006ebb 	.word	0x08006ebb
 8006e90:	08006eb3 	.word	0x08006eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e94:	f7fe fb28 	bl	80054e8 <HAL_RCC_GetPCLK1Freq>
 8006e98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e9a:	e014      	b.n	8006ec6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e9c:	f7fe fb3a 	bl	8005514 <HAL_RCC_GetPCLK2Freq>
 8006ea0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ea2:	e010      	b.n	8006ec6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f10 <UART_SetConfig+0x5c0>)
 8006ea6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ea8:	e00d      	b.n	8006ec6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eaa:	f7fe fa85 	bl	80053b8 <HAL_RCC_GetSysClockFreq>
 8006eae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eb0:	e009      	b.n	8006ec6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006eb8:	e005      	b.n	8006ec6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ec4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d028      	beq.n	8006f1e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed0:	4a10      	ldr	r2, [pc, #64]	@ (8006f14 <UART_SetConfig+0x5c4>)
 8006ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	085b      	lsrs	r3, r3, #1
 8006ee4:	441a      	add	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eee:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	2b0f      	cmp	r3, #15
 8006ef4:	d910      	bls.n	8006f18 <UART_SetConfig+0x5c8>
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006efc:	d20c      	bcs.n	8006f18 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60da      	str	r2, [r3, #12]
 8006f08:	e009      	b.n	8006f1e <UART_SetConfig+0x5ce>
 8006f0a:	bf00      	nop
 8006f0c:	40008000 	.word	0x40008000
 8006f10:	00f42400 	.word	0x00f42400
 8006f14:	0800a35c 	.word	0x0800a35c
      }
      else
      {
        ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2200      	movs	r2, #0
 8006f32:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2200      	movs	r2, #0
 8006f38:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f3a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3730      	adds	r7, #48	@ 0x30
 8006f42:	46bd      	mov	sp, r7
 8006f44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00a      	beq.n	8006f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00a      	beq.n	8006ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffe:	f003 0320 	and.w	r3, r3, #32
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01a      	beq.n	800705e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007046:	d10a      	bne.n	800705e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	605a      	str	r2, [r3, #4]
  }
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b098      	sub	sp, #96	@ 0x60
 8007090:	af02      	add	r7, sp, #8
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800709c:	f7fb fb14 	bl	80026c8 <HAL_GetTick>
 80070a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d12f      	bne.n	8007110 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b8:	2200      	movs	r2, #0
 80070ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f88e 	bl	80071e0 <UART_WaitOnFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d022      	beq.n	8007110 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070de:	653b      	str	r3, [r7, #80]	@ 0x50
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80070ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e6      	bne.n	80070ca <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e063      	b.n	80071d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b04      	cmp	r3, #4
 800711c:	d149      	bne.n	80071b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800711e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007126:	2200      	movs	r2, #0
 8007128:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f857 	bl	80071e0 <UART_WaitOnFlagUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d03c      	beq.n	80071b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	623b      	str	r3, [r7, #32]
   return(result);
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800714c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007156:	633b      	str	r3, [r7, #48]	@ 0x30
 8007158:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800715c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e6      	bne.n	8007138 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3308      	adds	r3, #8
 8007170:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	60fb      	str	r3, [r7, #12]
   return(result);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f023 0301 	bic.w	r3, r3, #1
 8007180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3308      	adds	r3, #8
 8007188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800718a:	61fa      	str	r2, [r7, #28]
 800718c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	69b9      	ldr	r1, [r7, #24]
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	617b      	str	r3, [r7, #20]
   return(result);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e5      	bne.n	800716a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e012      	b.n	80071d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3758      	adds	r7, #88	@ 0x58
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	4613      	mov	r3, r2
 80071ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f0:	e04f      	b.n	8007292 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f8:	d04b      	beq.n	8007292 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fa:	f7fb fa65 	bl	80026c8 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	429a      	cmp	r2, r3
 8007208:	d302      	bcc.n	8007210 <UART_WaitOnFlagUntilTimeout+0x30>
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e04e      	b.n	80072b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	d037      	beq.n	8007292 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b80      	cmp	r3, #128	@ 0x80
 8007226:	d034      	beq.n	8007292 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b40      	cmp	r3, #64	@ 0x40
 800722c:	d031      	beq.n	8007292 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	f003 0308 	and.w	r3, r3, #8
 8007238:	2b08      	cmp	r3, #8
 800723a:	d110      	bne.n	800725e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2208      	movs	r2, #8
 8007242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 f838 	bl	80072ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2208      	movs	r2, #8
 800724e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e029      	b.n	80072b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800726c:	d111      	bne.n	8007292 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007276:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 f81e 	bl	80072ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2220      	movs	r2, #32
 8007282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e00f      	b.n	80072b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69da      	ldr	r2, [r3, #28]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	4013      	ands	r3, r2
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	429a      	cmp	r2, r3
 80072a0:	bf0c      	ite	eq
 80072a2:	2301      	moveq	r3, #1
 80072a4:	2300      	movne	r3, #0
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	461a      	mov	r2, r3
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d0a0      	beq.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b095      	sub	sp, #84	@ 0x54
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ca:	e853 3f00 	ldrex	r3, [r3]
 80072ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	461a      	mov	r2, r3
 80072de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80072e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e6      	bne.n	80072c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3308      	adds	r3, #8
 80072fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	e853 3f00 	ldrex	r3, [r3]
 8007302:	61fb      	str	r3, [r7, #28]
   return(result);
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3308      	adds	r3, #8
 8007316:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007318:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800731a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800731e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e3      	bne.n	80072f4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007330:	2b01      	cmp	r3, #1
 8007332:	d118      	bne.n	8007366 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	60bb      	str	r3, [r7, #8]
   return(result);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f023 0310 	bic.w	r3, r3, #16
 8007348:	647b      	str	r3, [r7, #68]	@ 0x44
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007352:	61bb      	str	r3, [r7, #24]
 8007354:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	6979      	ldr	r1, [r7, #20]
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	613b      	str	r3, [r7, #16]
   return(result);
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e6      	bne.n	8007334 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2220      	movs	r2, #32
 800736a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800737a:	bf00      	nop
 800737c:	3754      	adds	r7, #84	@ 0x54
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007386:	b480      	push	{r7}
 8007388:	b085      	sub	sp, #20
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007394:	2b01      	cmp	r3, #1
 8007396:	d101      	bne.n	800739c <HAL_UARTEx_DisableFifoMode+0x16>
 8007398:	2302      	movs	r3, #2
 800739a:	e027      	b.n	80073ec <HAL_UARTEx_DisableFifoMode+0x66>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2224      	movs	r2, #36	@ 0x24
 80073a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0201 	bic.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80073ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2220      	movs	r2, #32
 80073de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007408:	2b01      	cmp	r3, #1
 800740a:	d101      	bne.n	8007410 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800740c:	2302      	movs	r3, #2
 800740e:	e02d      	b.n	800746c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2224      	movs	r2, #36	@ 0x24
 800741c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0201 	bic.w	r2, r2, #1
 8007436:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f84f 	bl	80074f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2220      	movs	r2, #32
 800745e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007484:	2b01      	cmp	r3, #1
 8007486:	d101      	bne.n	800748c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007488:	2302      	movs	r3, #2
 800748a:	e02d      	b.n	80074e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2224      	movs	r2, #36	@ 0x24
 8007498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0201 	bic.w	r2, r2, #1
 80074b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f811 	bl	80074f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d108      	bne.n	8007512 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007510:	e031      	b.n	8007576 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007512:	2308      	movs	r3, #8
 8007514:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007516:	2308      	movs	r3, #8
 8007518:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	0e5b      	lsrs	r3, r3, #25
 8007522:	b2db      	uxtb	r3, r3
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	0f5b      	lsrs	r3, r3, #29
 8007532:	b2db      	uxtb	r3, r3
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	7b3a      	ldrb	r2, [r7, #12]
 800753e:	4911      	ldr	r1, [pc, #68]	@ (8007584 <UARTEx_SetNbDataToProcess+0x94>)
 8007540:	5c8a      	ldrb	r2, [r1, r2]
 8007542:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007546:	7b3a      	ldrb	r2, [r7, #12]
 8007548:	490f      	ldr	r1, [pc, #60]	@ (8007588 <UARTEx_SetNbDataToProcess+0x98>)
 800754a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800754c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007550:	b29a      	uxth	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	7b7a      	ldrb	r2, [r7, #13]
 800755c:	4909      	ldr	r1, [pc, #36]	@ (8007584 <UARTEx_SetNbDataToProcess+0x94>)
 800755e:	5c8a      	ldrb	r2, [r1, r2]
 8007560:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007564:	7b7a      	ldrb	r2, [r7, #13]
 8007566:	4908      	ldr	r1, [pc, #32]	@ (8007588 <UARTEx_SetNbDataToProcess+0x98>)
 8007568:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800756a:	fb93 f3f2 	sdiv	r3, r3, r2
 800756e:	b29a      	uxth	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007576:	bf00      	nop
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	0800a374 	.word	0x0800a374
 8007588:	0800a37c 	.word	0x0800a37c

0800758c <arm_sin_f32>:
 800758c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800760c <arm_sin_f32+0x80>
 8007590:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007594:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80075a0:	d504      	bpl.n	80075ac <arm_sin_f32+0x20>
 80075a2:	ee17 3a90 	vmov	r3, s15
 80075a6:	3b01      	subs	r3, #1
 80075a8:	ee07 3a90 	vmov	s15, r3
 80075ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075b0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8007610 <arm_sin_f32+0x84>
 80075b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80075b8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80075bc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80075c0:	ee17 3a90 	vmov	r3, s15
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075ca:	d21a      	bcs.n	8007602 <arm_sin_f32+0x76>
 80075cc:	ee07 3a90 	vmov	s15, r3
 80075d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d4:	1c59      	adds	r1, r3, #1
 80075d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80075da:	4a0e      	ldr	r2, [pc, #56]	@ (8007614 <arm_sin_f32+0x88>)
 80075dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80075e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075e4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80075e8:	ed93 7a00 	vldr	s14, [r3]
 80075ec:	edd2 6a00 	vldr	s13, [r2]
 80075f0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80075f4:	ee20 0a26 	vmul.f32	s0, s0, s13
 80075f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075fc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007600:	4770      	bx	lr
 8007602:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007606:	2101      	movs	r1, #1
 8007608:	2300      	movs	r3, #0
 800760a:	e7e6      	b.n	80075da <arm_sin_f32+0x4e>
 800760c:	3e22f983 	.word	0x3e22f983
 8007610:	44000000 	.word	0x44000000
 8007614:	0800a384 	.word	0x0800a384

08007618 <__cvt>:
 8007618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	ec57 6b10 	vmov	r6, r7, d0
 8007620:	2f00      	cmp	r7, #0
 8007622:	460c      	mov	r4, r1
 8007624:	4619      	mov	r1, r3
 8007626:	463b      	mov	r3, r7
 8007628:	bfbb      	ittet	lt
 800762a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800762e:	461f      	movlt	r7, r3
 8007630:	2300      	movge	r3, #0
 8007632:	232d      	movlt	r3, #45	@ 0x2d
 8007634:	700b      	strb	r3, [r1, #0]
 8007636:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007638:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800763c:	4691      	mov	r9, r2
 800763e:	f023 0820 	bic.w	r8, r3, #32
 8007642:	bfbc      	itt	lt
 8007644:	4632      	movlt	r2, r6
 8007646:	4616      	movlt	r6, r2
 8007648:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800764c:	d005      	beq.n	800765a <__cvt+0x42>
 800764e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007652:	d100      	bne.n	8007656 <__cvt+0x3e>
 8007654:	3401      	adds	r4, #1
 8007656:	2102      	movs	r1, #2
 8007658:	e000      	b.n	800765c <__cvt+0x44>
 800765a:	2103      	movs	r1, #3
 800765c:	ab03      	add	r3, sp, #12
 800765e:	9301      	str	r3, [sp, #4]
 8007660:	ab02      	add	r3, sp, #8
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	ec47 6b10 	vmov	d0, r6, r7
 8007668:	4653      	mov	r3, sl
 800766a:	4622      	mov	r2, r4
 800766c:	f000 fe68 	bl	8008340 <_dtoa_r>
 8007670:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007674:	4605      	mov	r5, r0
 8007676:	d119      	bne.n	80076ac <__cvt+0x94>
 8007678:	f019 0f01 	tst.w	r9, #1
 800767c:	d00e      	beq.n	800769c <__cvt+0x84>
 800767e:	eb00 0904 	add.w	r9, r0, r4
 8007682:	2200      	movs	r2, #0
 8007684:	2300      	movs	r3, #0
 8007686:	4630      	mov	r0, r6
 8007688:	4639      	mov	r1, r7
 800768a:	f7f9 fa35 	bl	8000af8 <__aeabi_dcmpeq>
 800768e:	b108      	cbz	r0, 8007694 <__cvt+0x7c>
 8007690:	f8cd 900c 	str.w	r9, [sp, #12]
 8007694:	2230      	movs	r2, #48	@ 0x30
 8007696:	9b03      	ldr	r3, [sp, #12]
 8007698:	454b      	cmp	r3, r9
 800769a:	d31e      	bcc.n	80076da <__cvt+0xc2>
 800769c:	9b03      	ldr	r3, [sp, #12]
 800769e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076a0:	1b5b      	subs	r3, r3, r5
 80076a2:	4628      	mov	r0, r5
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	b004      	add	sp, #16
 80076a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076b0:	eb00 0904 	add.w	r9, r0, r4
 80076b4:	d1e5      	bne.n	8007682 <__cvt+0x6a>
 80076b6:	7803      	ldrb	r3, [r0, #0]
 80076b8:	2b30      	cmp	r3, #48	@ 0x30
 80076ba:	d10a      	bne.n	80076d2 <__cvt+0xba>
 80076bc:	2200      	movs	r2, #0
 80076be:	2300      	movs	r3, #0
 80076c0:	4630      	mov	r0, r6
 80076c2:	4639      	mov	r1, r7
 80076c4:	f7f9 fa18 	bl	8000af8 <__aeabi_dcmpeq>
 80076c8:	b918      	cbnz	r0, 80076d2 <__cvt+0xba>
 80076ca:	f1c4 0401 	rsb	r4, r4, #1
 80076ce:	f8ca 4000 	str.w	r4, [sl]
 80076d2:	f8da 3000 	ldr.w	r3, [sl]
 80076d6:	4499      	add	r9, r3
 80076d8:	e7d3      	b.n	8007682 <__cvt+0x6a>
 80076da:	1c59      	adds	r1, r3, #1
 80076dc:	9103      	str	r1, [sp, #12]
 80076de:	701a      	strb	r2, [r3, #0]
 80076e0:	e7d9      	b.n	8007696 <__cvt+0x7e>

080076e2 <__exponent>:
 80076e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076e4:	2900      	cmp	r1, #0
 80076e6:	bfba      	itte	lt
 80076e8:	4249      	neglt	r1, r1
 80076ea:	232d      	movlt	r3, #45	@ 0x2d
 80076ec:	232b      	movge	r3, #43	@ 0x2b
 80076ee:	2909      	cmp	r1, #9
 80076f0:	7002      	strb	r2, [r0, #0]
 80076f2:	7043      	strb	r3, [r0, #1]
 80076f4:	dd29      	ble.n	800774a <__exponent+0x68>
 80076f6:	f10d 0307 	add.w	r3, sp, #7
 80076fa:	461d      	mov	r5, r3
 80076fc:	270a      	movs	r7, #10
 80076fe:	461a      	mov	r2, r3
 8007700:	fbb1 f6f7 	udiv	r6, r1, r7
 8007704:	fb07 1416 	mls	r4, r7, r6, r1
 8007708:	3430      	adds	r4, #48	@ 0x30
 800770a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800770e:	460c      	mov	r4, r1
 8007710:	2c63      	cmp	r4, #99	@ 0x63
 8007712:	f103 33ff 	add.w	r3, r3, #4294967295
 8007716:	4631      	mov	r1, r6
 8007718:	dcf1      	bgt.n	80076fe <__exponent+0x1c>
 800771a:	3130      	adds	r1, #48	@ 0x30
 800771c:	1e94      	subs	r4, r2, #2
 800771e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007722:	1c41      	adds	r1, r0, #1
 8007724:	4623      	mov	r3, r4
 8007726:	42ab      	cmp	r3, r5
 8007728:	d30a      	bcc.n	8007740 <__exponent+0x5e>
 800772a:	f10d 0309 	add.w	r3, sp, #9
 800772e:	1a9b      	subs	r3, r3, r2
 8007730:	42ac      	cmp	r4, r5
 8007732:	bf88      	it	hi
 8007734:	2300      	movhi	r3, #0
 8007736:	3302      	adds	r3, #2
 8007738:	4403      	add	r3, r0
 800773a:	1a18      	subs	r0, r3, r0
 800773c:	b003      	add	sp, #12
 800773e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007740:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007744:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007748:	e7ed      	b.n	8007726 <__exponent+0x44>
 800774a:	2330      	movs	r3, #48	@ 0x30
 800774c:	3130      	adds	r1, #48	@ 0x30
 800774e:	7083      	strb	r3, [r0, #2]
 8007750:	70c1      	strb	r1, [r0, #3]
 8007752:	1d03      	adds	r3, r0, #4
 8007754:	e7f1      	b.n	800773a <__exponent+0x58>
	...

08007758 <_printf_float>:
 8007758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	b08d      	sub	sp, #52	@ 0x34
 800775e:	460c      	mov	r4, r1
 8007760:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007764:	4616      	mov	r6, r2
 8007766:	461f      	mov	r7, r3
 8007768:	4605      	mov	r5, r0
 800776a:	f000 fcdb 	bl	8008124 <_localeconv_r>
 800776e:	6803      	ldr	r3, [r0, #0]
 8007770:	9304      	str	r3, [sp, #16]
 8007772:	4618      	mov	r0, r3
 8007774:	f7f8 fd94 	bl	80002a0 <strlen>
 8007778:	2300      	movs	r3, #0
 800777a:	930a      	str	r3, [sp, #40]	@ 0x28
 800777c:	f8d8 3000 	ldr.w	r3, [r8]
 8007780:	9005      	str	r0, [sp, #20]
 8007782:	3307      	adds	r3, #7
 8007784:	f023 0307 	bic.w	r3, r3, #7
 8007788:	f103 0208 	add.w	r2, r3, #8
 800778c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007790:	f8d4 b000 	ldr.w	fp, [r4]
 8007794:	f8c8 2000 	str.w	r2, [r8]
 8007798:	e9d3 8900 	ldrd	r8, r9, [r3]
 800779c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80077a0:	9307      	str	r3, [sp, #28]
 80077a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80077a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80077aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077ae:	4b9c      	ldr	r3, [pc, #624]	@ (8007a20 <_printf_float+0x2c8>)
 80077b0:	f04f 32ff 	mov.w	r2, #4294967295
 80077b4:	f7f9 f9d2 	bl	8000b5c <__aeabi_dcmpun>
 80077b8:	bb70      	cbnz	r0, 8007818 <_printf_float+0xc0>
 80077ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077be:	4b98      	ldr	r3, [pc, #608]	@ (8007a20 <_printf_float+0x2c8>)
 80077c0:	f04f 32ff 	mov.w	r2, #4294967295
 80077c4:	f7f9 f9ac 	bl	8000b20 <__aeabi_dcmple>
 80077c8:	bb30      	cbnz	r0, 8007818 <_printf_float+0xc0>
 80077ca:	2200      	movs	r2, #0
 80077cc:	2300      	movs	r3, #0
 80077ce:	4640      	mov	r0, r8
 80077d0:	4649      	mov	r1, r9
 80077d2:	f7f9 f99b 	bl	8000b0c <__aeabi_dcmplt>
 80077d6:	b110      	cbz	r0, 80077de <_printf_float+0x86>
 80077d8:	232d      	movs	r3, #45	@ 0x2d
 80077da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077de:	4a91      	ldr	r2, [pc, #580]	@ (8007a24 <_printf_float+0x2cc>)
 80077e0:	4b91      	ldr	r3, [pc, #580]	@ (8007a28 <_printf_float+0x2d0>)
 80077e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80077e6:	bf94      	ite	ls
 80077e8:	4690      	movls	r8, r2
 80077ea:	4698      	movhi	r8, r3
 80077ec:	2303      	movs	r3, #3
 80077ee:	6123      	str	r3, [r4, #16]
 80077f0:	f02b 0304 	bic.w	r3, fp, #4
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	f04f 0900 	mov.w	r9, #0
 80077fa:	9700      	str	r7, [sp, #0]
 80077fc:	4633      	mov	r3, r6
 80077fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007800:	4621      	mov	r1, r4
 8007802:	4628      	mov	r0, r5
 8007804:	f000 f9d2 	bl	8007bac <_printf_common>
 8007808:	3001      	adds	r0, #1
 800780a:	f040 808d 	bne.w	8007928 <_printf_float+0x1d0>
 800780e:	f04f 30ff 	mov.w	r0, #4294967295
 8007812:	b00d      	add	sp, #52	@ 0x34
 8007814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007818:	4642      	mov	r2, r8
 800781a:	464b      	mov	r3, r9
 800781c:	4640      	mov	r0, r8
 800781e:	4649      	mov	r1, r9
 8007820:	f7f9 f99c 	bl	8000b5c <__aeabi_dcmpun>
 8007824:	b140      	cbz	r0, 8007838 <_printf_float+0xe0>
 8007826:	464b      	mov	r3, r9
 8007828:	2b00      	cmp	r3, #0
 800782a:	bfbc      	itt	lt
 800782c:	232d      	movlt	r3, #45	@ 0x2d
 800782e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007832:	4a7e      	ldr	r2, [pc, #504]	@ (8007a2c <_printf_float+0x2d4>)
 8007834:	4b7e      	ldr	r3, [pc, #504]	@ (8007a30 <_printf_float+0x2d8>)
 8007836:	e7d4      	b.n	80077e2 <_printf_float+0x8a>
 8007838:	6863      	ldr	r3, [r4, #4]
 800783a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800783e:	9206      	str	r2, [sp, #24]
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	d13b      	bne.n	80078bc <_printf_float+0x164>
 8007844:	2306      	movs	r3, #6
 8007846:	6063      	str	r3, [r4, #4]
 8007848:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800784c:	2300      	movs	r3, #0
 800784e:	6022      	str	r2, [r4, #0]
 8007850:	9303      	str	r3, [sp, #12]
 8007852:	ab0a      	add	r3, sp, #40	@ 0x28
 8007854:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007858:	ab09      	add	r3, sp, #36	@ 0x24
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	6861      	ldr	r1, [r4, #4]
 800785e:	ec49 8b10 	vmov	d0, r8, r9
 8007862:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007866:	4628      	mov	r0, r5
 8007868:	f7ff fed6 	bl	8007618 <__cvt>
 800786c:	9b06      	ldr	r3, [sp, #24]
 800786e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007870:	2b47      	cmp	r3, #71	@ 0x47
 8007872:	4680      	mov	r8, r0
 8007874:	d129      	bne.n	80078ca <_printf_float+0x172>
 8007876:	1cc8      	adds	r0, r1, #3
 8007878:	db02      	blt.n	8007880 <_printf_float+0x128>
 800787a:	6863      	ldr	r3, [r4, #4]
 800787c:	4299      	cmp	r1, r3
 800787e:	dd41      	ble.n	8007904 <_printf_float+0x1ac>
 8007880:	f1aa 0a02 	sub.w	sl, sl, #2
 8007884:	fa5f fa8a 	uxtb.w	sl, sl
 8007888:	3901      	subs	r1, #1
 800788a:	4652      	mov	r2, sl
 800788c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007890:	9109      	str	r1, [sp, #36]	@ 0x24
 8007892:	f7ff ff26 	bl	80076e2 <__exponent>
 8007896:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007898:	1813      	adds	r3, r2, r0
 800789a:	2a01      	cmp	r2, #1
 800789c:	4681      	mov	r9, r0
 800789e:	6123      	str	r3, [r4, #16]
 80078a0:	dc02      	bgt.n	80078a8 <_printf_float+0x150>
 80078a2:	6822      	ldr	r2, [r4, #0]
 80078a4:	07d2      	lsls	r2, r2, #31
 80078a6:	d501      	bpl.n	80078ac <_printf_float+0x154>
 80078a8:	3301      	adds	r3, #1
 80078aa:	6123      	str	r3, [r4, #16]
 80078ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0a2      	beq.n	80077fa <_printf_float+0xa2>
 80078b4:	232d      	movs	r3, #45	@ 0x2d
 80078b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078ba:	e79e      	b.n	80077fa <_printf_float+0xa2>
 80078bc:	9a06      	ldr	r2, [sp, #24]
 80078be:	2a47      	cmp	r2, #71	@ 0x47
 80078c0:	d1c2      	bne.n	8007848 <_printf_float+0xf0>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1c0      	bne.n	8007848 <_printf_float+0xf0>
 80078c6:	2301      	movs	r3, #1
 80078c8:	e7bd      	b.n	8007846 <_printf_float+0xee>
 80078ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078ce:	d9db      	bls.n	8007888 <_printf_float+0x130>
 80078d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80078d4:	d118      	bne.n	8007908 <_printf_float+0x1b0>
 80078d6:	2900      	cmp	r1, #0
 80078d8:	6863      	ldr	r3, [r4, #4]
 80078da:	dd0b      	ble.n	80078f4 <_printf_float+0x19c>
 80078dc:	6121      	str	r1, [r4, #16]
 80078de:	b913      	cbnz	r3, 80078e6 <_printf_float+0x18e>
 80078e0:	6822      	ldr	r2, [r4, #0]
 80078e2:	07d0      	lsls	r0, r2, #31
 80078e4:	d502      	bpl.n	80078ec <_printf_float+0x194>
 80078e6:	3301      	adds	r3, #1
 80078e8:	440b      	add	r3, r1
 80078ea:	6123      	str	r3, [r4, #16]
 80078ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80078ee:	f04f 0900 	mov.w	r9, #0
 80078f2:	e7db      	b.n	80078ac <_printf_float+0x154>
 80078f4:	b913      	cbnz	r3, 80078fc <_printf_float+0x1a4>
 80078f6:	6822      	ldr	r2, [r4, #0]
 80078f8:	07d2      	lsls	r2, r2, #31
 80078fa:	d501      	bpl.n	8007900 <_printf_float+0x1a8>
 80078fc:	3302      	adds	r3, #2
 80078fe:	e7f4      	b.n	80078ea <_printf_float+0x192>
 8007900:	2301      	movs	r3, #1
 8007902:	e7f2      	b.n	80078ea <_printf_float+0x192>
 8007904:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800790a:	4299      	cmp	r1, r3
 800790c:	db05      	blt.n	800791a <_printf_float+0x1c2>
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	6121      	str	r1, [r4, #16]
 8007912:	07d8      	lsls	r0, r3, #31
 8007914:	d5ea      	bpl.n	80078ec <_printf_float+0x194>
 8007916:	1c4b      	adds	r3, r1, #1
 8007918:	e7e7      	b.n	80078ea <_printf_float+0x192>
 800791a:	2900      	cmp	r1, #0
 800791c:	bfd4      	ite	le
 800791e:	f1c1 0202 	rsble	r2, r1, #2
 8007922:	2201      	movgt	r2, #1
 8007924:	4413      	add	r3, r2
 8007926:	e7e0      	b.n	80078ea <_printf_float+0x192>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	055a      	lsls	r2, r3, #21
 800792c:	d407      	bmi.n	800793e <_printf_float+0x1e6>
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	4642      	mov	r2, r8
 8007932:	4631      	mov	r1, r6
 8007934:	4628      	mov	r0, r5
 8007936:	47b8      	blx	r7
 8007938:	3001      	adds	r0, #1
 800793a:	d12b      	bne.n	8007994 <_printf_float+0x23c>
 800793c:	e767      	b.n	800780e <_printf_float+0xb6>
 800793e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007942:	f240 80dd 	bls.w	8007b00 <_printf_float+0x3a8>
 8007946:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800794a:	2200      	movs	r2, #0
 800794c:	2300      	movs	r3, #0
 800794e:	f7f9 f8d3 	bl	8000af8 <__aeabi_dcmpeq>
 8007952:	2800      	cmp	r0, #0
 8007954:	d033      	beq.n	80079be <_printf_float+0x266>
 8007956:	4a37      	ldr	r2, [pc, #220]	@ (8007a34 <_printf_float+0x2dc>)
 8007958:	2301      	movs	r3, #1
 800795a:	4631      	mov	r1, r6
 800795c:	4628      	mov	r0, r5
 800795e:	47b8      	blx	r7
 8007960:	3001      	adds	r0, #1
 8007962:	f43f af54 	beq.w	800780e <_printf_float+0xb6>
 8007966:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800796a:	4543      	cmp	r3, r8
 800796c:	db02      	blt.n	8007974 <_printf_float+0x21c>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	07d8      	lsls	r0, r3, #31
 8007972:	d50f      	bpl.n	8007994 <_printf_float+0x23c>
 8007974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007978:	4631      	mov	r1, r6
 800797a:	4628      	mov	r0, r5
 800797c:	47b8      	blx	r7
 800797e:	3001      	adds	r0, #1
 8007980:	f43f af45 	beq.w	800780e <_printf_float+0xb6>
 8007984:	f04f 0900 	mov.w	r9, #0
 8007988:	f108 38ff 	add.w	r8, r8, #4294967295
 800798c:	f104 0a1a 	add.w	sl, r4, #26
 8007990:	45c8      	cmp	r8, r9
 8007992:	dc09      	bgt.n	80079a8 <_printf_float+0x250>
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	079b      	lsls	r3, r3, #30
 8007998:	f100 8103 	bmi.w	8007ba2 <_printf_float+0x44a>
 800799c:	68e0      	ldr	r0, [r4, #12]
 800799e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079a0:	4298      	cmp	r0, r3
 80079a2:	bfb8      	it	lt
 80079a4:	4618      	movlt	r0, r3
 80079a6:	e734      	b.n	8007812 <_printf_float+0xba>
 80079a8:	2301      	movs	r3, #1
 80079aa:	4652      	mov	r2, sl
 80079ac:	4631      	mov	r1, r6
 80079ae:	4628      	mov	r0, r5
 80079b0:	47b8      	blx	r7
 80079b2:	3001      	adds	r0, #1
 80079b4:	f43f af2b 	beq.w	800780e <_printf_float+0xb6>
 80079b8:	f109 0901 	add.w	r9, r9, #1
 80079bc:	e7e8      	b.n	8007990 <_printf_float+0x238>
 80079be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	dc39      	bgt.n	8007a38 <_printf_float+0x2e0>
 80079c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007a34 <_printf_float+0x2dc>)
 80079c6:	2301      	movs	r3, #1
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	f43f af1d 	beq.w	800780e <_printf_float+0xb6>
 80079d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80079d8:	ea59 0303 	orrs.w	r3, r9, r3
 80079dc:	d102      	bne.n	80079e4 <_printf_float+0x28c>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	07d9      	lsls	r1, r3, #31
 80079e2:	d5d7      	bpl.n	8007994 <_printf_float+0x23c>
 80079e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079e8:	4631      	mov	r1, r6
 80079ea:	4628      	mov	r0, r5
 80079ec:	47b8      	blx	r7
 80079ee:	3001      	adds	r0, #1
 80079f0:	f43f af0d 	beq.w	800780e <_printf_float+0xb6>
 80079f4:	f04f 0a00 	mov.w	sl, #0
 80079f8:	f104 0b1a 	add.w	fp, r4, #26
 80079fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079fe:	425b      	negs	r3, r3
 8007a00:	4553      	cmp	r3, sl
 8007a02:	dc01      	bgt.n	8007a08 <_printf_float+0x2b0>
 8007a04:	464b      	mov	r3, r9
 8007a06:	e793      	b.n	8007930 <_printf_float+0x1d8>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	465a      	mov	r2, fp
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4628      	mov	r0, r5
 8007a10:	47b8      	blx	r7
 8007a12:	3001      	adds	r0, #1
 8007a14:	f43f aefb 	beq.w	800780e <_printf_float+0xb6>
 8007a18:	f10a 0a01 	add.w	sl, sl, #1
 8007a1c:	e7ee      	b.n	80079fc <_printf_float+0x2a4>
 8007a1e:	bf00      	nop
 8007a20:	7fefffff 	.word	0x7fefffff
 8007a24:	0800ab88 	.word	0x0800ab88
 8007a28:	0800ab8c 	.word	0x0800ab8c
 8007a2c:	0800ab90 	.word	0x0800ab90
 8007a30:	0800ab94 	.word	0x0800ab94
 8007a34:	0800ab98 	.word	0x0800ab98
 8007a38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a3e:	4553      	cmp	r3, sl
 8007a40:	bfa8      	it	ge
 8007a42:	4653      	movge	r3, sl
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	4699      	mov	r9, r3
 8007a48:	dc36      	bgt.n	8007ab8 <_printf_float+0x360>
 8007a4a:	f04f 0b00 	mov.w	fp, #0
 8007a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a52:	f104 021a 	add.w	r2, r4, #26
 8007a56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a58:	9306      	str	r3, [sp, #24]
 8007a5a:	eba3 0309 	sub.w	r3, r3, r9
 8007a5e:	455b      	cmp	r3, fp
 8007a60:	dc31      	bgt.n	8007ac6 <_printf_float+0x36e>
 8007a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a64:	459a      	cmp	sl, r3
 8007a66:	dc3a      	bgt.n	8007ade <_printf_float+0x386>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	07da      	lsls	r2, r3, #31
 8007a6c:	d437      	bmi.n	8007ade <_printf_float+0x386>
 8007a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a70:	ebaa 0903 	sub.w	r9, sl, r3
 8007a74:	9b06      	ldr	r3, [sp, #24]
 8007a76:	ebaa 0303 	sub.w	r3, sl, r3
 8007a7a:	4599      	cmp	r9, r3
 8007a7c:	bfa8      	it	ge
 8007a7e:	4699      	movge	r9, r3
 8007a80:	f1b9 0f00 	cmp.w	r9, #0
 8007a84:	dc33      	bgt.n	8007aee <_printf_float+0x396>
 8007a86:	f04f 0800 	mov.w	r8, #0
 8007a8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a8e:	f104 0b1a 	add.w	fp, r4, #26
 8007a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a94:	ebaa 0303 	sub.w	r3, sl, r3
 8007a98:	eba3 0309 	sub.w	r3, r3, r9
 8007a9c:	4543      	cmp	r3, r8
 8007a9e:	f77f af79 	ble.w	8007994 <_printf_float+0x23c>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	465a      	mov	r2, fp
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	f43f aeae 	beq.w	800780e <_printf_float+0xb6>
 8007ab2:	f108 0801 	add.w	r8, r8, #1
 8007ab6:	e7ec      	b.n	8007a92 <_printf_float+0x33a>
 8007ab8:	4642      	mov	r2, r8
 8007aba:	4631      	mov	r1, r6
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b8      	blx	r7
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d1c2      	bne.n	8007a4a <_printf_float+0x2f2>
 8007ac4:	e6a3      	b.n	800780e <_printf_float+0xb6>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4628      	mov	r0, r5
 8007acc:	9206      	str	r2, [sp, #24]
 8007ace:	47b8      	blx	r7
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	f43f ae9c 	beq.w	800780e <_printf_float+0xb6>
 8007ad6:	9a06      	ldr	r2, [sp, #24]
 8007ad8:	f10b 0b01 	add.w	fp, fp, #1
 8007adc:	e7bb      	b.n	8007a56 <_printf_float+0x2fe>
 8007ade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	47b8      	blx	r7
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d1c0      	bne.n	8007a6e <_printf_float+0x316>
 8007aec:	e68f      	b.n	800780e <_printf_float+0xb6>
 8007aee:	9a06      	ldr	r2, [sp, #24]
 8007af0:	464b      	mov	r3, r9
 8007af2:	4442      	add	r2, r8
 8007af4:	4631      	mov	r1, r6
 8007af6:	4628      	mov	r0, r5
 8007af8:	47b8      	blx	r7
 8007afa:	3001      	adds	r0, #1
 8007afc:	d1c3      	bne.n	8007a86 <_printf_float+0x32e>
 8007afe:	e686      	b.n	800780e <_printf_float+0xb6>
 8007b00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b04:	f1ba 0f01 	cmp.w	sl, #1
 8007b08:	dc01      	bgt.n	8007b0e <_printf_float+0x3b6>
 8007b0a:	07db      	lsls	r3, r3, #31
 8007b0c:	d536      	bpl.n	8007b7c <_printf_float+0x424>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	4642      	mov	r2, r8
 8007b12:	4631      	mov	r1, r6
 8007b14:	4628      	mov	r0, r5
 8007b16:	47b8      	blx	r7
 8007b18:	3001      	adds	r0, #1
 8007b1a:	f43f ae78 	beq.w	800780e <_printf_float+0xb6>
 8007b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b22:	4631      	mov	r1, r6
 8007b24:	4628      	mov	r0, r5
 8007b26:	47b8      	blx	r7
 8007b28:	3001      	adds	r0, #1
 8007b2a:	f43f ae70 	beq.w	800780e <_printf_float+0xb6>
 8007b2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b32:	2200      	movs	r2, #0
 8007b34:	2300      	movs	r3, #0
 8007b36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b3a:	f7f8 ffdd 	bl	8000af8 <__aeabi_dcmpeq>
 8007b3e:	b9c0      	cbnz	r0, 8007b72 <_printf_float+0x41a>
 8007b40:	4653      	mov	r3, sl
 8007b42:	f108 0201 	add.w	r2, r8, #1
 8007b46:	4631      	mov	r1, r6
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b8      	blx	r7
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	d10c      	bne.n	8007b6a <_printf_float+0x412>
 8007b50:	e65d      	b.n	800780e <_printf_float+0xb6>
 8007b52:	2301      	movs	r3, #1
 8007b54:	465a      	mov	r2, fp
 8007b56:	4631      	mov	r1, r6
 8007b58:	4628      	mov	r0, r5
 8007b5a:	47b8      	blx	r7
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	f43f ae56 	beq.w	800780e <_printf_float+0xb6>
 8007b62:	f108 0801 	add.w	r8, r8, #1
 8007b66:	45d0      	cmp	r8, sl
 8007b68:	dbf3      	blt.n	8007b52 <_printf_float+0x3fa>
 8007b6a:	464b      	mov	r3, r9
 8007b6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007b70:	e6df      	b.n	8007932 <_printf_float+0x1da>
 8007b72:	f04f 0800 	mov.w	r8, #0
 8007b76:	f104 0b1a 	add.w	fp, r4, #26
 8007b7a:	e7f4      	b.n	8007b66 <_printf_float+0x40e>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	4642      	mov	r2, r8
 8007b80:	e7e1      	b.n	8007b46 <_printf_float+0x3ee>
 8007b82:	2301      	movs	r3, #1
 8007b84:	464a      	mov	r2, r9
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	f43f ae3e 	beq.w	800780e <_printf_float+0xb6>
 8007b92:	f108 0801 	add.w	r8, r8, #1
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b9a:	1a5b      	subs	r3, r3, r1
 8007b9c:	4543      	cmp	r3, r8
 8007b9e:	dcf0      	bgt.n	8007b82 <_printf_float+0x42a>
 8007ba0:	e6fc      	b.n	800799c <_printf_float+0x244>
 8007ba2:	f04f 0800 	mov.w	r8, #0
 8007ba6:	f104 0919 	add.w	r9, r4, #25
 8007baa:	e7f4      	b.n	8007b96 <_printf_float+0x43e>

08007bac <_printf_common>:
 8007bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	4698      	mov	r8, r3
 8007bb4:	688a      	ldr	r2, [r1, #8]
 8007bb6:	690b      	ldr	r3, [r1, #16]
 8007bb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	bfb8      	it	lt
 8007bc0:	4613      	movlt	r3, r2
 8007bc2:	6033      	str	r3, [r6, #0]
 8007bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bc8:	4607      	mov	r7, r0
 8007bca:	460c      	mov	r4, r1
 8007bcc:	b10a      	cbz	r2, 8007bd2 <_printf_common+0x26>
 8007bce:	3301      	adds	r3, #1
 8007bd0:	6033      	str	r3, [r6, #0]
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	0699      	lsls	r1, r3, #26
 8007bd6:	bf42      	ittt	mi
 8007bd8:	6833      	ldrmi	r3, [r6, #0]
 8007bda:	3302      	addmi	r3, #2
 8007bdc:	6033      	strmi	r3, [r6, #0]
 8007bde:	6825      	ldr	r5, [r4, #0]
 8007be0:	f015 0506 	ands.w	r5, r5, #6
 8007be4:	d106      	bne.n	8007bf4 <_printf_common+0x48>
 8007be6:	f104 0a19 	add.w	sl, r4, #25
 8007bea:	68e3      	ldr	r3, [r4, #12]
 8007bec:	6832      	ldr	r2, [r6, #0]
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	42ab      	cmp	r3, r5
 8007bf2:	dc26      	bgt.n	8007c42 <_printf_common+0x96>
 8007bf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007bf8:	6822      	ldr	r2, [r4, #0]
 8007bfa:	3b00      	subs	r3, #0
 8007bfc:	bf18      	it	ne
 8007bfe:	2301      	movne	r3, #1
 8007c00:	0692      	lsls	r2, r2, #26
 8007c02:	d42b      	bmi.n	8007c5c <_printf_common+0xb0>
 8007c04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c08:	4641      	mov	r1, r8
 8007c0a:	4638      	mov	r0, r7
 8007c0c:	47c8      	blx	r9
 8007c0e:	3001      	adds	r0, #1
 8007c10:	d01e      	beq.n	8007c50 <_printf_common+0xa4>
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	6922      	ldr	r2, [r4, #16]
 8007c16:	f003 0306 	and.w	r3, r3, #6
 8007c1a:	2b04      	cmp	r3, #4
 8007c1c:	bf02      	ittt	eq
 8007c1e:	68e5      	ldreq	r5, [r4, #12]
 8007c20:	6833      	ldreq	r3, [r6, #0]
 8007c22:	1aed      	subeq	r5, r5, r3
 8007c24:	68a3      	ldr	r3, [r4, #8]
 8007c26:	bf0c      	ite	eq
 8007c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c2c:	2500      	movne	r5, #0
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	bfc4      	itt	gt
 8007c32:	1a9b      	subgt	r3, r3, r2
 8007c34:	18ed      	addgt	r5, r5, r3
 8007c36:	2600      	movs	r6, #0
 8007c38:	341a      	adds	r4, #26
 8007c3a:	42b5      	cmp	r5, r6
 8007c3c:	d11a      	bne.n	8007c74 <_printf_common+0xc8>
 8007c3e:	2000      	movs	r0, #0
 8007c40:	e008      	b.n	8007c54 <_printf_common+0xa8>
 8007c42:	2301      	movs	r3, #1
 8007c44:	4652      	mov	r2, sl
 8007c46:	4641      	mov	r1, r8
 8007c48:	4638      	mov	r0, r7
 8007c4a:	47c8      	blx	r9
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d103      	bne.n	8007c58 <_printf_common+0xac>
 8007c50:	f04f 30ff 	mov.w	r0, #4294967295
 8007c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c58:	3501      	adds	r5, #1
 8007c5a:	e7c6      	b.n	8007bea <_printf_common+0x3e>
 8007c5c:	18e1      	adds	r1, r4, r3
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	2030      	movs	r0, #48	@ 0x30
 8007c62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c66:	4422      	add	r2, r4
 8007c68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c70:	3302      	adds	r3, #2
 8007c72:	e7c7      	b.n	8007c04 <_printf_common+0x58>
 8007c74:	2301      	movs	r3, #1
 8007c76:	4622      	mov	r2, r4
 8007c78:	4641      	mov	r1, r8
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	47c8      	blx	r9
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d0e6      	beq.n	8007c50 <_printf_common+0xa4>
 8007c82:	3601      	adds	r6, #1
 8007c84:	e7d9      	b.n	8007c3a <_printf_common+0x8e>
	...

08007c88 <_printf_i>:
 8007c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8c:	7e0f      	ldrb	r7, [r1, #24]
 8007c8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c90:	2f78      	cmp	r7, #120	@ 0x78
 8007c92:	4691      	mov	r9, r2
 8007c94:	4680      	mov	r8, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	469a      	mov	sl, r3
 8007c9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c9e:	d807      	bhi.n	8007cb0 <_printf_i+0x28>
 8007ca0:	2f62      	cmp	r7, #98	@ 0x62
 8007ca2:	d80a      	bhi.n	8007cba <_printf_i+0x32>
 8007ca4:	2f00      	cmp	r7, #0
 8007ca6:	f000 80d2 	beq.w	8007e4e <_printf_i+0x1c6>
 8007caa:	2f58      	cmp	r7, #88	@ 0x58
 8007cac:	f000 80b9 	beq.w	8007e22 <_printf_i+0x19a>
 8007cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cb8:	e03a      	b.n	8007d30 <_printf_i+0xa8>
 8007cba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cbe:	2b15      	cmp	r3, #21
 8007cc0:	d8f6      	bhi.n	8007cb0 <_printf_i+0x28>
 8007cc2:	a101      	add	r1, pc, #4	@ (adr r1, 8007cc8 <_printf_i+0x40>)
 8007cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cc8:	08007d21 	.word	0x08007d21
 8007ccc:	08007d35 	.word	0x08007d35
 8007cd0:	08007cb1 	.word	0x08007cb1
 8007cd4:	08007cb1 	.word	0x08007cb1
 8007cd8:	08007cb1 	.word	0x08007cb1
 8007cdc:	08007cb1 	.word	0x08007cb1
 8007ce0:	08007d35 	.word	0x08007d35
 8007ce4:	08007cb1 	.word	0x08007cb1
 8007ce8:	08007cb1 	.word	0x08007cb1
 8007cec:	08007cb1 	.word	0x08007cb1
 8007cf0:	08007cb1 	.word	0x08007cb1
 8007cf4:	08007e35 	.word	0x08007e35
 8007cf8:	08007d5f 	.word	0x08007d5f
 8007cfc:	08007def 	.word	0x08007def
 8007d00:	08007cb1 	.word	0x08007cb1
 8007d04:	08007cb1 	.word	0x08007cb1
 8007d08:	08007e57 	.word	0x08007e57
 8007d0c:	08007cb1 	.word	0x08007cb1
 8007d10:	08007d5f 	.word	0x08007d5f
 8007d14:	08007cb1 	.word	0x08007cb1
 8007d18:	08007cb1 	.word	0x08007cb1
 8007d1c:	08007df7 	.word	0x08007df7
 8007d20:	6833      	ldr	r3, [r6, #0]
 8007d22:	1d1a      	adds	r2, r3, #4
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6032      	str	r2, [r6, #0]
 8007d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d30:	2301      	movs	r3, #1
 8007d32:	e09d      	b.n	8007e70 <_printf_i+0x1e8>
 8007d34:	6833      	ldr	r3, [r6, #0]
 8007d36:	6820      	ldr	r0, [r4, #0]
 8007d38:	1d19      	adds	r1, r3, #4
 8007d3a:	6031      	str	r1, [r6, #0]
 8007d3c:	0606      	lsls	r6, r0, #24
 8007d3e:	d501      	bpl.n	8007d44 <_printf_i+0xbc>
 8007d40:	681d      	ldr	r5, [r3, #0]
 8007d42:	e003      	b.n	8007d4c <_printf_i+0xc4>
 8007d44:	0645      	lsls	r5, r0, #25
 8007d46:	d5fb      	bpl.n	8007d40 <_printf_i+0xb8>
 8007d48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d4c:	2d00      	cmp	r5, #0
 8007d4e:	da03      	bge.n	8007d58 <_printf_i+0xd0>
 8007d50:	232d      	movs	r3, #45	@ 0x2d
 8007d52:	426d      	negs	r5, r5
 8007d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d58:	4859      	ldr	r0, [pc, #356]	@ (8007ec0 <_printf_i+0x238>)
 8007d5a:	230a      	movs	r3, #10
 8007d5c:	e011      	b.n	8007d82 <_printf_i+0xfa>
 8007d5e:	6821      	ldr	r1, [r4, #0]
 8007d60:	6833      	ldr	r3, [r6, #0]
 8007d62:	0608      	lsls	r0, r1, #24
 8007d64:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d68:	d402      	bmi.n	8007d70 <_printf_i+0xe8>
 8007d6a:	0649      	lsls	r1, r1, #25
 8007d6c:	bf48      	it	mi
 8007d6e:	b2ad      	uxthmi	r5, r5
 8007d70:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d72:	4853      	ldr	r0, [pc, #332]	@ (8007ec0 <_printf_i+0x238>)
 8007d74:	6033      	str	r3, [r6, #0]
 8007d76:	bf14      	ite	ne
 8007d78:	230a      	movne	r3, #10
 8007d7a:	2308      	moveq	r3, #8
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d82:	6866      	ldr	r6, [r4, #4]
 8007d84:	60a6      	str	r6, [r4, #8]
 8007d86:	2e00      	cmp	r6, #0
 8007d88:	bfa2      	ittt	ge
 8007d8a:	6821      	ldrge	r1, [r4, #0]
 8007d8c:	f021 0104 	bicge.w	r1, r1, #4
 8007d90:	6021      	strge	r1, [r4, #0]
 8007d92:	b90d      	cbnz	r5, 8007d98 <_printf_i+0x110>
 8007d94:	2e00      	cmp	r6, #0
 8007d96:	d04b      	beq.n	8007e30 <_printf_i+0x1a8>
 8007d98:	4616      	mov	r6, r2
 8007d9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d9e:	fb03 5711 	mls	r7, r3, r1, r5
 8007da2:	5dc7      	ldrb	r7, [r0, r7]
 8007da4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007da8:	462f      	mov	r7, r5
 8007daa:	42bb      	cmp	r3, r7
 8007dac:	460d      	mov	r5, r1
 8007dae:	d9f4      	bls.n	8007d9a <_printf_i+0x112>
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d10b      	bne.n	8007dcc <_printf_i+0x144>
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	07df      	lsls	r7, r3, #31
 8007db8:	d508      	bpl.n	8007dcc <_printf_i+0x144>
 8007dba:	6923      	ldr	r3, [r4, #16]
 8007dbc:	6861      	ldr	r1, [r4, #4]
 8007dbe:	4299      	cmp	r1, r3
 8007dc0:	bfde      	ittt	le
 8007dc2:	2330      	movle	r3, #48	@ 0x30
 8007dc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007dc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007dcc:	1b92      	subs	r2, r2, r6
 8007dce:	6122      	str	r2, [r4, #16]
 8007dd0:	f8cd a000 	str.w	sl, [sp]
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	aa03      	add	r2, sp, #12
 8007dd8:	4621      	mov	r1, r4
 8007dda:	4640      	mov	r0, r8
 8007ddc:	f7ff fee6 	bl	8007bac <_printf_common>
 8007de0:	3001      	adds	r0, #1
 8007de2:	d14a      	bne.n	8007e7a <_printf_i+0x1f2>
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295
 8007de8:	b004      	add	sp, #16
 8007dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	f043 0320 	orr.w	r3, r3, #32
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	4833      	ldr	r0, [pc, #204]	@ (8007ec4 <_printf_i+0x23c>)
 8007df8:	2778      	movs	r7, #120	@ 0x78
 8007dfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	6831      	ldr	r1, [r6, #0]
 8007e02:	061f      	lsls	r7, r3, #24
 8007e04:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e08:	d402      	bmi.n	8007e10 <_printf_i+0x188>
 8007e0a:	065f      	lsls	r7, r3, #25
 8007e0c:	bf48      	it	mi
 8007e0e:	b2ad      	uxthmi	r5, r5
 8007e10:	6031      	str	r1, [r6, #0]
 8007e12:	07d9      	lsls	r1, r3, #31
 8007e14:	bf44      	itt	mi
 8007e16:	f043 0320 	orrmi.w	r3, r3, #32
 8007e1a:	6023      	strmi	r3, [r4, #0]
 8007e1c:	b11d      	cbz	r5, 8007e26 <_printf_i+0x19e>
 8007e1e:	2310      	movs	r3, #16
 8007e20:	e7ac      	b.n	8007d7c <_printf_i+0xf4>
 8007e22:	4827      	ldr	r0, [pc, #156]	@ (8007ec0 <_printf_i+0x238>)
 8007e24:	e7e9      	b.n	8007dfa <_printf_i+0x172>
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	f023 0320 	bic.w	r3, r3, #32
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	e7f6      	b.n	8007e1e <_printf_i+0x196>
 8007e30:	4616      	mov	r6, r2
 8007e32:	e7bd      	b.n	8007db0 <_printf_i+0x128>
 8007e34:	6833      	ldr	r3, [r6, #0]
 8007e36:	6825      	ldr	r5, [r4, #0]
 8007e38:	6961      	ldr	r1, [r4, #20]
 8007e3a:	1d18      	adds	r0, r3, #4
 8007e3c:	6030      	str	r0, [r6, #0]
 8007e3e:	062e      	lsls	r6, r5, #24
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	d501      	bpl.n	8007e48 <_printf_i+0x1c0>
 8007e44:	6019      	str	r1, [r3, #0]
 8007e46:	e002      	b.n	8007e4e <_printf_i+0x1c6>
 8007e48:	0668      	lsls	r0, r5, #25
 8007e4a:	d5fb      	bpl.n	8007e44 <_printf_i+0x1bc>
 8007e4c:	8019      	strh	r1, [r3, #0]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6123      	str	r3, [r4, #16]
 8007e52:	4616      	mov	r6, r2
 8007e54:	e7bc      	b.n	8007dd0 <_printf_i+0x148>
 8007e56:	6833      	ldr	r3, [r6, #0]
 8007e58:	1d1a      	adds	r2, r3, #4
 8007e5a:	6032      	str	r2, [r6, #0]
 8007e5c:	681e      	ldr	r6, [r3, #0]
 8007e5e:	6862      	ldr	r2, [r4, #4]
 8007e60:	2100      	movs	r1, #0
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7f8 f9cc 	bl	8000200 <memchr>
 8007e68:	b108      	cbz	r0, 8007e6e <_printf_i+0x1e6>
 8007e6a:	1b80      	subs	r0, r0, r6
 8007e6c:	6060      	str	r0, [r4, #4]
 8007e6e:	6863      	ldr	r3, [r4, #4]
 8007e70:	6123      	str	r3, [r4, #16]
 8007e72:	2300      	movs	r3, #0
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e78:	e7aa      	b.n	8007dd0 <_printf_i+0x148>
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	4632      	mov	r2, r6
 8007e7e:	4649      	mov	r1, r9
 8007e80:	4640      	mov	r0, r8
 8007e82:	47d0      	blx	sl
 8007e84:	3001      	adds	r0, #1
 8007e86:	d0ad      	beq.n	8007de4 <_printf_i+0x15c>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	079b      	lsls	r3, r3, #30
 8007e8c:	d413      	bmi.n	8007eb6 <_printf_i+0x22e>
 8007e8e:	68e0      	ldr	r0, [r4, #12]
 8007e90:	9b03      	ldr	r3, [sp, #12]
 8007e92:	4298      	cmp	r0, r3
 8007e94:	bfb8      	it	lt
 8007e96:	4618      	movlt	r0, r3
 8007e98:	e7a6      	b.n	8007de8 <_printf_i+0x160>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	47d0      	blx	sl
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d09d      	beq.n	8007de4 <_printf_i+0x15c>
 8007ea8:	3501      	adds	r5, #1
 8007eaa:	68e3      	ldr	r3, [r4, #12]
 8007eac:	9903      	ldr	r1, [sp, #12]
 8007eae:	1a5b      	subs	r3, r3, r1
 8007eb0:	42ab      	cmp	r3, r5
 8007eb2:	dcf2      	bgt.n	8007e9a <_printf_i+0x212>
 8007eb4:	e7eb      	b.n	8007e8e <_printf_i+0x206>
 8007eb6:	2500      	movs	r5, #0
 8007eb8:	f104 0619 	add.w	r6, r4, #25
 8007ebc:	e7f5      	b.n	8007eaa <_printf_i+0x222>
 8007ebe:	bf00      	nop
 8007ec0:	0800ab9a 	.word	0x0800ab9a
 8007ec4:	0800abab 	.word	0x0800abab

08007ec8 <std>:
 8007ec8:	2300      	movs	r3, #0
 8007eca:	b510      	push	{r4, lr}
 8007ecc:	4604      	mov	r4, r0
 8007ece:	e9c0 3300 	strd	r3, r3, [r0]
 8007ed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ed6:	6083      	str	r3, [r0, #8]
 8007ed8:	8181      	strh	r1, [r0, #12]
 8007eda:	6643      	str	r3, [r0, #100]	@ 0x64
 8007edc:	81c2      	strh	r2, [r0, #14]
 8007ede:	6183      	str	r3, [r0, #24]
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	2208      	movs	r2, #8
 8007ee4:	305c      	adds	r0, #92	@ 0x5c
 8007ee6:	f000 f914 	bl	8008112 <memset>
 8007eea:	4b0d      	ldr	r3, [pc, #52]	@ (8007f20 <std+0x58>)
 8007eec:	6263      	str	r3, [r4, #36]	@ 0x24
 8007eee:	4b0d      	ldr	r3, [pc, #52]	@ (8007f24 <std+0x5c>)
 8007ef0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8007f28 <std+0x60>)
 8007ef4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8007f2c <std+0x64>)
 8007ef8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007efa:	4b0d      	ldr	r3, [pc, #52]	@ (8007f30 <std+0x68>)
 8007efc:	6224      	str	r4, [r4, #32]
 8007efe:	429c      	cmp	r4, r3
 8007f00:	d006      	beq.n	8007f10 <std+0x48>
 8007f02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f06:	4294      	cmp	r4, r2
 8007f08:	d002      	beq.n	8007f10 <std+0x48>
 8007f0a:	33d0      	adds	r3, #208	@ 0xd0
 8007f0c:	429c      	cmp	r4, r3
 8007f0e:	d105      	bne.n	8007f1c <std+0x54>
 8007f10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f18:	f000 b978 	b.w	800820c <__retarget_lock_init_recursive>
 8007f1c:	bd10      	pop	{r4, pc}
 8007f1e:	bf00      	nop
 8007f20:	0800808d 	.word	0x0800808d
 8007f24:	080080af 	.word	0x080080af
 8007f28:	080080e7 	.word	0x080080e7
 8007f2c:	0800810b 	.word	0x0800810b
 8007f30:	20002580 	.word	0x20002580

08007f34 <stdio_exit_handler>:
 8007f34:	4a02      	ldr	r2, [pc, #8]	@ (8007f40 <stdio_exit_handler+0xc>)
 8007f36:	4903      	ldr	r1, [pc, #12]	@ (8007f44 <stdio_exit_handler+0x10>)
 8007f38:	4803      	ldr	r0, [pc, #12]	@ (8007f48 <stdio_exit_handler+0x14>)
 8007f3a:	f000 b869 	b.w	8008010 <_fwalk_sglue>
 8007f3e:	bf00      	nop
 8007f40:	200000b0 	.word	0x200000b0
 8007f44:	08009b85 	.word	0x08009b85
 8007f48:	200000c0 	.word	0x200000c0

08007f4c <cleanup_stdio>:
 8007f4c:	6841      	ldr	r1, [r0, #4]
 8007f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8007f80 <cleanup_stdio+0x34>)
 8007f50:	4299      	cmp	r1, r3
 8007f52:	b510      	push	{r4, lr}
 8007f54:	4604      	mov	r4, r0
 8007f56:	d001      	beq.n	8007f5c <cleanup_stdio+0x10>
 8007f58:	f001 fe14 	bl	8009b84 <_fflush_r>
 8007f5c:	68a1      	ldr	r1, [r4, #8]
 8007f5e:	4b09      	ldr	r3, [pc, #36]	@ (8007f84 <cleanup_stdio+0x38>)
 8007f60:	4299      	cmp	r1, r3
 8007f62:	d002      	beq.n	8007f6a <cleanup_stdio+0x1e>
 8007f64:	4620      	mov	r0, r4
 8007f66:	f001 fe0d 	bl	8009b84 <_fflush_r>
 8007f6a:	68e1      	ldr	r1, [r4, #12]
 8007f6c:	4b06      	ldr	r3, [pc, #24]	@ (8007f88 <cleanup_stdio+0x3c>)
 8007f6e:	4299      	cmp	r1, r3
 8007f70:	d004      	beq.n	8007f7c <cleanup_stdio+0x30>
 8007f72:	4620      	mov	r0, r4
 8007f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f78:	f001 be04 	b.w	8009b84 <_fflush_r>
 8007f7c:	bd10      	pop	{r4, pc}
 8007f7e:	bf00      	nop
 8007f80:	20002580 	.word	0x20002580
 8007f84:	200025e8 	.word	0x200025e8
 8007f88:	20002650 	.word	0x20002650

08007f8c <global_stdio_init.part.0>:
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007fbc <global_stdio_init.part.0+0x30>)
 8007f90:	4c0b      	ldr	r4, [pc, #44]	@ (8007fc0 <global_stdio_init.part.0+0x34>)
 8007f92:	4a0c      	ldr	r2, [pc, #48]	@ (8007fc4 <global_stdio_init.part.0+0x38>)
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	4620      	mov	r0, r4
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2104      	movs	r1, #4
 8007f9c:	f7ff ff94 	bl	8007ec8 <std>
 8007fa0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	2109      	movs	r1, #9
 8007fa8:	f7ff ff8e 	bl	8007ec8 <std>
 8007fac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb6:	2112      	movs	r1, #18
 8007fb8:	f7ff bf86 	b.w	8007ec8 <std>
 8007fbc:	200026b8 	.word	0x200026b8
 8007fc0:	20002580 	.word	0x20002580
 8007fc4:	08007f35 	.word	0x08007f35

08007fc8 <__sfp_lock_acquire>:
 8007fc8:	4801      	ldr	r0, [pc, #4]	@ (8007fd0 <__sfp_lock_acquire+0x8>)
 8007fca:	f000 b920 	b.w	800820e <__retarget_lock_acquire_recursive>
 8007fce:	bf00      	nop
 8007fd0:	200026c1 	.word	0x200026c1

08007fd4 <__sfp_lock_release>:
 8007fd4:	4801      	ldr	r0, [pc, #4]	@ (8007fdc <__sfp_lock_release+0x8>)
 8007fd6:	f000 b91b 	b.w	8008210 <__retarget_lock_release_recursive>
 8007fda:	bf00      	nop
 8007fdc:	200026c1 	.word	0x200026c1

08007fe0 <__sinit>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	f7ff fff0 	bl	8007fc8 <__sfp_lock_acquire>
 8007fe8:	6a23      	ldr	r3, [r4, #32]
 8007fea:	b11b      	cbz	r3, 8007ff4 <__sinit+0x14>
 8007fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff0:	f7ff bff0 	b.w	8007fd4 <__sfp_lock_release>
 8007ff4:	4b04      	ldr	r3, [pc, #16]	@ (8008008 <__sinit+0x28>)
 8007ff6:	6223      	str	r3, [r4, #32]
 8007ff8:	4b04      	ldr	r3, [pc, #16]	@ (800800c <__sinit+0x2c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1f5      	bne.n	8007fec <__sinit+0xc>
 8008000:	f7ff ffc4 	bl	8007f8c <global_stdio_init.part.0>
 8008004:	e7f2      	b.n	8007fec <__sinit+0xc>
 8008006:	bf00      	nop
 8008008:	08007f4d 	.word	0x08007f4d
 800800c:	200026b8 	.word	0x200026b8

08008010 <_fwalk_sglue>:
 8008010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008014:	4607      	mov	r7, r0
 8008016:	4688      	mov	r8, r1
 8008018:	4614      	mov	r4, r2
 800801a:	2600      	movs	r6, #0
 800801c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008020:	f1b9 0901 	subs.w	r9, r9, #1
 8008024:	d505      	bpl.n	8008032 <_fwalk_sglue+0x22>
 8008026:	6824      	ldr	r4, [r4, #0]
 8008028:	2c00      	cmp	r4, #0
 800802a:	d1f7      	bne.n	800801c <_fwalk_sglue+0xc>
 800802c:	4630      	mov	r0, r6
 800802e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008032:	89ab      	ldrh	r3, [r5, #12]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d907      	bls.n	8008048 <_fwalk_sglue+0x38>
 8008038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800803c:	3301      	adds	r3, #1
 800803e:	d003      	beq.n	8008048 <_fwalk_sglue+0x38>
 8008040:	4629      	mov	r1, r5
 8008042:	4638      	mov	r0, r7
 8008044:	47c0      	blx	r8
 8008046:	4306      	orrs	r6, r0
 8008048:	3568      	adds	r5, #104	@ 0x68
 800804a:	e7e9      	b.n	8008020 <_fwalk_sglue+0x10>

0800804c <siprintf>:
 800804c:	b40e      	push	{r1, r2, r3}
 800804e:	b500      	push	{lr}
 8008050:	b09c      	sub	sp, #112	@ 0x70
 8008052:	ab1d      	add	r3, sp, #116	@ 0x74
 8008054:	9002      	str	r0, [sp, #8]
 8008056:	9006      	str	r0, [sp, #24]
 8008058:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800805c:	4809      	ldr	r0, [pc, #36]	@ (8008084 <siprintf+0x38>)
 800805e:	9107      	str	r1, [sp, #28]
 8008060:	9104      	str	r1, [sp, #16]
 8008062:	4909      	ldr	r1, [pc, #36]	@ (8008088 <siprintf+0x3c>)
 8008064:	f853 2b04 	ldr.w	r2, [r3], #4
 8008068:	9105      	str	r1, [sp, #20]
 800806a:	6800      	ldr	r0, [r0, #0]
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	a902      	add	r1, sp, #8
 8008070:	f001 fc08 	bl	8009884 <_svfiprintf_r>
 8008074:	9b02      	ldr	r3, [sp, #8]
 8008076:	2200      	movs	r2, #0
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	b01c      	add	sp, #112	@ 0x70
 800807c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008080:	b003      	add	sp, #12
 8008082:	4770      	bx	lr
 8008084:	200000bc 	.word	0x200000bc
 8008088:	ffff0208 	.word	0xffff0208

0800808c <__sread>:
 800808c:	b510      	push	{r4, lr}
 800808e:	460c      	mov	r4, r1
 8008090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008094:	f000 f86c 	bl	8008170 <_read_r>
 8008098:	2800      	cmp	r0, #0
 800809a:	bfab      	itete	ge
 800809c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800809e:	89a3      	ldrhlt	r3, [r4, #12]
 80080a0:	181b      	addge	r3, r3, r0
 80080a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80080a6:	bfac      	ite	ge
 80080a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080aa:	81a3      	strhlt	r3, [r4, #12]
 80080ac:	bd10      	pop	{r4, pc}

080080ae <__swrite>:
 80080ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b2:	461f      	mov	r7, r3
 80080b4:	898b      	ldrh	r3, [r1, #12]
 80080b6:	05db      	lsls	r3, r3, #23
 80080b8:	4605      	mov	r5, r0
 80080ba:	460c      	mov	r4, r1
 80080bc:	4616      	mov	r6, r2
 80080be:	d505      	bpl.n	80080cc <__swrite+0x1e>
 80080c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c4:	2302      	movs	r3, #2
 80080c6:	2200      	movs	r2, #0
 80080c8:	f000 f840 	bl	800814c <_lseek_r>
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080d6:	81a3      	strh	r3, [r4, #12]
 80080d8:	4632      	mov	r2, r6
 80080da:	463b      	mov	r3, r7
 80080dc:	4628      	mov	r0, r5
 80080de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080e2:	f000 b857 	b.w	8008194 <_write_r>

080080e6 <__sseek>:
 80080e6:	b510      	push	{r4, lr}
 80080e8:	460c      	mov	r4, r1
 80080ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ee:	f000 f82d 	bl	800814c <_lseek_r>
 80080f2:	1c43      	adds	r3, r0, #1
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	bf15      	itete	ne
 80080f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008102:	81a3      	strheq	r3, [r4, #12]
 8008104:	bf18      	it	ne
 8008106:	81a3      	strhne	r3, [r4, #12]
 8008108:	bd10      	pop	{r4, pc}

0800810a <__sclose>:
 800810a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800810e:	f000 b80d 	b.w	800812c <_close_r>

08008112 <memset>:
 8008112:	4402      	add	r2, r0
 8008114:	4603      	mov	r3, r0
 8008116:	4293      	cmp	r3, r2
 8008118:	d100      	bne.n	800811c <memset+0xa>
 800811a:	4770      	bx	lr
 800811c:	f803 1b01 	strb.w	r1, [r3], #1
 8008120:	e7f9      	b.n	8008116 <memset+0x4>
	...

08008124 <_localeconv_r>:
 8008124:	4800      	ldr	r0, [pc, #0]	@ (8008128 <_localeconv_r+0x4>)
 8008126:	4770      	bx	lr
 8008128:	200001fc 	.word	0x200001fc

0800812c <_close_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d06      	ldr	r5, [pc, #24]	@ (8008148 <_close_r+0x1c>)
 8008130:	2300      	movs	r3, #0
 8008132:	4604      	mov	r4, r0
 8008134:	4608      	mov	r0, r1
 8008136:	602b      	str	r3, [r5, #0]
 8008138:	f7f9 ffac 	bl	8002094 <_close>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_close_r+0x1a>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_close_r+0x1a>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	200026bc 	.word	0x200026bc

0800814c <_lseek_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4d07      	ldr	r5, [pc, #28]	@ (800816c <_lseek_r+0x20>)
 8008150:	4604      	mov	r4, r0
 8008152:	4608      	mov	r0, r1
 8008154:	4611      	mov	r1, r2
 8008156:	2200      	movs	r2, #0
 8008158:	602a      	str	r2, [r5, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	f7f9 ffc1 	bl	80020e2 <_lseek>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_lseek_r+0x1e>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	b103      	cbz	r3, 800816a <_lseek_r+0x1e>
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	200026bc 	.word	0x200026bc

08008170 <_read_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d07      	ldr	r5, [pc, #28]	@ (8008190 <_read_r+0x20>)
 8008174:	4604      	mov	r4, r0
 8008176:	4608      	mov	r0, r1
 8008178:	4611      	mov	r1, r2
 800817a:	2200      	movs	r2, #0
 800817c:	602a      	str	r2, [r5, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	f7f9 ff4f 	bl	8002022 <_read>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_read_r+0x1e>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_read_r+0x1e>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	200026bc 	.word	0x200026bc

08008194 <_write_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d07      	ldr	r5, [pc, #28]	@ (80081b4 <_write_r+0x20>)
 8008198:	4604      	mov	r4, r0
 800819a:	4608      	mov	r0, r1
 800819c:	4611      	mov	r1, r2
 800819e:	2200      	movs	r2, #0
 80081a0:	602a      	str	r2, [r5, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	f7f9 ff5a 	bl	800205c <_write>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_write_r+0x1e>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_write_r+0x1e>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	200026bc 	.word	0x200026bc

080081b8 <__errno>:
 80081b8:	4b01      	ldr	r3, [pc, #4]	@ (80081c0 <__errno+0x8>)
 80081ba:	6818      	ldr	r0, [r3, #0]
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	200000bc 	.word	0x200000bc

080081c4 <__libc_init_array>:
 80081c4:	b570      	push	{r4, r5, r6, lr}
 80081c6:	4d0d      	ldr	r5, [pc, #52]	@ (80081fc <__libc_init_array+0x38>)
 80081c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008200 <__libc_init_array+0x3c>)
 80081ca:	1b64      	subs	r4, r4, r5
 80081cc:	10a4      	asrs	r4, r4, #2
 80081ce:	2600      	movs	r6, #0
 80081d0:	42a6      	cmp	r6, r4
 80081d2:	d109      	bne.n	80081e8 <__libc_init_array+0x24>
 80081d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008204 <__libc_init_array+0x40>)
 80081d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008208 <__libc_init_array+0x44>)
 80081d8:	f002 f864 	bl	800a2a4 <_init>
 80081dc:	1b64      	subs	r4, r4, r5
 80081de:	10a4      	asrs	r4, r4, #2
 80081e0:	2600      	movs	r6, #0
 80081e2:	42a6      	cmp	r6, r4
 80081e4:	d105      	bne.n	80081f2 <__libc_init_array+0x2e>
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ec:	4798      	blx	r3
 80081ee:	3601      	adds	r6, #1
 80081f0:	e7ee      	b.n	80081d0 <__libc_init_array+0xc>
 80081f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081f6:	4798      	blx	r3
 80081f8:	3601      	adds	r6, #1
 80081fa:	e7f2      	b.n	80081e2 <__libc_init_array+0x1e>
 80081fc:	0800af00 	.word	0x0800af00
 8008200:	0800af00 	.word	0x0800af00
 8008204:	0800af00 	.word	0x0800af00
 8008208:	0800af04 	.word	0x0800af04

0800820c <__retarget_lock_init_recursive>:
 800820c:	4770      	bx	lr

0800820e <__retarget_lock_acquire_recursive>:
 800820e:	4770      	bx	lr

08008210 <__retarget_lock_release_recursive>:
 8008210:	4770      	bx	lr

08008212 <memcpy>:
 8008212:	440a      	add	r2, r1
 8008214:	4291      	cmp	r1, r2
 8008216:	f100 33ff 	add.w	r3, r0, #4294967295
 800821a:	d100      	bne.n	800821e <memcpy+0xc>
 800821c:	4770      	bx	lr
 800821e:	b510      	push	{r4, lr}
 8008220:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008224:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008228:	4291      	cmp	r1, r2
 800822a:	d1f9      	bne.n	8008220 <memcpy+0xe>
 800822c:	bd10      	pop	{r4, pc}

0800822e <quorem>:
 800822e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008232:	6903      	ldr	r3, [r0, #16]
 8008234:	690c      	ldr	r4, [r1, #16]
 8008236:	42a3      	cmp	r3, r4
 8008238:	4607      	mov	r7, r0
 800823a:	db7e      	blt.n	800833a <quorem+0x10c>
 800823c:	3c01      	subs	r4, #1
 800823e:	f101 0814 	add.w	r8, r1, #20
 8008242:	00a3      	lsls	r3, r4, #2
 8008244:	f100 0514 	add.w	r5, r0, #20
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008254:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008258:	3301      	adds	r3, #1
 800825a:	429a      	cmp	r2, r3
 800825c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008260:	fbb2 f6f3 	udiv	r6, r2, r3
 8008264:	d32e      	bcc.n	80082c4 <quorem+0x96>
 8008266:	f04f 0a00 	mov.w	sl, #0
 800826a:	46c4      	mov	ip, r8
 800826c:	46ae      	mov	lr, r5
 800826e:	46d3      	mov	fp, sl
 8008270:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008274:	b298      	uxth	r0, r3
 8008276:	fb06 a000 	mla	r0, r6, r0, sl
 800827a:	0c02      	lsrs	r2, r0, #16
 800827c:	0c1b      	lsrs	r3, r3, #16
 800827e:	fb06 2303 	mla	r3, r6, r3, r2
 8008282:	f8de 2000 	ldr.w	r2, [lr]
 8008286:	b280      	uxth	r0, r0
 8008288:	b292      	uxth	r2, r2
 800828a:	1a12      	subs	r2, r2, r0
 800828c:	445a      	add	r2, fp
 800828e:	f8de 0000 	ldr.w	r0, [lr]
 8008292:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008296:	b29b      	uxth	r3, r3
 8008298:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800829c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80082a0:	b292      	uxth	r2, r2
 80082a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80082a6:	45e1      	cmp	r9, ip
 80082a8:	f84e 2b04 	str.w	r2, [lr], #4
 80082ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082b0:	d2de      	bcs.n	8008270 <quorem+0x42>
 80082b2:	9b00      	ldr	r3, [sp, #0]
 80082b4:	58eb      	ldr	r3, [r5, r3]
 80082b6:	b92b      	cbnz	r3, 80082c4 <quorem+0x96>
 80082b8:	9b01      	ldr	r3, [sp, #4]
 80082ba:	3b04      	subs	r3, #4
 80082bc:	429d      	cmp	r5, r3
 80082be:	461a      	mov	r2, r3
 80082c0:	d32f      	bcc.n	8008322 <quorem+0xf4>
 80082c2:	613c      	str	r4, [r7, #16]
 80082c4:	4638      	mov	r0, r7
 80082c6:	f001 f979 	bl	80095bc <__mcmp>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	db25      	blt.n	800831a <quorem+0xec>
 80082ce:	4629      	mov	r1, r5
 80082d0:	2000      	movs	r0, #0
 80082d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80082d6:	f8d1 c000 	ldr.w	ip, [r1]
 80082da:	fa1f fe82 	uxth.w	lr, r2
 80082de:	fa1f f38c 	uxth.w	r3, ip
 80082e2:	eba3 030e 	sub.w	r3, r3, lr
 80082e6:	4403      	add	r3, r0
 80082e8:	0c12      	lsrs	r2, r2, #16
 80082ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80082ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082f8:	45c1      	cmp	r9, r8
 80082fa:	f841 3b04 	str.w	r3, [r1], #4
 80082fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008302:	d2e6      	bcs.n	80082d2 <quorem+0xa4>
 8008304:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008308:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800830c:	b922      	cbnz	r2, 8008318 <quorem+0xea>
 800830e:	3b04      	subs	r3, #4
 8008310:	429d      	cmp	r5, r3
 8008312:	461a      	mov	r2, r3
 8008314:	d30b      	bcc.n	800832e <quorem+0x100>
 8008316:	613c      	str	r4, [r7, #16]
 8008318:	3601      	adds	r6, #1
 800831a:	4630      	mov	r0, r6
 800831c:	b003      	add	sp, #12
 800831e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008322:	6812      	ldr	r2, [r2, #0]
 8008324:	3b04      	subs	r3, #4
 8008326:	2a00      	cmp	r2, #0
 8008328:	d1cb      	bne.n	80082c2 <quorem+0x94>
 800832a:	3c01      	subs	r4, #1
 800832c:	e7c6      	b.n	80082bc <quorem+0x8e>
 800832e:	6812      	ldr	r2, [r2, #0]
 8008330:	3b04      	subs	r3, #4
 8008332:	2a00      	cmp	r2, #0
 8008334:	d1ef      	bne.n	8008316 <quorem+0xe8>
 8008336:	3c01      	subs	r4, #1
 8008338:	e7ea      	b.n	8008310 <quorem+0xe2>
 800833a:	2000      	movs	r0, #0
 800833c:	e7ee      	b.n	800831c <quorem+0xee>
	...

08008340 <_dtoa_r>:
 8008340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008344:	69c7      	ldr	r7, [r0, #28]
 8008346:	b099      	sub	sp, #100	@ 0x64
 8008348:	ed8d 0b02 	vstr	d0, [sp, #8]
 800834c:	ec55 4b10 	vmov	r4, r5, d0
 8008350:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008352:	9109      	str	r1, [sp, #36]	@ 0x24
 8008354:	4683      	mov	fp, r0
 8008356:	920e      	str	r2, [sp, #56]	@ 0x38
 8008358:	9313      	str	r3, [sp, #76]	@ 0x4c
 800835a:	b97f      	cbnz	r7, 800837c <_dtoa_r+0x3c>
 800835c:	2010      	movs	r0, #16
 800835e:	f000 fdfd 	bl	8008f5c <malloc>
 8008362:	4602      	mov	r2, r0
 8008364:	f8cb 001c 	str.w	r0, [fp, #28]
 8008368:	b920      	cbnz	r0, 8008374 <_dtoa_r+0x34>
 800836a:	4ba7      	ldr	r3, [pc, #668]	@ (8008608 <_dtoa_r+0x2c8>)
 800836c:	21ef      	movs	r1, #239	@ 0xef
 800836e:	48a7      	ldr	r0, [pc, #668]	@ (800860c <_dtoa_r+0x2cc>)
 8008370:	f001 fc5a 	bl	8009c28 <__assert_func>
 8008374:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008378:	6007      	str	r7, [r0, #0]
 800837a:	60c7      	str	r7, [r0, #12]
 800837c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	b159      	cbz	r1, 800839c <_dtoa_r+0x5c>
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	604a      	str	r2, [r1, #4]
 8008388:	2301      	movs	r3, #1
 800838a:	4093      	lsls	r3, r2
 800838c:	608b      	str	r3, [r1, #8]
 800838e:	4658      	mov	r0, fp
 8008390:	f000 feda 	bl	8009148 <_Bfree>
 8008394:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	1e2b      	subs	r3, r5, #0
 800839e:	bfb9      	ittee	lt
 80083a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80083a4:	9303      	strlt	r3, [sp, #12]
 80083a6:	2300      	movge	r3, #0
 80083a8:	6033      	strge	r3, [r6, #0]
 80083aa:	9f03      	ldr	r7, [sp, #12]
 80083ac:	4b98      	ldr	r3, [pc, #608]	@ (8008610 <_dtoa_r+0x2d0>)
 80083ae:	bfbc      	itt	lt
 80083b0:	2201      	movlt	r2, #1
 80083b2:	6032      	strlt	r2, [r6, #0]
 80083b4:	43bb      	bics	r3, r7
 80083b6:	d112      	bne.n	80083de <_dtoa_r+0x9e>
 80083b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80083be:	6013      	str	r3, [r2, #0]
 80083c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083c4:	4323      	orrs	r3, r4
 80083c6:	f000 854d 	beq.w	8008e64 <_dtoa_r+0xb24>
 80083ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008624 <_dtoa_r+0x2e4>
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 854f 	beq.w	8008e74 <_dtoa_r+0xb34>
 80083d6:	f10a 0303 	add.w	r3, sl, #3
 80083da:	f000 bd49 	b.w	8008e70 <_dtoa_r+0xb30>
 80083de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083e2:	2200      	movs	r2, #0
 80083e4:	ec51 0b17 	vmov	r0, r1, d7
 80083e8:	2300      	movs	r3, #0
 80083ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80083ee:	f7f8 fb83 	bl	8000af8 <__aeabi_dcmpeq>
 80083f2:	4680      	mov	r8, r0
 80083f4:	b158      	cbz	r0, 800840e <_dtoa_r+0xce>
 80083f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083f8:	2301      	movs	r3, #1
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083fe:	b113      	cbz	r3, 8008406 <_dtoa_r+0xc6>
 8008400:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008402:	4b84      	ldr	r3, [pc, #528]	@ (8008614 <_dtoa_r+0x2d4>)
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008628 <_dtoa_r+0x2e8>
 800840a:	f000 bd33 	b.w	8008e74 <_dtoa_r+0xb34>
 800840e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008412:	aa16      	add	r2, sp, #88	@ 0x58
 8008414:	a917      	add	r1, sp, #92	@ 0x5c
 8008416:	4658      	mov	r0, fp
 8008418:	f001 f980 	bl	800971c <__d2b>
 800841c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008420:	4681      	mov	r9, r0
 8008422:	2e00      	cmp	r6, #0
 8008424:	d077      	beq.n	8008516 <_dtoa_r+0x1d6>
 8008426:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008428:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800842c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008434:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008438:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800843c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008440:	4619      	mov	r1, r3
 8008442:	2200      	movs	r2, #0
 8008444:	4b74      	ldr	r3, [pc, #464]	@ (8008618 <_dtoa_r+0x2d8>)
 8008446:	f7f7 ff37 	bl	80002b8 <__aeabi_dsub>
 800844a:	a369      	add	r3, pc, #420	@ (adr r3, 80085f0 <_dtoa_r+0x2b0>)
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	f7f8 f8ea 	bl	8000628 <__aeabi_dmul>
 8008454:	a368      	add	r3, pc, #416	@ (adr r3, 80085f8 <_dtoa_r+0x2b8>)
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	f7f7 ff2f 	bl	80002bc <__adddf3>
 800845e:	4604      	mov	r4, r0
 8008460:	4630      	mov	r0, r6
 8008462:	460d      	mov	r5, r1
 8008464:	f7f8 f876 	bl	8000554 <__aeabi_i2d>
 8008468:	a365      	add	r3, pc, #404	@ (adr r3, 8008600 <_dtoa_r+0x2c0>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	f7f8 f8db 	bl	8000628 <__aeabi_dmul>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4620      	mov	r0, r4
 8008478:	4629      	mov	r1, r5
 800847a:	f7f7 ff1f 	bl	80002bc <__adddf3>
 800847e:	4604      	mov	r4, r0
 8008480:	460d      	mov	r5, r1
 8008482:	f7f8 fb81 	bl	8000b88 <__aeabi_d2iz>
 8008486:	2200      	movs	r2, #0
 8008488:	4607      	mov	r7, r0
 800848a:	2300      	movs	r3, #0
 800848c:	4620      	mov	r0, r4
 800848e:	4629      	mov	r1, r5
 8008490:	f7f8 fb3c 	bl	8000b0c <__aeabi_dcmplt>
 8008494:	b140      	cbz	r0, 80084a8 <_dtoa_r+0x168>
 8008496:	4638      	mov	r0, r7
 8008498:	f7f8 f85c 	bl	8000554 <__aeabi_i2d>
 800849c:	4622      	mov	r2, r4
 800849e:	462b      	mov	r3, r5
 80084a0:	f7f8 fb2a 	bl	8000af8 <__aeabi_dcmpeq>
 80084a4:	b900      	cbnz	r0, 80084a8 <_dtoa_r+0x168>
 80084a6:	3f01      	subs	r7, #1
 80084a8:	2f16      	cmp	r7, #22
 80084aa:	d851      	bhi.n	8008550 <_dtoa_r+0x210>
 80084ac:	4b5b      	ldr	r3, [pc, #364]	@ (800861c <_dtoa_r+0x2dc>)
 80084ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084ba:	f7f8 fb27 	bl	8000b0c <__aeabi_dcmplt>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d048      	beq.n	8008554 <_dtoa_r+0x214>
 80084c2:	3f01      	subs	r7, #1
 80084c4:	2300      	movs	r3, #0
 80084c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80084c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80084ca:	1b9b      	subs	r3, r3, r6
 80084cc:	1e5a      	subs	r2, r3, #1
 80084ce:	bf44      	itt	mi
 80084d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80084d4:	2300      	movmi	r3, #0
 80084d6:	9208      	str	r2, [sp, #32]
 80084d8:	bf54      	ite	pl
 80084da:	f04f 0800 	movpl.w	r8, #0
 80084de:	9308      	strmi	r3, [sp, #32]
 80084e0:	2f00      	cmp	r7, #0
 80084e2:	db39      	blt.n	8008558 <_dtoa_r+0x218>
 80084e4:	9b08      	ldr	r3, [sp, #32]
 80084e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80084e8:	443b      	add	r3, r7
 80084ea:	9308      	str	r3, [sp, #32]
 80084ec:	2300      	movs	r3, #0
 80084ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80084f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f2:	2b09      	cmp	r3, #9
 80084f4:	d864      	bhi.n	80085c0 <_dtoa_r+0x280>
 80084f6:	2b05      	cmp	r3, #5
 80084f8:	bfc4      	itt	gt
 80084fa:	3b04      	subgt	r3, #4
 80084fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80084fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008500:	f1a3 0302 	sub.w	r3, r3, #2
 8008504:	bfcc      	ite	gt
 8008506:	2400      	movgt	r4, #0
 8008508:	2401      	movle	r4, #1
 800850a:	2b03      	cmp	r3, #3
 800850c:	d863      	bhi.n	80085d6 <_dtoa_r+0x296>
 800850e:	e8df f003 	tbb	[pc, r3]
 8008512:	372a      	.short	0x372a
 8008514:	5535      	.short	0x5535
 8008516:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800851a:	441e      	add	r6, r3
 800851c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008520:	2b20      	cmp	r3, #32
 8008522:	bfc1      	itttt	gt
 8008524:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008528:	409f      	lslgt	r7, r3
 800852a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800852e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008532:	bfd6      	itet	le
 8008534:	f1c3 0320 	rsble	r3, r3, #32
 8008538:	ea47 0003 	orrgt.w	r0, r7, r3
 800853c:	fa04 f003 	lslle.w	r0, r4, r3
 8008540:	f7f7 fff8 	bl	8000534 <__aeabi_ui2d>
 8008544:	2201      	movs	r2, #1
 8008546:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800854a:	3e01      	subs	r6, #1
 800854c:	9214      	str	r2, [sp, #80]	@ 0x50
 800854e:	e777      	b.n	8008440 <_dtoa_r+0x100>
 8008550:	2301      	movs	r3, #1
 8008552:	e7b8      	b.n	80084c6 <_dtoa_r+0x186>
 8008554:	9012      	str	r0, [sp, #72]	@ 0x48
 8008556:	e7b7      	b.n	80084c8 <_dtoa_r+0x188>
 8008558:	427b      	negs	r3, r7
 800855a:	930a      	str	r3, [sp, #40]	@ 0x28
 800855c:	2300      	movs	r3, #0
 800855e:	eba8 0807 	sub.w	r8, r8, r7
 8008562:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008564:	e7c4      	b.n	80084f0 <_dtoa_r+0x1b0>
 8008566:	2300      	movs	r3, #0
 8008568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800856a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800856c:	2b00      	cmp	r3, #0
 800856e:	dc35      	bgt.n	80085dc <_dtoa_r+0x29c>
 8008570:	2301      	movs	r3, #1
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	9307      	str	r3, [sp, #28]
 8008576:	461a      	mov	r2, r3
 8008578:	920e      	str	r2, [sp, #56]	@ 0x38
 800857a:	e00b      	b.n	8008594 <_dtoa_r+0x254>
 800857c:	2301      	movs	r3, #1
 800857e:	e7f3      	b.n	8008568 <_dtoa_r+0x228>
 8008580:	2300      	movs	r3, #0
 8008582:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008586:	18fb      	adds	r3, r7, r3
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	3301      	adds	r3, #1
 800858c:	2b01      	cmp	r3, #1
 800858e:	9307      	str	r3, [sp, #28]
 8008590:	bfb8      	it	lt
 8008592:	2301      	movlt	r3, #1
 8008594:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008598:	2100      	movs	r1, #0
 800859a:	2204      	movs	r2, #4
 800859c:	f102 0514 	add.w	r5, r2, #20
 80085a0:	429d      	cmp	r5, r3
 80085a2:	d91f      	bls.n	80085e4 <_dtoa_r+0x2a4>
 80085a4:	6041      	str	r1, [r0, #4]
 80085a6:	4658      	mov	r0, fp
 80085a8:	f000 fd8e 	bl	80090c8 <_Balloc>
 80085ac:	4682      	mov	sl, r0
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d13c      	bne.n	800862c <_dtoa_r+0x2ec>
 80085b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008620 <_dtoa_r+0x2e0>)
 80085b4:	4602      	mov	r2, r0
 80085b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80085ba:	e6d8      	b.n	800836e <_dtoa_r+0x2e>
 80085bc:	2301      	movs	r3, #1
 80085be:	e7e0      	b.n	8008582 <_dtoa_r+0x242>
 80085c0:	2401      	movs	r4, #1
 80085c2:	2300      	movs	r3, #0
 80085c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80085c8:	f04f 33ff 	mov.w	r3, #4294967295
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	9307      	str	r3, [sp, #28]
 80085d0:	2200      	movs	r2, #0
 80085d2:	2312      	movs	r3, #18
 80085d4:	e7d0      	b.n	8008578 <_dtoa_r+0x238>
 80085d6:	2301      	movs	r3, #1
 80085d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085da:	e7f5      	b.n	80085c8 <_dtoa_r+0x288>
 80085dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	9307      	str	r3, [sp, #28]
 80085e2:	e7d7      	b.n	8008594 <_dtoa_r+0x254>
 80085e4:	3101      	adds	r1, #1
 80085e6:	0052      	lsls	r2, r2, #1
 80085e8:	e7d8      	b.n	800859c <_dtoa_r+0x25c>
 80085ea:	bf00      	nop
 80085ec:	f3af 8000 	nop.w
 80085f0:	636f4361 	.word	0x636f4361
 80085f4:	3fd287a7 	.word	0x3fd287a7
 80085f8:	8b60c8b3 	.word	0x8b60c8b3
 80085fc:	3fc68a28 	.word	0x3fc68a28
 8008600:	509f79fb 	.word	0x509f79fb
 8008604:	3fd34413 	.word	0x3fd34413
 8008608:	0800abc9 	.word	0x0800abc9
 800860c:	0800abe0 	.word	0x0800abe0
 8008610:	7ff00000 	.word	0x7ff00000
 8008614:	0800ab99 	.word	0x0800ab99
 8008618:	3ff80000 	.word	0x3ff80000
 800861c:	0800acd8 	.word	0x0800acd8
 8008620:	0800ac38 	.word	0x0800ac38
 8008624:	0800abc5 	.word	0x0800abc5
 8008628:	0800ab98 	.word	0x0800ab98
 800862c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008630:	6018      	str	r0, [r3, #0]
 8008632:	9b07      	ldr	r3, [sp, #28]
 8008634:	2b0e      	cmp	r3, #14
 8008636:	f200 80a4 	bhi.w	8008782 <_dtoa_r+0x442>
 800863a:	2c00      	cmp	r4, #0
 800863c:	f000 80a1 	beq.w	8008782 <_dtoa_r+0x442>
 8008640:	2f00      	cmp	r7, #0
 8008642:	dd33      	ble.n	80086ac <_dtoa_r+0x36c>
 8008644:	4bad      	ldr	r3, [pc, #692]	@ (80088fc <_dtoa_r+0x5bc>)
 8008646:	f007 020f 	and.w	r2, r7, #15
 800864a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800864e:	ed93 7b00 	vldr	d7, [r3]
 8008652:	05f8      	lsls	r0, r7, #23
 8008654:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008658:	ea4f 1427 	mov.w	r4, r7, asr #4
 800865c:	d516      	bpl.n	800868c <_dtoa_r+0x34c>
 800865e:	4ba8      	ldr	r3, [pc, #672]	@ (8008900 <_dtoa_r+0x5c0>)
 8008660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008664:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008668:	f7f8 f908 	bl	800087c <__aeabi_ddiv>
 800866c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008670:	f004 040f 	and.w	r4, r4, #15
 8008674:	2603      	movs	r6, #3
 8008676:	4da2      	ldr	r5, [pc, #648]	@ (8008900 <_dtoa_r+0x5c0>)
 8008678:	b954      	cbnz	r4, 8008690 <_dtoa_r+0x350>
 800867a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800867e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008682:	f7f8 f8fb 	bl	800087c <__aeabi_ddiv>
 8008686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800868a:	e028      	b.n	80086de <_dtoa_r+0x39e>
 800868c:	2602      	movs	r6, #2
 800868e:	e7f2      	b.n	8008676 <_dtoa_r+0x336>
 8008690:	07e1      	lsls	r1, r4, #31
 8008692:	d508      	bpl.n	80086a6 <_dtoa_r+0x366>
 8008694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008698:	e9d5 2300 	ldrd	r2, r3, [r5]
 800869c:	f7f7 ffc4 	bl	8000628 <__aeabi_dmul>
 80086a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086a4:	3601      	adds	r6, #1
 80086a6:	1064      	asrs	r4, r4, #1
 80086a8:	3508      	adds	r5, #8
 80086aa:	e7e5      	b.n	8008678 <_dtoa_r+0x338>
 80086ac:	f000 80d2 	beq.w	8008854 <_dtoa_r+0x514>
 80086b0:	427c      	negs	r4, r7
 80086b2:	4b92      	ldr	r3, [pc, #584]	@ (80088fc <_dtoa_r+0x5bc>)
 80086b4:	4d92      	ldr	r5, [pc, #584]	@ (8008900 <_dtoa_r+0x5c0>)
 80086b6:	f004 020f 	and.w	r2, r4, #15
 80086ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086c6:	f7f7 ffaf 	bl	8000628 <__aeabi_dmul>
 80086ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ce:	1124      	asrs	r4, r4, #4
 80086d0:	2300      	movs	r3, #0
 80086d2:	2602      	movs	r6, #2
 80086d4:	2c00      	cmp	r4, #0
 80086d6:	f040 80b2 	bne.w	800883e <_dtoa_r+0x4fe>
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1d3      	bne.n	8008686 <_dtoa_r+0x346>
 80086de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 80b7 	beq.w	8008858 <_dtoa_r+0x518>
 80086ea:	4b86      	ldr	r3, [pc, #536]	@ (8008904 <_dtoa_r+0x5c4>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	4620      	mov	r0, r4
 80086f0:	4629      	mov	r1, r5
 80086f2:	f7f8 fa0b 	bl	8000b0c <__aeabi_dcmplt>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	f000 80ae 	beq.w	8008858 <_dtoa_r+0x518>
 80086fc:	9b07      	ldr	r3, [sp, #28]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 80aa 	beq.w	8008858 <_dtoa_r+0x518>
 8008704:	9b00      	ldr	r3, [sp, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	dd37      	ble.n	800877a <_dtoa_r+0x43a>
 800870a:	1e7b      	subs	r3, r7, #1
 800870c:	9304      	str	r3, [sp, #16]
 800870e:	4620      	mov	r0, r4
 8008710:	4b7d      	ldr	r3, [pc, #500]	@ (8008908 <_dtoa_r+0x5c8>)
 8008712:	2200      	movs	r2, #0
 8008714:	4629      	mov	r1, r5
 8008716:	f7f7 ff87 	bl	8000628 <__aeabi_dmul>
 800871a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800871e:	9c00      	ldr	r4, [sp, #0]
 8008720:	3601      	adds	r6, #1
 8008722:	4630      	mov	r0, r6
 8008724:	f7f7 ff16 	bl	8000554 <__aeabi_i2d>
 8008728:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800872c:	f7f7 ff7c 	bl	8000628 <__aeabi_dmul>
 8008730:	4b76      	ldr	r3, [pc, #472]	@ (800890c <_dtoa_r+0x5cc>)
 8008732:	2200      	movs	r2, #0
 8008734:	f7f7 fdc2 	bl	80002bc <__adddf3>
 8008738:	4605      	mov	r5, r0
 800873a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800873e:	2c00      	cmp	r4, #0
 8008740:	f040 808d 	bne.w	800885e <_dtoa_r+0x51e>
 8008744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008748:	4b71      	ldr	r3, [pc, #452]	@ (8008910 <_dtoa_r+0x5d0>)
 800874a:	2200      	movs	r2, #0
 800874c:	f7f7 fdb4 	bl	80002b8 <__aeabi_dsub>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008758:	462a      	mov	r2, r5
 800875a:	4633      	mov	r3, r6
 800875c:	f7f8 f9f4 	bl	8000b48 <__aeabi_dcmpgt>
 8008760:	2800      	cmp	r0, #0
 8008762:	f040 828b 	bne.w	8008c7c <_dtoa_r+0x93c>
 8008766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800876a:	462a      	mov	r2, r5
 800876c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008770:	f7f8 f9cc 	bl	8000b0c <__aeabi_dcmplt>
 8008774:	2800      	cmp	r0, #0
 8008776:	f040 8128 	bne.w	80089ca <_dtoa_r+0x68a>
 800877a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800877e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008782:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008784:	2b00      	cmp	r3, #0
 8008786:	f2c0 815a 	blt.w	8008a3e <_dtoa_r+0x6fe>
 800878a:	2f0e      	cmp	r7, #14
 800878c:	f300 8157 	bgt.w	8008a3e <_dtoa_r+0x6fe>
 8008790:	4b5a      	ldr	r3, [pc, #360]	@ (80088fc <_dtoa_r+0x5bc>)
 8008792:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008796:	ed93 7b00 	vldr	d7, [r3]
 800879a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800879c:	2b00      	cmp	r3, #0
 800879e:	ed8d 7b00 	vstr	d7, [sp]
 80087a2:	da03      	bge.n	80087ac <_dtoa_r+0x46c>
 80087a4:	9b07      	ldr	r3, [sp, #28]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f340 8101 	ble.w	80089ae <_dtoa_r+0x66e>
 80087ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087b0:	4656      	mov	r6, sl
 80087b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087b6:	4620      	mov	r0, r4
 80087b8:	4629      	mov	r1, r5
 80087ba:	f7f8 f85f 	bl	800087c <__aeabi_ddiv>
 80087be:	f7f8 f9e3 	bl	8000b88 <__aeabi_d2iz>
 80087c2:	4680      	mov	r8, r0
 80087c4:	f7f7 fec6 	bl	8000554 <__aeabi_i2d>
 80087c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087cc:	f7f7 ff2c 	bl	8000628 <__aeabi_dmul>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	4620      	mov	r0, r4
 80087d6:	4629      	mov	r1, r5
 80087d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80087dc:	f7f7 fd6c 	bl	80002b8 <__aeabi_dsub>
 80087e0:	f806 4b01 	strb.w	r4, [r6], #1
 80087e4:	9d07      	ldr	r5, [sp, #28]
 80087e6:	eba6 040a 	sub.w	r4, r6, sl
 80087ea:	42a5      	cmp	r5, r4
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	f040 8117 	bne.w	8008a22 <_dtoa_r+0x6e2>
 80087f4:	f7f7 fd62 	bl	80002bc <__adddf3>
 80087f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087fc:	4604      	mov	r4, r0
 80087fe:	460d      	mov	r5, r1
 8008800:	f7f8 f9a2 	bl	8000b48 <__aeabi_dcmpgt>
 8008804:	2800      	cmp	r0, #0
 8008806:	f040 80f9 	bne.w	80089fc <_dtoa_r+0x6bc>
 800880a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800880e:	4620      	mov	r0, r4
 8008810:	4629      	mov	r1, r5
 8008812:	f7f8 f971 	bl	8000af8 <__aeabi_dcmpeq>
 8008816:	b118      	cbz	r0, 8008820 <_dtoa_r+0x4e0>
 8008818:	f018 0f01 	tst.w	r8, #1
 800881c:	f040 80ee 	bne.w	80089fc <_dtoa_r+0x6bc>
 8008820:	4649      	mov	r1, r9
 8008822:	4658      	mov	r0, fp
 8008824:	f000 fc90 	bl	8009148 <_Bfree>
 8008828:	2300      	movs	r3, #0
 800882a:	7033      	strb	r3, [r6, #0]
 800882c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800882e:	3701      	adds	r7, #1
 8008830:	601f      	str	r7, [r3, #0]
 8008832:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 831d 	beq.w	8008e74 <_dtoa_r+0xb34>
 800883a:	601e      	str	r6, [r3, #0]
 800883c:	e31a      	b.n	8008e74 <_dtoa_r+0xb34>
 800883e:	07e2      	lsls	r2, r4, #31
 8008840:	d505      	bpl.n	800884e <_dtoa_r+0x50e>
 8008842:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008846:	f7f7 feef 	bl	8000628 <__aeabi_dmul>
 800884a:	3601      	adds	r6, #1
 800884c:	2301      	movs	r3, #1
 800884e:	1064      	asrs	r4, r4, #1
 8008850:	3508      	adds	r5, #8
 8008852:	e73f      	b.n	80086d4 <_dtoa_r+0x394>
 8008854:	2602      	movs	r6, #2
 8008856:	e742      	b.n	80086de <_dtoa_r+0x39e>
 8008858:	9c07      	ldr	r4, [sp, #28]
 800885a:	9704      	str	r7, [sp, #16]
 800885c:	e761      	b.n	8008722 <_dtoa_r+0x3e2>
 800885e:	4b27      	ldr	r3, [pc, #156]	@ (80088fc <_dtoa_r+0x5bc>)
 8008860:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008862:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008866:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800886a:	4454      	add	r4, sl
 800886c:	2900      	cmp	r1, #0
 800886e:	d053      	beq.n	8008918 <_dtoa_r+0x5d8>
 8008870:	4928      	ldr	r1, [pc, #160]	@ (8008914 <_dtoa_r+0x5d4>)
 8008872:	2000      	movs	r0, #0
 8008874:	f7f8 f802 	bl	800087c <__aeabi_ddiv>
 8008878:	4633      	mov	r3, r6
 800887a:	462a      	mov	r2, r5
 800887c:	f7f7 fd1c 	bl	80002b8 <__aeabi_dsub>
 8008880:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008884:	4656      	mov	r6, sl
 8008886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800888a:	f7f8 f97d 	bl	8000b88 <__aeabi_d2iz>
 800888e:	4605      	mov	r5, r0
 8008890:	f7f7 fe60 	bl	8000554 <__aeabi_i2d>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800889c:	f7f7 fd0c 	bl	80002b8 <__aeabi_dsub>
 80088a0:	3530      	adds	r5, #48	@ 0x30
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088aa:	f806 5b01 	strb.w	r5, [r6], #1
 80088ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088b2:	f7f8 f92b 	bl	8000b0c <__aeabi_dcmplt>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d171      	bne.n	800899e <_dtoa_r+0x65e>
 80088ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088be:	4911      	ldr	r1, [pc, #68]	@ (8008904 <_dtoa_r+0x5c4>)
 80088c0:	2000      	movs	r0, #0
 80088c2:	f7f7 fcf9 	bl	80002b8 <__aeabi_dsub>
 80088c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088ca:	f7f8 f91f 	bl	8000b0c <__aeabi_dcmplt>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	f040 8095 	bne.w	80089fe <_dtoa_r+0x6be>
 80088d4:	42a6      	cmp	r6, r4
 80088d6:	f43f af50 	beq.w	800877a <_dtoa_r+0x43a>
 80088da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80088de:	4b0a      	ldr	r3, [pc, #40]	@ (8008908 <_dtoa_r+0x5c8>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	f7f7 fea1 	bl	8000628 <__aeabi_dmul>
 80088e6:	4b08      	ldr	r3, [pc, #32]	@ (8008908 <_dtoa_r+0x5c8>)
 80088e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088ec:	2200      	movs	r2, #0
 80088ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088f2:	f7f7 fe99 	bl	8000628 <__aeabi_dmul>
 80088f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088fa:	e7c4      	b.n	8008886 <_dtoa_r+0x546>
 80088fc:	0800acd8 	.word	0x0800acd8
 8008900:	0800acb0 	.word	0x0800acb0
 8008904:	3ff00000 	.word	0x3ff00000
 8008908:	40240000 	.word	0x40240000
 800890c:	401c0000 	.word	0x401c0000
 8008910:	40140000 	.word	0x40140000
 8008914:	3fe00000 	.word	0x3fe00000
 8008918:	4631      	mov	r1, r6
 800891a:	4628      	mov	r0, r5
 800891c:	f7f7 fe84 	bl	8000628 <__aeabi_dmul>
 8008920:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008924:	9415      	str	r4, [sp, #84]	@ 0x54
 8008926:	4656      	mov	r6, sl
 8008928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800892c:	f7f8 f92c 	bl	8000b88 <__aeabi_d2iz>
 8008930:	4605      	mov	r5, r0
 8008932:	f7f7 fe0f 	bl	8000554 <__aeabi_i2d>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800893e:	f7f7 fcbb 	bl	80002b8 <__aeabi_dsub>
 8008942:	3530      	adds	r5, #48	@ 0x30
 8008944:	f806 5b01 	strb.w	r5, [r6], #1
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	42a6      	cmp	r6, r4
 800894e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008952:	f04f 0200 	mov.w	r2, #0
 8008956:	d124      	bne.n	80089a2 <_dtoa_r+0x662>
 8008958:	4bac      	ldr	r3, [pc, #688]	@ (8008c0c <_dtoa_r+0x8cc>)
 800895a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800895e:	f7f7 fcad 	bl	80002bc <__adddf3>
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800896a:	f7f8 f8ed 	bl	8000b48 <__aeabi_dcmpgt>
 800896e:	2800      	cmp	r0, #0
 8008970:	d145      	bne.n	80089fe <_dtoa_r+0x6be>
 8008972:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008976:	49a5      	ldr	r1, [pc, #660]	@ (8008c0c <_dtoa_r+0x8cc>)
 8008978:	2000      	movs	r0, #0
 800897a:	f7f7 fc9d 	bl	80002b8 <__aeabi_dsub>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008986:	f7f8 f8c1 	bl	8000b0c <__aeabi_dcmplt>
 800898a:	2800      	cmp	r0, #0
 800898c:	f43f aef5 	beq.w	800877a <_dtoa_r+0x43a>
 8008990:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008992:	1e73      	subs	r3, r6, #1
 8008994:	9315      	str	r3, [sp, #84]	@ 0x54
 8008996:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800899a:	2b30      	cmp	r3, #48	@ 0x30
 800899c:	d0f8      	beq.n	8008990 <_dtoa_r+0x650>
 800899e:	9f04      	ldr	r7, [sp, #16]
 80089a0:	e73e      	b.n	8008820 <_dtoa_r+0x4e0>
 80089a2:	4b9b      	ldr	r3, [pc, #620]	@ (8008c10 <_dtoa_r+0x8d0>)
 80089a4:	f7f7 fe40 	bl	8000628 <__aeabi_dmul>
 80089a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ac:	e7bc      	b.n	8008928 <_dtoa_r+0x5e8>
 80089ae:	d10c      	bne.n	80089ca <_dtoa_r+0x68a>
 80089b0:	4b98      	ldr	r3, [pc, #608]	@ (8008c14 <_dtoa_r+0x8d4>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089b8:	f7f7 fe36 	bl	8000628 <__aeabi_dmul>
 80089bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089c0:	f7f8 f8b8 	bl	8000b34 <__aeabi_dcmpge>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	f000 8157 	beq.w	8008c78 <_dtoa_r+0x938>
 80089ca:	2400      	movs	r4, #0
 80089cc:	4625      	mov	r5, r4
 80089ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089d0:	43db      	mvns	r3, r3
 80089d2:	9304      	str	r3, [sp, #16]
 80089d4:	4656      	mov	r6, sl
 80089d6:	2700      	movs	r7, #0
 80089d8:	4621      	mov	r1, r4
 80089da:	4658      	mov	r0, fp
 80089dc:	f000 fbb4 	bl	8009148 <_Bfree>
 80089e0:	2d00      	cmp	r5, #0
 80089e2:	d0dc      	beq.n	800899e <_dtoa_r+0x65e>
 80089e4:	b12f      	cbz	r7, 80089f2 <_dtoa_r+0x6b2>
 80089e6:	42af      	cmp	r7, r5
 80089e8:	d003      	beq.n	80089f2 <_dtoa_r+0x6b2>
 80089ea:	4639      	mov	r1, r7
 80089ec:	4658      	mov	r0, fp
 80089ee:	f000 fbab 	bl	8009148 <_Bfree>
 80089f2:	4629      	mov	r1, r5
 80089f4:	4658      	mov	r0, fp
 80089f6:	f000 fba7 	bl	8009148 <_Bfree>
 80089fa:	e7d0      	b.n	800899e <_dtoa_r+0x65e>
 80089fc:	9704      	str	r7, [sp, #16]
 80089fe:	4633      	mov	r3, r6
 8008a00:	461e      	mov	r6, r3
 8008a02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a06:	2a39      	cmp	r2, #57	@ 0x39
 8008a08:	d107      	bne.n	8008a1a <_dtoa_r+0x6da>
 8008a0a:	459a      	cmp	sl, r3
 8008a0c:	d1f8      	bne.n	8008a00 <_dtoa_r+0x6c0>
 8008a0e:	9a04      	ldr	r2, [sp, #16]
 8008a10:	3201      	adds	r2, #1
 8008a12:	9204      	str	r2, [sp, #16]
 8008a14:	2230      	movs	r2, #48	@ 0x30
 8008a16:	f88a 2000 	strb.w	r2, [sl]
 8008a1a:	781a      	ldrb	r2, [r3, #0]
 8008a1c:	3201      	adds	r2, #1
 8008a1e:	701a      	strb	r2, [r3, #0]
 8008a20:	e7bd      	b.n	800899e <_dtoa_r+0x65e>
 8008a22:	4b7b      	ldr	r3, [pc, #492]	@ (8008c10 <_dtoa_r+0x8d0>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	f7f7 fdff 	bl	8000628 <__aeabi_dmul>
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4604      	mov	r4, r0
 8008a30:	460d      	mov	r5, r1
 8008a32:	f7f8 f861 	bl	8000af8 <__aeabi_dcmpeq>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	f43f aebb 	beq.w	80087b2 <_dtoa_r+0x472>
 8008a3c:	e6f0      	b.n	8008820 <_dtoa_r+0x4e0>
 8008a3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a40:	2a00      	cmp	r2, #0
 8008a42:	f000 80db 	beq.w	8008bfc <_dtoa_r+0x8bc>
 8008a46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a48:	2a01      	cmp	r2, #1
 8008a4a:	f300 80bf 	bgt.w	8008bcc <_dtoa_r+0x88c>
 8008a4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a50:	2a00      	cmp	r2, #0
 8008a52:	f000 80b7 	beq.w	8008bc4 <_dtoa_r+0x884>
 8008a56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a5c:	4646      	mov	r6, r8
 8008a5e:	9a08      	ldr	r2, [sp, #32]
 8008a60:	2101      	movs	r1, #1
 8008a62:	441a      	add	r2, r3
 8008a64:	4658      	mov	r0, fp
 8008a66:	4498      	add	r8, r3
 8008a68:	9208      	str	r2, [sp, #32]
 8008a6a:	f000 fc21 	bl	80092b0 <__i2b>
 8008a6e:	4605      	mov	r5, r0
 8008a70:	b15e      	cbz	r6, 8008a8a <_dtoa_r+0x74a>
 8008a72:	9b08      	ldr	r3, [sp, #32]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	dd08      	ble.n	8008a8a <_dtoa_r+0x74a>
 8008a78:	42b3      	cmp	r3, r6
 8008a7a:	9a08      	ldr	r2, [sp, #32]
 8008a7c:	bfa8      	it	ge
 8008a7e:	4633      	movge	r3, r6
 8008a80:	eba8 0803 	sub.w	r8, r8, r3
 8008a84:	1af6      	subs	r6, r6, r3
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	9308      	str	r3, [sp, #32]
 8008a8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a8c:	b1f3      	cbz	r3, 8008acc <_dtoa_r+0x78c>
 8008a8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f000 80b7 	beq.w	8008c04 <_dtoa_r+0x8c4>
 8008a96:	b18c      	cbz	r4, 8008abc <_dtoa_r+0x77c>
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4622      	mov	r2, r4
 8008a9c:	4658      	mov	r0, fp
 8008a9e:	f000 fcc7 	bl	8009430 <__pow5mult>
 8008aa2:	464a      	mov	r2, r9
 8008aa4:	4601      	mov	r1, r0
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	4658      	mov	r0, fp
 8008aaa:	f000 fc17 	bl	80092dc <__multiply>
 8008aae:	4649      	mov	r1, r9
 8008ab0:	9004      	str	r0, [sp, #16]
 8008ab2:	4658      	mov	r0, fp
 8008ab4:	f000 fb48 	bl	8009148 <_Bfree>
 8008ab8:	9b04      	ldr	r3, [sp, #16]
 8008aba:	4699      	mov	r9, r3
 8008abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008abe:	1b1a      	subs	r2, r3, r4
 8008ac0:	d004      	beq.n	8008acc <_dtoa_r+0x78c>
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	4658      	mov	r0, fp
 8008ac6:	f000 fcb3 	bl	8009430 <__pow5mult>
 8008aca:	4681      	mov	r9, r0
 8008acc:	2101      	movs	r1, #1
 8008ace:	4658      	mov	r0, fp
 8008ad0:	f000 fbee 	bl	80092b0 <__i2b>
 8008ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 81cf 	beq.w	8008e7c <_dtoa_r+0xb3c>
 8008ade:	461a      	mov	r2, r3
 8008ae0:	4601      	mov	r1, r0
 8008ae2:	4658      	mov	r0, fp
 8008ae4:	f000 fca4 	bl	8009430 <__pow5mult>
 8008ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	4604      	mov	r4, r0
 8008aee:	f300 8095 	bgt.w	8008c1c <_dtoa_r+0x8dc>
 8008af2:	9b02      	ldr	r3, [sp, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f040 8087 	bne.w	8008c08 <_dtoa_r+0x8c8>
 8008afa:	9b03      	ldr	r3, [sp, #12]
 8008afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f040 8089 	bne.w	8008c18 <_dtoa_r+0x8d8>
 8008b06:	9b03      	ldr	r3, [sp, #12]
 8008b08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b0c:	0d1b      	lsrs	r3, r3, #20
 8008b0e:	051b      	lsls	r3, r3, #20
 8008b10:	b12b      	cbz	r3, 8008b1e <_dtoa_r+0x7de>
 8008b12:	9b08      	ldr	r3, [sp, #32]
 8008b14:	3301      	adds	r3, #1
 8008b16:	9308      	str	r3, [sp, #32]
 8008b18:	f108 0801 	add.w	r8, r8, #1
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 81b0 	beq.w	8008e88 <_dtoa_r+0xb48>
 8008b28:	6923      	ldr	r3, [r4, #16]
 8008b2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b2e:	6918      	ldr	r0, [r3, #16]
 8008b30:	f000 fb72 	bl	8009218 <__hi0bits>
 8008b34:	f1c0 0020 	rsb	r0, r0, #32
 8008b38:	9b08      	ldr	r3, [sp, #32]
 8008b3a:	4418      	add	r0, r3
 8008b3c:	f010 001f 	ands.w	r0, r0, #31
 8008b40:	d077      	beq.n	8008c32 <_dtoa_r+0x8f2>
 8008b42:	f1c0 0320 	rsb	r3, r0, #32
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	dd6b      	ble.n	8008c22 <_dtoa_r+0x8e2>
 8008b4a:	9b08      	ldr	r3, [sp, #32]
 8008b4c:	f1c0 001c 	rsb	r0, r0, #28
 8008b50:	4403      	add	r3, r0
 8008b52:	4480      	add	r8, r0
 8008b54:	4406      	add	r6, r0
 8008b56:	9308      	str	r3, [sp, #32]
 8008b58:	f1b8 0f00 	cmp.w	r8, #0
 8008b5c:	dd05      	ble.n	8008b6a <_dtoa_r+0x82a>
 8008b5e:	4649      	mov	r1, r9
 8008b60:	4642      	mov	r2, r8
 8008b62:	4658      	mov	r0, fp
 8008b64:	f000 fcbe 	bl	80094e4 <__lshift>
 8008b68:	4681      	mov	r9, r0
 8008b6a:	9b08      	ldr	r3, [sp, #32]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dd05      	ble.n	8008b7c <_dtoa_r+0x83c>
 8008b70:	4621      	mov	r1, r4
 8008b72:	461a      	mov	r2, r3
 8008b74:	4658      	mov	r0, fp
 8008b76:	f000 fcb5 	bl	80094e4 <__lshift>
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d059      	beq.n	8008c36 <_dtoa_r+0x8f6>
 8008b82:	4621      	mov	r1, r4
 8008b84:	4648      	mov	r0, r9
 8008b86:	f000 fd19 	bl	80095bc <__mcmp>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	da53      	bge.n	8008c36 <_dtoa_r+0x8f6>
 8008b8e:	1e7b      	subs	r3, r7, #1
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	4649      	mov	r1, r9
 8008b94:	2300      	movs	r3, #0
 8008b96:	220a      	movs	r2, #10
 8008b98:	4658      	mov	r0, fp
 8008b9a:	f000 faf7 	bl	800918c <__multadd>
 8008b9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ba0:	4681      	mov	r9, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 8172 	beq.w	8008e8c <_dtoa_r+0xb4c>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4629      	mov	r1, r5
 8008bac:	220a      	movs	r2, #10
 8008bae:	4658      	mov	r0, fp
 8008bb0:	f000 faec 	bl	800918c <__multadd>
 8008bb4:	9b00      	ldr	r3, [sp, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	4605      	mov	r5, r0
 8008bba:	dc67      	bgt.n	8008c8c <_dtoa_r+0x94c>
 8008bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	dc41      	bgt.n	8008c46 <_dtoa_r+0x906>
 8008bc2:	e063      	b.n	8008c8c <_dtoa_r+0x94c>
 8008bc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008bc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008bca:	e746      	b.n	8008a5a <_dtoa_r+0x71a>
 8008bcc:	9b07      	ldr	r3, [sp, #28]
 8008bce:	1e5c      	subs	r4, r3, #1
 8008bd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bd2:	42a3      	cmp	r3, r4
 8008bd4:	bfbf      	itttt	lt
 8008bd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008bd8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008bda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008bdc:	1ae3      	sublt	r3, r4, r3
 8008bde:	bfb4      	ite	lt
 8008be0:	18d2      	addlt	r2, r2, r3
 8008be2:	1b1c      	subge	r4, r3, r4
 8008be4:	9b07      	ldr	r3, [sp, #28]
 8008be6:	bfbc      	itt	lt
 8008be8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008bea:	2400      	movlt	r4, #0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	bfb5      	itete	lt
 8008bf0:	eba8 0603 	sublt.w	r6, r8, r3
 8008bf4:	9b07      	ldrge	r3, [sp, #28]
 8008bf6:	2300      	movlt	r3, #0
 8008bf8:	4646      	movge	r6, r8
 8008bfa:	e730      	b.n	8008a5e <_dtoa_r+0x71e>
 8008bfc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bfe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008c00:	4646      	mov	r6, r8
 8008c02:	e735      	b.n	8008a70 <_dtoa_r+0x730>
 8008c04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c06:	e75c      	b.n	8008ac2 <_dtoa_r+0x782>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e788      	b.n	8008b1e <_dtoa_r+0x7de>
 8008c0c:	3fe00000 	.word	0x3fe00000
 8008c10:	40240000 	.word	0x40240000
 8008c14:	40140000 	.word	0x40140000
 8008c18:	9b02      	ldr	r3, [sp, #8]
 8008c1a:	e780      	b.n	8008b1e <_dtoa_r+0x7de>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c20:	e782      	b.n	8008b28 <_dtoa_r+0x7e8>
 8008c22:	d099      	beq.n	8008b58 <_dtoa_r+0x818>
 8008c24:	9a08      	ldr	r2, [sp, #32]
 8008c26:	331c      	adds	r3, #28
 8008c28:	441a      	add	r2, r3
 8008c2a:	4498      	add	r8, r3
 8008c2c:	441e      	add	r6, r3
 8008c2e:	9208      	str	r2, [sp, #32]
 8008c30:	e792      	b.n	8008b58 <_dtoa_r+0x818>
 8008c32:	4603      	mov	r3, r0
 8008c34:	e7f6      	b.n	8008c24 <_dtoa_r+0x8e4>
 8008c36:	9b07      	ldr	r3, [sp, #28]
 8008c38:	9704      	str	r7, [sp, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	dc20      	bgt.n	8008c80 <_dtoa_r+0x940>
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	dd1e      	ble.n	8008c84 <_dtoa_r+0x944>
 8008c46:	9b00      	ldr	r3, [sp, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f47f aec0 	bne.w	80089ce <_dtoa_r+0x68e>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	2205      	movs	r2, #5
 8008c52:	4658      	mov	r0, fp
 8008c54:	f000 fa9a 	bl	800918c <__multadd>
 8008c58:	4601      	mov	r1, r0
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4648      	mov	r0, r9
 8008c5e:	f000 fcad 	bl	80095bc <__mcmp>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	f77f aeb3 	ble.w	80089ce <_dtoa_r+0x68e>
 8008c68:	4656      	mov	r6, sl
 8008c6a:	2331      	movs	r3, #49	@ 0x31
 8008c6c:	f806 3b01 	strb.w	r3, [r6], #1
 8008c70:	9b04      	ldr	r3, [sp, #16]
 8008c72:	3301      	adds	r3, #1
 8008c74:	9304      	str	r3, [sp, #16]
 8008c76:	e6ae      	b.n	80089d6 <_dtoa_r+0x696>
 8008c78:	9c07      	ldr	r4, [sp, #28]
 8008c7a:	9704      	str	r7, [sp, #16]
 8008c7c:	4625      	mov	r5, r4
 8008c7e:	e7f3      	b.n	8008c68 <_dtoa_r+0x928>
 8008c80:	9b07      	ldr	r3, [sp, #28]
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 8104 	beq.w	8008e94 <_dtoa_r+0xb54>
 8008c8c:	2e00      	cmp	r6, #0
 8008c8e:	dd05      	ble.n	8008c9c <_dtoa_r+0x95c>
 8008c90:	4629      	mov	r1, r5
 8008c92:	4632      	mov	r2, r6
 8008c94:	4658      	mov	r0, fp
 8008c96:	f000 fc25 	bl	80094e4 <__lshift>
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d05a      	beq.n	8008d58 <_dtoa_r+0xa18>
 8008ca2:	6869      	ldr	r1, [r5, #4]
 8008ca4:	4658      	mov	r0, fp
 8008ca6:	f000 fa0f 	bl	80090c8 <_Balloc>
 8008caa:	4606      	mov	r6, r0
 8008cac:	b928      	cbnz	r0, 8008cba <_dtoa_r+0x97a>
 8008cae:	4b84      	ldr	r3, [pc, #528]	@ (8008ec0 <_dtoa_r+0xb80>)
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008cb6:	f7ff bb5a 	b.w	800836e <_dtoa_r+0x2e>
 8008cba:	692a      	ldr	r2, [r5, #16]
 8008cbc:	3202      	adds	r2, #2
 8008cbe:	0092      	lsls	r2, r2, #2
 8008cc0:	f105 010c 	add.w	r1, r5, #12
 8008cc4:	300c      	adds	r0, #12
 8008cc6:	f7ff faa4 	bl	8008212 <memcpy>
 8008cca:	2201      	movs	r2, #1
 8008ccc:	4631      	mov	r1, r6
 8008cce:	4658      	mov	r0, fp
 8008cd0:	f000 fc08 	bl	80094e4 <__lshift>
 8008cd4:	f10a 0301 	add.w	r3, sl, #1
 8008cd8:	9307      	str	r3, [sp, #28]
 8008cda:	9b00      	ldr	r3, [sp, #0]
 8008cdc:	4453      	add	r3, sl
 8008cde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ce0:	9b02      	ldr	r3, [sp, #8]
 8008ce2:	f003 0301 	and.w	r3, r3, #1
 8008ce6:	462f      	mov	r7, r5
 8008ce8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cea:	4605      	mov	r5, r0
 8008cec:	9b07      	ldr	r3, [sp, #28]
 8008cee:	4621      	mov	r1, r4
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	4648      	mov	r0, r9
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	f7ff fa9a 	bl	800822e <quorem>
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	9002      	str	r0, [sp, #8]
 8008cfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d02:	4648      	mov	r0, r9
 8008d04:	f000 fc5a 	bl	80095bc <__mcmp>
 8008d08:	462a      	mov	r2, r5
 8008d0a:	9008      	str	r0, [sp, #32]
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	4658      	mov	r0, fp
 8008d10:	f000 fc70 	bl	80095f4 <__mdiff>
 8008d14:	68c2      	ldr	r2, [r0, #12]
 8008d16:	4606      	mov	r6, r0
 8008d18:	bb02      	cbnz	r2, 8008d5c <_dtoa_r+0xa1c>
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	4648      	mov	r0, r9
 8008d1e:	f000 fc4d 	bl	80095bc <__mcmp>
 8008d22:	4602      	mov	r2, r0
 8008d24:	4631      	mov	r1, r6
 8008d26:	4658      	mov	r0, fp
 8008d28:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d2a:	f000 fa0d 	bl	8009148 <_Bfree>
 8008d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d32:	9e07      	ldr	r6, [sp, #28]
 8008d34:	ea43 0102 	orr.w	r1, r3, r2
 8008d38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d3a:	4319      	orrs	r1, r3
 8008d3c:	d110      	bne.n	8008d60 <_dtoa_r+0xa20>
 8008d3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d42:	d029      	beq.n	8008d98 <_dtoa_r+0xa58>
 8008d44:	9b08      	ldr	r3, [sp, #32]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	dd02      	ble.n	8008d50 <_dtoa_r+0xa10>
 8008d4a:	9b02      	ldr	r3, [sp, #8]
 8008d4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d50:	9b00      	ldr	r3, [sp, #0]
 8008d52:	f883 8000 	strb.w	r8, [r3]
 8008d56:	e63f      	b.n	80089d8 <_dtoa_r+0x698>
 8008d58:	4628      	mov	r0, r5
 8008d5a:	e7bb      	b.n	8008cd4 <_dtoa_r+0x994>
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	e7e1      	b.n	8008d24 <_dtoa_r+0x9e4>
 8008d60:	9b08      	ldr	r3, [sp, #32]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	db04      	blt.n	8008d70 <_dtoa_r+0xa30>
 8008d66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d6c:	430b      	orrs	r3, r1
 8008d6e:	d120      	bne.n	8008db2 <_dtoa_r+0xa72>
 8008d70:	2a00      	cmp	r2, #0
 8008d72:	dded      	ble.n	8008d50 <_dtoa_r+0xa10>
 8008d74:	4649      	mov	r1, r9
 8008d76:	2201      	movs	r2, #1
 8008d78:	4658      	mov	r0, fp
 8008d7a:	f000 fbb3 	bl	80094e4 <__lshift>
 8008d7e:	4621      	mov	r1, r4
 8008d80:	4681      	mov	r9, r0
 8008d82:	f000 fc1b 	bl	80095bc <__mcmp>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	dc03      	bgt.n	8008d92 <_dtoa_r+0xa52>
 8008d8a:	d1e1      	bne.n	8008d50 <_dtoa_r+0xa10>
 8008d8c:	f018 0f01 	tst.w	r8, #1
 8008d90:	d0de      	beq.n	8008d50 <_dtoa_r+0xa10>
 8008d92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d96:	d1d8      	bne.n	8008d4a <_dtoa_r+0xa0a>
 8008d98:	9a00      	ldr	r2, [sp, #0]
 8008d9a:	2339      	movs	r3, #57	@ 0x39
 8008d9c:	7013      	strb	r3, [r2, #0]
 8008d9e:	4633      	mov	r3, r6
 8008da0:	461e      	mov	r6, r3
 8008da2:	3b01      	subs	r3, #1
 8008da4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008da8:	2a39      	cmp	r2, #57	@ 0x39
 8008daa:	d052      	beq.n	8008e52 <_dtoa_r+0xb12>
 8008dac:	3201      	adds	r2, #1
 8008dae:	701a      	strb	r2, [r3, #0]
 8008db0:	e612      	b.n	80089d8 <_dtoa_r+0x698>
 8008db2:	2a00      	cmp	r2, #0
 8008db4:	dd07      	ble.n	8008dc6 <_dtoa_r+0xa86>
 8008db6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008dba:	d0ed      	beq.n	8008d98 <_dtoa_r+0xa58>
 8008dbc:	9a00      	ldr	r2, [sp, #0]
 8008dbe:	f108 0301 	add.w	r3, r8, #1
 8008dc2:	7013      	strb	r3, [r2, #0]
 8008dc4:	e608      	b.n	80089d8 <_dtoa_r+0x698>
 8008dc6:	9b07      	ldr	r3, [sp, #28]
 8008dc8:	9a07      	ldr	r2, [sp, #28]
 8008dca:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d028      	beq.n	8008e26 <_dtoa_r+0xae6>
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	220a      	movs	r2, #10
 8008dda:	4658      	mov	r0, fp
 8008ddc:	f000 f9d6 	bl	800918c <__multadd>
 8008de0:	42af      	cmp	r7, r5
 8008de2:	4681      	mov	r9, r0
 8008de4:	f04f 0300 	mov.w	r3, #0
 8008de8:	f04f 020a 	mov.w	r2, #10
 8008dec:	4639      	mov	r1, r7
 8008dee:	4658      	mov	r0, fp
 8008df0:	d107      	bne.n	8008e02 <_dtoa_r+0xac2>
 8008df2:	f000 f9cb 	bl	800918c <__multadd>
 8008df6:	4607      	mov	r7, r0
 8008df8:	4605      	mov	r5, r0
 8008dfa:	9b07      	ldr	r3, [sp, #28]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	9307      	str	r3, [sp, #28]
 8008e00:	e774      	b.n	8008cec <_dtoa_r+0x9ac>
 8008e02:	f000 f9c3 	bl	800918c <__multadd>
 8008e06:	4629      	mov	r1, r5
 8008e08:	4607      	mov	r7, r0
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	220a      	movs	r2, #10
 8008e0e:	4658      	mov	r0, fp
 8008e10:	f000 f9bc 	bl	800918c <__multadd>
 8008e14:	4605      	mov	r5, r0
 8008e16:	e7f0      	b.n	8008dfa <_dtoa_r+0xaba>
 8008e18:	9b00      	ldr	r3, [sp, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	bfcc      	ite	gt
 8008e1e:	461e      	movgt	r6, r3
 8008e20:	2601      	movle	r6, #1
 8008e22:	4456      	add	r6, sl
 8008e24:	2700      	movs	r7, #0
 8008e26:	4649      	mov	r1, r9
 8008e28:	2201      	movs	r2, #1
 8008e2a:	4658      	mov	r0, fp
 8008e2c:	f000 fb5a 	bl	80094e4 <__lshift>
 8008e30:	4621      	mov	r1, r4
 8008e32:	4681      	mov	r9, r0
 8008e34:	f000 fbc2 	bl	80095bc <__mcmp>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	dcb0      	bgt.n	8008d9e <_dtoa_r+0xa5e>
 8008e3c:	d102      	bne.n	8008e44 <_dtoa_r+0xb04>
 8008e3e:	f018 0f01 	tst.w	r8, #1
 8008e42:	d1ac      	bne.n	8008d9e <_dtoa_r+0xa5e>
 8008e44:	4633      	mov	r3, r6
 8008e46:	461e      	mov	r6, r3
 8008e48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e4c:	2a30      	cmp	r2, #48	@ 0x30
 8008e4e:	d0fa      	beq.n	8008e46 <_dtoa_r+0xb06>
 8008e50:	e5c2      	b.n	80089d8 <_dtoa_r+0x698>
 8008e52:	459a      	cmp	sl, r3
 8008e54:	d1a4      	bne.n	8008da0 <_dtoa_r+0xa60>
 8008e56:	9b04      	ldr	r3, [sp, #16]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	9304      	str	r3, [sp, #16]
 8008e5c:	2331      	movs	r3, #49	@ 0x31
 8008e5e:	f88a 3000 	strb.w	r3, [sl]
 8008e62:	e5b9      	b.n	80089d8 <_dtoa_r+0x698>
 8008e64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008ec4 <_dtoa_r+0xb84>
 8008e6a:	b11b      	cbz	r3, 8008e74 <_dtoa_r+0xb34>
 8008e6c:	f10a 0308 	add.w	r3, sl, #8
 8008e70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	4650      	mov	r0, sl
 8008e76:	b019      	add	sp, #100	@ 0x64
 8008e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	f77f ae37 	ble.w	8008af2 <_dtoa_r+0x7b2>
 8008e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e86:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e88:	2001      	movs	r0, #1
 8008e8a:	e655      	b.n	8008b38 <_dtoa_r+0x7f8>
 8008e8c:	9b00      	ldr	r3, [sp, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f77f aed6 	ble.w	8008c40 <_dtoa_r+0x900>
 8008e94:	4656      	mov	r6, sl
 8008e96:	4621      	mov	r1, r4
 8008e98:	4648      	mov	r0, r9
 8008e9a:	f7ff f9c8 	bl	800822e <quorem>
 8008e9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ea2:	f806 8b01 	strb.w	r8, [r6], #1
 8008ea6:	9b00      	ldr	r3, [sp, #0]
 8008ea8:	eba6 020a 	sub.w	r2, r6, sl
 8008eac:	4293      	cmp	r3, r2
 8008eae:	ddb3      	ble.n	8008e18 <_dtoa_r+0xad8>
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	220a      	movs	r2, #10
 8008eb6:	4658      	mov	r0, fp
 8008eb8:	f000 f968 	bl	800918c <__multadd>
 8008ebc:	4681      	mov	r9, r0
 8008ebe:	e7ea      	b.n	8008e96 <_dtoa_r+0xb56>
 8008ec0:	0800ac38 	.word	0x0800ac38
 8008ec4:	0800abbc 	.word	0x0800abbc

08008ec8 <_free_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4605      	mov	r5, r0
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	d041      	beq.n	8008f54 <_free_r+0x8c>
 8008ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed4:	1f0c      	subs	r4, r1, #4
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	bfb8      	it	lt
 8008eda:	18e4      	addlt	r4, r4, r3
 8008edc:	f000 f8e8 	bl	80090b0 <__malloc_lock>
 8008ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f58 <_free_r+0x90>)
 8008ee2:	6813      	ldr	r3, [r2, #0]
 8008ee4:	b933      	cbnz	r3, 8008ef4 <_free_r+0x2c>
 8008ee6:	6063      	str	r3, [r4, #4]
 8008ee8:	6014      	str	r4, [r2, #0]
 8008eea:	4628      	mov	r0, r5
 8008eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ef0:	f000 b8e4 	b.w	80090bc <__malloc_unlock>
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	d908      	bls.n	8008f0a <_free_r+0x42>
 8008ef8:	6820      	ldr	r0, [r4, #0]
 8008efa:	1821      	adds	r1, r4, r0
 8008efc:	428b      	cmp	r3, r1
 8008efe:	bf01      	itttt	eq
 8008f00:	6819      	ldreq	r1, [r3, #0]
 8008f02:	685b      	ldreq	r3, [r3, #4]
 8008f04:	1809      	addeq	r1, r1, r0
 8008f06:	6021      	streq	r1, [r4, #0]
 8008f08:	e7ed      	b.n	8008ee6 <_free_r+0x1e>
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	b10b      	cbz	r3, 8008f14 <_free_r+0x4c>
 8008f10:	42a3      	cmp	r3, r4
 8008f12:	d9fa      	bls.n	8008f0a <_free_r+0x42>
 8008f14:	6811      	ldr	r1, [r2, #0]
 8008f16:	1850      	adds	r0, r2, r1
 8008f18:	42a0      	cmp	r0, r4
 8008f1a:	d10b      	bne.n	8008f34 <_free_r+0x6c>
 8008f1c:	6820      	ldr	r0, [r4, #0]
 8008f1e:	4401      	add	r1, r0
 8008f20:	1850      	adds	r0, r2, r1
 8008f22:	4283      	cmp	r3, r0
 8008f24:	6011      	str	r1, [r2, #0]
 8008f26:	d1e0      	bne.n	8008eea <_free_r+0x22>
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	6053      	str	r3, [r2, #4]
 8008f2e:	4408      	add	r0, r1
 8008f30:	6010      	str	r0, [r2, #0]
 8008f32:	e7da      	b.n	8008eea <_free_r+0x22>
 8008f34:	d902      	bls.n	8008f3c <_free_r+0x74>
 8008f36:	230c      	movs	r3, #12
 8008f38:	602b      	str	r3, [r5, #0]
 8008f3a:	e7d6      	b.n	8008eea <_free_r+0x22>
 8008f3c:	6820      	ldr	r0, [r4, #0]
 8008f3e:	1821      	adds	r1, r4, r0
 8008f40:	428b      	cmp	r3, r1
 8008f42:	bf04      	itt	eq
 8008f44:	6819      	ldreq	r1, [r3, #0]
 8008f46:	685b      	ldreq	r3, [r3, #4]
 8008f48:	6063      	str	r3, [r4, #4]
 8008f4a:	bf04      	itt	eq
 8008f4c:	1809      	addeq	r1, r1, r0
 8008f4e:	6021      	streq	r1, [r4, #0]
 8008f50:	6054      	str	r4, [r2, #4]
 8008f52:	e7ca      	b.n	8008eea <_free_r+0x22>
 8008f54:	bd38      	pop	{r3, r4, r5, pc}
 8008f56:	bf00      	nop
 8008f58:	200026c8 	.word	0x200026c8

08008f5c <malloc>:
 8008f5c:	4b02      	ldr	r3, [pc, #8]	@ (8008f68 <malloc+0xc>)
 8008f5e:	4601      	mov	r1, r0
 8008f60:	6818      	ldr	r0, [r3, #0]
 8008f62:	f000 b825 	b.w	8008fb0 <_malloc_r>
 8008f66:	bf00      	nop
 8008f68:	200000bc 	.word	0x200000bc

08008f6c <sbrk_aligned>:
 8008f6c:	b570      	push	{r4, r5, r6, lr}
 8008f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8008fac <sbrk_aligned+0x40>)
 8008f70:	460c      	mov	r4, r1
 8008f72:	6831      	ldr	r1, [r6, #0]
 8008f74:	4605      	mov	r5, r0
 8008f76:	b911      	cbnz	r1, 8008f7e <sbrk_aligned+0x12>
 8008f78:	f000 fe46 	bl	8009c08 <_sbrk_r>
 8008f7c:	6030      	str	r0, [r6, #0]
 8008f7e:	4621      	mov	r1, r4
 8008f80:	4628      	mov	r0, r5
 8008f82:	f000 fe41 	bl	8009c08 <_sbrk_r>
 8008f86:	1c43      	adds	r3, r0, #1
 8008f88:	d103      	bne.n	8008f92 <sbrk_aligned+0x26>
 8008f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8008f8e:	4620      	mov	r0, r4
 8008f90:	bd70      	pop	{r4, r5, r6, pc}
 8008f92:	1cc4      	adds	r4, r0, #3
 8008f94:	f024 0403 	bic.w	r4, r4, #3
 8008f98:	42a0      	cmp	r0, r4
 8008f9a:	d0f8      	beq.n	8008f8e <sbrk_aligned+0x22>
 8008f9c:	1a21      	subs	r1, r4, r0
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	f000 fe32 	bl	8009c08 <_sbrk_r>
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d1f2      	bne.n	8008f8e <sbrk_aligned+0x22>
 8008fa8:	e7ef      	b.n	8008f8a <sbrk_aligned+0x1e>
 8008faa:	bf00      	nop
 8008fac:	200026c4 	.word	0x200026c4

08008fb0 <_malloc_r>:
 8008fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb4:	1ccd      	adds	r5, r1, #3
 8008fb6:	f025 0503 	bic.w	r5, r5, #3
 8008fba:	3508      	adds	r5, #8
 8008fbc:	2d0c      	cmp	r5, #12
 8008fbe:	bf38      	it	cc
 8008fc0:	250c      	movcc	r5, #12
 8008fc2:	2d00      	cmp	r5, #0
 8008fc4:	4606      	mov	r6, r0
 8008fc6:	db01      	blt.n	8008fcc <_malloc_r+0x1c>
 8008fc8:	42a9      	cmp	r1, r5
 8008fca:	d904      	bls.n	8008fd6 <_malloc_r+0x26>
 8008fcc:	230c      	movs	r3, #12
 8008fce:	6033      	str	r3, [r6, #0]
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090ac <_malloc_r+0xfc>
 8008fda:	f000 f869 	bl	80090b0 <__malloc_lock>
 8008fde:	f8d8 3000 	ldr.w	r3, [r8]
 8008fe2:	461c      	mov	r4, r3
 8008fe4:	bb44      	cbnz	r4, 8009038 <_malloc_r+0x88>
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f7ff ffbf 	bl	8008f6c <sbrk_aligned>
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	d158      	bne.n	80090a6 <_malloc_r+0xf6>
 8008ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ff8:	4627      	mov	r7, r4
 8008ffa:	2f00      	cmp	r7, #0
 8008ffc:	d143      	bne.n	8009086 <_malloc_r+0xd6>
 8008ffe:	2c00      	cmp	r4, #0
 8009000:	d04b      	beq.n	800909a <_malloc_r+0xea>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	4639      	mov	r1, r7
 8009006:	4630      	mov	r0, r6
 8009008:	eb04 0903 	add.w	r9, r4, r3
 800900c:	f000 fdfc 	bl	8009c08 <_sbrk_r>
 8009010:	4581      	cmp	r9, r0
 8009012:	d142      	bne.n	800909a <_malloc_r+0xea>
 8009014:	6821      	ldr	r1, [r4, #0]
 8009016:	1a6d      	subs	r5, r5, r1
 8009018:	4629      	mov	r1, r5
 800901a:	4630      	mov	r0, r6
 800901c:	f7ff ffa6 	bl	8008f6c <sbrk_aligned>
 8009020:	3001      	adds	r0, #1
 8009022:	d03a      	beq.n	800909a <_malloc_r+0xea>
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	442b      	add	r3, r5
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	f8d8 3000 	ldr.w	r3, [r8]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	bb62      	cbnz	r2, 800908c <_malloc_r+0xdc>
 8009032:	f8c8 7000 	str.w	r7, [r8]
 8009036:	e00f      	b.n	8009058 <_malloc_r+0xa8>
 8009038:	6822      	ldr	r2, [r4, #0]
 800903a:	1b52      	subs	r2, r2, r5
 800903c:	d420      	bmi.n	8009080 <_malloc_r+0xd0>
 800903e:	2a0b      	cmp	r2, #11
 8009040:	d917      	bls.n	8009072 <_malloc_r+0xc2>
 8009042:	1961      	adds	r1, r4, r5
 8009044:	42a3      	cmp	r3, r4
 8009046:	6025      	str	r5, [r4, #0]
 8009048:	bf18      	it	ne
 800904a:	6059      	strne	r1, [r3, #4]
 800904c:	6863      	ldr	r3, [r4, #4]
 800904e:	bf08      	it	eq
 8009050:	f8c8 1000 	streq.w	r1, [r8]
 8009054:	5162      	str	r2, [r4, r5]
 8009056:	604b      	str	r3, [r1, #4]
 8009058:	4630      	mov	r0, r6
 800905a:	f000 f82f 	bl	80090bc <__malloc_unlock>
 800905e:	f104 000b 	add.w	r0, r4, #11
 8009062:	1d23      	adds	r3, r4, #4
 8009064:	f020 0007 	bic.w	r0, r0, #7
 8009068:	1ac2      	subs	r2, r0, r3
 800906a:	bf1c      	itt	ne
 800906c:	1a1b      	subne	r3, r3, r0
 800906e:	50a3      	strne	r3, [r4, r2]
 8009070:	e7af      	b.n	8008fd2 <_malloc_r+0x22>
 8009072:	6862      	ldr	r2, [r4, #4]
 8009074:	42a3      	cmp	r3, r4
 8009076:	bf0c      	ite	eq
 8009078:	f8c8 2000 	streq.w	r2, [r8]
 800907c:	605a      	strne	r2, [r3, #4]
 800907e:	e7eb      	b.n	8009058 <_malloc_r+0xa8>
 8009080:	4623      	mov	r3, r4
 8009082:	6864      	ldr	r4, [r4, #4]
 8009084:	e7ae      	b.n	8008fe4 <_malloc_r+0x34>
 8009086:	463c      	mov	r4, r7
 8009088:	687f      	ldr	r7, [r7, #4]
 800908a:	e7b6      	b.n	8008ffa <_malloc_r+0x4a>
 800908c:	461a      	mov	r2, r3
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	42a3      	cmp	r3, r4
 8009092:	d1fb      	bne.n	800908c <_malloc_r+0xdc>
 8009094:	2300      	movs	r3, #0
 8009096:	6053      	str	r3, [r2, #4]
 8009098:	e7de      	b.n	8009058 <_malloc_r+0xa8>
 800909a:	230c      	movs	r3, #12
 800909c:	6033      	str	r3, [r6, #0]
 800909e:	4630      	mov	r0, r6
 80090a0:	f000 f80c 	bl	80090bc <__malloc_unlock>
 80090a4:	e794      	b.n	8008fd0 <_malloc_r+0x20>
 80090a6:	6005      	str	r5, [r0, #0]
 80090a8:	e7d6      	b.n	8009058 <_malloc_r+0xa8>
 80090aa:	bf00      	nop
 80090ac:	200026c8 	.word	0x200026c8

080090b0 <__malloc_lock>:
 80090b0:	4801      	ldr	r0, [pc, #4]	@ (80090b8 <__malloc_lock+0x8>)
 80090b2:	f7ff b8ac 	b.w	800820e <__retarget_lock_acquire_recursive>
 80090b6:	bf00      	nop
 80090b8:	200026c0 	.word	0x200026c0

080090bc <__malloc_unlock>:
 80090bc:	4801      	ldr	r0, [pc, #4]	@ (80090c4 <__malloc_unlock+0x8>)
 80090be:	f7ff b8a7 	b.w	8008210 <__retarget_lock_release_recursive>
 80090c2:	bf00      	nop
 80090c4:	200026c0 	.word	0x200026c0

080090c8 <_Balloc>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	69c6      	ldr	r6, [r0, #28]
 80090cc:	4604      	mov	r4, r0
 80090ce:	460d      	mov	r5, r1
 80090d0:	b976      	cbnz	r6, 80090f0 <_Balloc+0x28>
 80090d2:	2010      	movs	r0, #16
 80090d4:	f7ff ff42 	bl	8008f5c <malloc>
 80090d8:	4602      	mov	r2, r0
 80090da:	61e0      	str	r0, [r4, #28]
 80090dc:	b920      	cbnz	r0, 80090e8 <_Balloc+0x20>
 80090de:	4b18      	ldr	r3, [pc, #96]	@ (8009140 <_Balloc+0x78>)
 80090e0:	4818      	ldr	r0, [pc, #96]	@ (8009144 <_Balloc+0x7c>)
 80090e2:	216b      	movs	r1, #107	@ 0x6b
 80090e4:	f000 fda0 	bl	8009c28 <__assert_func>
 80090e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090ec:	6006      	str	r6, [r0, #0]
 80090ee:	60c6      	str	r6, [r0, #12]
 80090f0:	69e6      	ldr	r6, [r4, #28]
 80090f2:	68f3      	ldr	r3, [r6, #12]
 80090f4:	b183      	cbz	r3, 8009118 <_Balloc+0x50>
 80090f6:	69e3      	ldr	r3, [r4, #28]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090fe:	b9b8      	cbnz	r0, 8009130 <_Balloc+0x68>
 8009100:	2101      	movs	r1, #1
 8009102:	fa01 f605 	lsl.w	r6, r1, r5
 8009106:	1d72      	adds	r2, r6, #5
 8009108:	0092      	lsls	r2, r2, #2
 800910a:	4620      	mov	r0, r4
 800910c:	f000 fdaa 	bl	8009c64 <_calloc_r>
 8009110:	b160      	cbz	r0, 800912c <_Balloc+0x64>
 8009112:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009116:	e00e      	b.n	8009136 <_Balloc+0x6e>
 8009118:	2221      	movs	r2, #33	@ 0x21
 800911a:	2104      	movs	r1, #4
 800911c:	4620      	mov	r0, r4
 800911e:	f000 fda1 	bl	8009c64 <_calloc_r>
 8009122:	69e3      	ldr	r3, [r4, #28]
 8009124:	60f0      	str	r0, [r6, #12]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e4      	bne.n	80090f6 <_Balloc+0x2e>
 800912c:	2000      	movs	r0, #0
 800912e:	bd70      	pop	{r4, r5, r6, pc}
 8009130:	6802      	ldr	r2, [r0, #0]
 8009132:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009136:	2300      	movs	r3, #0
 8009138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800913c:	e7f7      	b.n	800912e <_Balloc+0x66>
 800913e:	bf00      	nop
 8009140:	0800abc9 	.word	0x0800abc9
 8009144:	0800ac49 	.word	0x0800ac49

08009148 <_Bfree>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	69c6      	ldr	r6, [r0, #28]
 800914c:	4605      	mov	r5, r0
 800914e:	460c      	mov	r4, r1
 8009150:	b976      	cbnz	r6, 8009170 <_Bfree+0x28>
 8009152:	2010      	movs	r0, #16
 8009154:	f7ff ff02 	bl	8008f5c <malloc>
 8009158:	4602      	mov	r2, r0
 800915a:	61e8      	str	r0, [r5, #28]
 800915c:	b920      	cbnz	r0, 8009168 <_Bfree+0x20>
 800915e:	4b09      	ldr	r3, [pc, #36]	@ (8009184 <_Bfree+0x3c>)
 8009160:	4809      	ldr	r0, [pc, #36]	@ (8009188 <_Bfree+0x40>)
 8009162:	218f      	movs	r1, #143	@ 0x8f
 8009164:	f000 fd60 	bl	8009c28 <__assert_func>
 8009168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800916c:	6006      	str	r6, [r0, #0]
 800916e:	60c6      	str	r6, [r0, #12]
 8009170:	b13c      	cbz	r4, 8009182 <_Bfree+0x3a>
 8009172:	69eb      	ldr	r3, [r5, #28]
 8009174:	6862      	ldr	r2, [r4, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800917c:	6021      	str	r1, [r4, #0]
 800917e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009182:	bd70      	pop	{r4, r5, r6, pc}
 8009184:	0800abc9 	.word	0x0800abc9
 8009188:	0800ac49 	.word	0x0800ac49

0800918c <__multadd>:
 800918c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009190:	690d      	ldr	r5, [r1, #16]
 8009192:	4607      	mov	r7, r0
 8009194:	460c      	mov	r4, r1
 8009196:	461e      	mov	r6, r3
 8009198:	f101 0c14 	add.w	ip, r1, #20
 800919c:	2000      	movs	r0, #0
 800919e:	f8dc 3000 	ldr.w	r3, [ip]
 80091a2:	b299      	uxth	r1, r3
 80091a4:	fb02 6101 	mla	r1, r2, r1, r6
 80091a8:	0c1e      	lsrs	r6, r3, #16
 80091aa:	0c0b      	lsrs	r3, r1, #16
 80091ac:	fb02 3306 	mla	r3, r2, r6, r3
 80091b0:	b289      	uxth	r1, r1
 80091b2:	3001      	adds	r0, #1
 80091b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091b8:	4285      	cmp	r5, r0
 80091ba:	f84c 1b04 	str.w	r1, [ip], #4
 80091be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091c2:	dcec      	bgt.n	800919e <__multadd+0x12>
 80091c4:	b30e      	cbz	r6, 800920a <__multadd+0x7e>
 80091c6:	68a3      	ldr	r3, [r4, #8]
 80091c8:	42ab      	cmp	r3, r5
 80091ca:	dc19      	bgt.n	8009200 <__multadd+0x74>
 80091cc:	6861      	ldr	r1, [r4, #4]
 80091ce:	4638      	mov	r0, r7
 80091d0:	3101      	adds	r1, #1
 80091d2:	f7ff ff79 	bl	80090c8 <_Balloc>
 80091d6:	4680      	mov	r8, r0
 80091d8:	b928      	cbnz	r0, 80091e6 <__multadd+0x5a>
 80091da:	4602      	mov	r2, r0
 80091dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009210 <__multadd+0x84>)
 80091de:	480d      	ldr	r0, [pc, #52]	@ (8009214 <__multadd+0x88>)
 80091e0:	21ba      	movs	r1, #186	@ 0xba
 80091e2:	f000 fd21 	bl	8009c28 <__assert_func>
 80091e6:	6922      	ldr	r2, [r4, #16]
 80091e8:	3202      	adds	r2, #2
 80091ea:	f104 010c 	add.w	r1, r4, #12
 80091ee:	0092      	lsls	r2, r2, #2
 80091f0:	300c      	adds	r0, #12
 80091f2:	f7ff f80e 	bl	8008212 <memcpy>
 80091f6:	4621      	mov	r1, r4
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7ff ffa5 	bl	8009148 <_Bfree>
 80091fe:	4644      	mov	r4, r8
 8009200:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009204:	3501      	adds	r5, #1
 8009206:	615e      	str	r6, [r3, #20]
 8009208:	6125      	str	r5, [r4, #16]
 800920a:	4620      	mov	r0, r4
 800920c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009210:	0800ac38 	.word	0x0800ac38
 8009214:	0800ac49 	.word	0x0800ac49

08009218 <__hi0bits>:
 8009218:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800921c:	4603      	mov	r3, r0
 800921e:	bf36      	itet	cc
 8009220:	0403      	lslcc	r3, r0, #16
 8009222:	2000      	movcs	r0, #0
 8009224:	2010      	movcc	r0, #16
 8009226:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800922a:	bf3c      	itt	cc
 800922c:	021b      	lslcc	r3, r3, #8
 800922e:	3008      	addcc	r0, #8
 8009230:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009234:	bf3c      	itt	cc
 8009236:	011b      	lslcc	r3, r3, #4
 8009238:	3004      	addcc	r0, #4
 800923a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800923e:	bf3c      	itt	cc
 8009240:	009b      	lslcc	r3, r3, #2
 8009242:	3002      	addcc	r0, #2
 8009244:	2b00      	cmp	r3, #0
 8009246:	db05      	blt.n	8009254 <__hi0bits+0x3c>
 8009248:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800924c:	f100 0001 	add.w	r0, r0, #1
 8009250:	bf08      	it	eq
 8009252:	2020      	moveq	r0, #32
 8009254:	4770      	bx	lr

08009256 <__lo0bits>:
 8009256:	6803      	ldr	r3, [r0, #0]
 8009258:	4602      	mov	r2, r0
 800925a:	f013 0007 	ands.w	r0, r3, #7
 800925e:	d00b      	beq.n	8009278 <__lo0bits+0x22>
 8009260:	07d9      	lsls	r1, r3, #31
 8009262:	d421      	bmi.n	80092a8 <__lo0bits+0x52>
 8009264:	0798      	lsls	r0, r3, #30
 8009266:	bf49      	itett	mi
 8009268:	085b      	lsrmi	r3, r3, #1
 800926a:	089b      	lsrpl	r3, r3, #2
 800926c:	2001      	movmi	r0, #1
 800926e:	6013      	strmi	r3, [r2, #0]
 8009270:	bf5c      	itt	pl
 8009272:	6013      	strpl	r3, [r2, #0]
 8009274:	2002      	movpl	r0, #2
 8009276:	4770      	bx	lr
 8009278:	b299      	uxth	r1, r3
 800927a:	b909      	cbnz	r1, 8009280 <__lo0bits+0x2a>
 800927c:	0c1b      	lsrs	r3, r3, #16
 800927e:	2010      	movs	r0, #16
 8009280:	b2d9      	uxtb	r1, r3
 8009282:	b909      	cbnz	r1, 8009288 <__lo0bits+0x32>
 8009284:	3008      	adds	r0, #8
 8009286:	0a1b      	lsrs	r3, r3, #8
 8009288:	0719      	lsls	r1, r3, #28
 800928a:	bf04      	itt	eq
 800928c:	091b      	lsreq	r3, r3, #4
 800928e:	3004      	addeq	r0, #4
 8009290:	0799      	lsls	r1, r3, #30
 8009292:	bf04      	itt	eq
 8009294:	089b      	lsreq	r3, r3, #2
 8009296:	3002      	addeq	r0, #2
 8009298:	07d9      	lsls	r1, r3, #31
 800929a:	d403      	bmi.n	80092a4 <__lo0bits+0x4e>
 800929c:	085b      	lsrs	r3, r3, #1
 800929e:	f100 0001 	add.w	r0, r0, #1
 80092a2:	d003      	beq.n	80092ac <__lo0bits+0x56>
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	4770      	bx	lr
 80092a8:	2000      	movs	r0, #0
 80092aa:	4770      	bx	lr
 80092ac:	2020      	movs	r0, #32
 80092ae:	4770      	bx	lr

080092b0 <__i2b>:
 80092b0:	b510      	push	{r4, lr}
 80092b2:	460c      	mov	r4, r1
 80092b4:	2101      	movs	r1, #1
 80092b6:	f7ff ff07 	bl	80090c8 <_Balloc>
 80092ba:	4602      	mov	r2, r0
 80092bc:	b928      	cbnz	r0, 80092ca <__i2b+0x1a>
 80092be:	4b05      	ldr	r3, [pc, #20]	@ (80092d4 <__i2b+0x24>)
 80092c0:	4805      	ldr	r0, [pc, #20]	@ (80092d8 <__i2b+0x28>)
 80092c2:	f240 1145 	movw	r1, #325	@ 0x145
 80092c6:	f000 fcaf 	bl	8009c28 <__assert_func>
 80092ca:	2301      	movs	r3, #1
 80092cc:	6144      	str	r4, [r0, #20]
 80092ce:	6103      	str	r3, [r0, #16]
 80092d0:	bd10      	pop	{r4, pc}
 80092d2:	bf00      	nop
 80092d4:	0800ac38 	.word	0x0800ac38
 80092d8:	0800ac49 	.word	0x0800ac49

080092dc <__multiply>:
 80092dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e0:	4614      	mov	r4, r2
 80092e2:	690a      	ldr	r2, [r1, #16]
 80092e4:	6923      	ldr	r3, [r4, #16]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	bfa8      	it	ge
 80092ea:	4623      	movge	r3, r4
 80092ec:	460f      	mov	r7, r1
 80092ee:	bfa4      	itt	ge
 80092f0:	460c      	movge	r4, r1
 80092f2:	461f      	movge	r7, r3
 80092f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80092f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80092fc:	68a3      	ldr	r3, [r4, #8]
 80092fe:	6861      	ldr	r1, [r4, #4]
 8009300:	eb0a 0609 	add.w	r6, sl, r9
 8009304:	42b3      	cmp	r3, r6
 8009306:	b085      	sub	sp, #20
 8009308:	bfb8      	it	lt
 800930a:	3101      	addlt	r1, #1
 800930c:	f7ff fedc 	bl	80090c8 <_Balloc>
 8009310:	b930      	cbnz	r0, 8009320 <__multiply+0x44>
 8009312:	4602      	mov	r2, r0
 8009314:	4b44      	ldr	r3, [pc, #272]	@ (8009428 <__multiply+0x14c>)
 8009316:	4845      	ldr	r0, [pc, #276]	@ (800942c <__multiply+0x150>)
 8009318:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800931c:	f000 fc84 	bl	8009c28 <__assert_func>
 8009320:	f100 0514 	add.w	r5, r0, #20
 8009324:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009328:	462b      	mov	r3, r5
 800932a:	2200      	movs	r2, #0
 800932c:	4543      	cmp	r3, r8
 800932e:	d321      	bcc.n	8009374 <__multiply+0x98>
 8009330:	f107 0114 	add.w	r1, r7, #20
 8009334:	f104 0214 	add.w	r2, r4, #20
 8009338:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800933c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009340:	9302      	str	r3, [sp, #8]
 8009342:	1b13      	subs	r3, r2, r4
 8009344:	3b15      	subs	r3, #21
 8009346:	f023 0303 	bic.w	r3, r3, #3
 800934a:	3304      	adds	r3, #4
 800934c:	f104 0715 	add.w	r7, r4, #21
 8009350:	42ba      	cmp	r2, r7
 8009352:	bf38      	it	cc
 8009354:	2304      	movcc	r3, #4
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	9b02      	ldr	r3, [sp, #8]
 800935a:	9103      	str	r1, [sp, #12]
 800935c:	428b      	cmp	r3, r1
 800935e:	d80c      	bhi.n	800937a <__multiply+0x9e>
 8009360:	2e00      	cmp	r6, #0
 8009362:	dd03      	ble.n	800936c <__multiply+0x90>
 8009364:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009368:	2b00      	cmp	r3, #0
 800936a:	d05b      	beq.n	8009424 <__multiply+0x148>
 800936c:	6106      	str	r6, [r0, #16]
 800936e:	b005      	add	sp, #20
 8009370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009374:	f843 2b04 	str.w	r2, [r3], #4
 8009378:	e7d8      	b.n	800932c <__multiply+0x50>
 800937a:	f8b1 a000 	ldrh.w	sl, [r1]
 800937e:	f1ba 0f00 	cmp.w	sl, #0
 8009382:	d024      	beq.n	80093ce <__multiply+0xf2>
 8009384:	f104 0e14 	add.w	lr, r4, #20
 8009388:	46a9      	mov	r9, r5
 800938a:	f04f 0c00 	mov.w	ip, #0
 800938e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009392:	f8d9 3000 	ldr.w	r3, [r9]
 8009396:	fa1f fb87 	uxth.w	fp, r7
 800939a:	b29b      	uxth	r3, r3
 800939c:	fb0a 330b 	mla	r3, sl, fp, r3
 80093a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80093a4:	f8d9 7000 	ldr.w	r7, [r9]
 80093a8:	4463      	add	r3, ip
 80093aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093ae:	fb0a c70b 	mla	r7, sl, fp, ip
 80093b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093bc:	4572      	cmp	r2, lr
 80093be:	f849 3b04 	str.w	r3, [r9], #4
 80093c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093c6:	d8e2      	bhi.n	800938e <__multiply+0xb2>
 80093c8:	9b01      	ldr	r3, [sp, #4]
 80093ca:	f845 c003 	str.w	ip, [r5, r3]
 80093ce:	9b03      	ldr	r3, [sp, #12]
 80093d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80093d4:	3104      	adds	r1, #4
 80093d6:	f1b9 0f00 	cmp.w	r9, #0
 80093da:	d021      	beq.n	8009420 <__multiply+0x144>
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	f104 0c14 	add.w	ip, r4, #20
 80093e2:	46ae      	mov	lr, r5
 80093e4:	f04f 0a00 	mov.w	sl, #0
 80093e8:	f8bc b000 	ldrh.w	fp, [ip]
 80093ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80093f0:	fb09 770b 	mla	r7, r9, fp, r7
 80093f4:	4457      	add	r7, sl
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093fc:	f84e 3b04 	str.w	r3, [lr], #4
 8009400:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009404:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009408:	f8be 3000 	ldrh.w	r3, [lr]
 800940c:	fb09 330a 	mla	r3, r9, sl, r3
 8009410:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009414:	4562      	cmp	r2, ip
 8009416:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800941a:	d8e5      	bhi.n	80093e8 <__multiply+0x10c>
 800941c:	9f01      	ldr	r7, [sp, #4]
 800941e:	51eb      	str	r3, [r5, r7]
 8009420:	3504      	adds	r5, #4
 8009422:	e799      	b.n	8009358 <__multiply+0x7c>
 8009424:	3e01      	subs	r6, #1
 8009426:	e79b      	b.n	8009360 <__multiply+0x84>
 8009428:	0800ac38 	.word	0x0800ac38
 800942c:	0800ac49 	.word	0x0800ac49

08009430 <__pow5mult>:
 8009430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009434:	4615      	mov	r5, r2
 8009436:	f012 0203 	ands.w	r2, r2, #3
 800943a:	4607      	mov	r7, r0
 800943c:	460e      	mov	r6, r1
 800943e:	d007      	beq.n	8009450 <__pow5mult+0x20>
 8009440:	4c25      	ldr	r4, [pc, #148]	@ (80094d8 <__pow5mult+0xa8>)
 8009442:	3a01      	subs	r2, #1
 8009444:	2300      	movs	r3, #0
 8009446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800944a:	f7ff fe9f 	bl	800918c <__multadd>
 800944e:	4606      	mov	r6, r0
 8009450:	10ad      	asrs	r5, r5, #2
 8009452:	d03d      	beq.n	80094d0 <__pow5mult+0xa0>
 8009454:	69fc      	ldr	r4, [r7, #28]
 8009456:	b97c      	cbnz	r4, 8009478 <__pow5mult+0x48>
 8009458:	2010      	movs	r0, #16
 800945a:	f7ff fd7f 	bl	8008f5c <malloc>
 800945e:	4602      	mov	r2, r0
 8009460:	61f8      	str	r0, [r7, #28]
 8009462:	b928      	cbnz	r0, 8009470 <__pow5mult+0x40>
 8009464:	4b1d      	ldr	r3, [pc, #116]	@ (80094dc <__pow5mult+0xac>)
 8009466:	481e      	ldr	r0, [pc, #120]	@ (80094e0 <__pow5mult+0xb0>)
 8009468:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800946c:	f000 fbdc 	bl	8009c28 <__assert_func>
 8009470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009474:	6004      	str	r4, [r0, #0]
 8009476:	60c4      	str	r4, [r0, #12]
 8009478:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800947c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009480:	b94c      	cbnz	r4, 8009496 <__pow5mult+0x66>
 8009482:	f240 2171 	movw	r1, #625	@ 0x271
 8009486:	4638      	mov	r0, r7
 8009488:	f7ff ff12 	bl	80092b0 <__i2b>
 800948c:	2300      	movs	r3, #0
 800948e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009492:	4604      	mov	r4, r0
 8009494:	6003      	str	r3, [r0, #0]
 8009496:	f04f 0900 	mov.w	r9, #0
 800949a:	07eb      	lsls	r3, r5, #31
 800949c:	d50a      	bpl.n	80094b4 <__pow5mult+0x84>
 800949e:	4631      	mov	r1, r6
 80094a0:	4622      	mov	r2, r4
 80094a2:	4638      	mov	r0, r7
 80094a4:	f7ff ff1a 	bl	80092dc <__multiply>
 80094a8:	4631      	mov	r1, r6
 80094aa:	4680      	mov	r8, r0
 80094ac:	4638      	mov	r0, r7
 80094ae:	f7ff fe4b 	bl	8009148 <_Bfree>
 80094b2:	4646      	mov	r6, r8
 80094b4:	106d      	asrs	r5, r5, #1
 80094b6:	d00b      	beq.n	80094d0 <__pow5mult+0xa0>
 80094b8:	6820      	ldr	r0, [r4, #0]
 80094ba:	b938      	cbnz	r0, 80094cc <__pow5mult+0x9c>
 80094bc:	4622      	mov	r2, r4
 80094be:	4621      	mov	r1, r4
 80094c0:	4638      	mov	r0, r7
 80094c2:	f7ff ff0b 	bl	80092dc <__multiply>
 80094c6:	6020      	str	r0, [r4, #0]
 80094c8:	f8c0 9000 	str.w	r9, [r0]
 80094cc:	4604      	mov	r4, r0
 80094ce:	e7e4      	b.n	800949a <__pow5mult+0x6a>
 80094d0:	4630      	mov	r0, r6
 80094d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d6:	bf00      	nop
 80094d8:	0800aca4 	.word	0x0800aca4
 80094dc:	0800abc9 	.word	0x0800abc9
 80094e0:	0800ac49 	.word	0x0800ac49

080094e4 <__lshift>:
 80094e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e8:	460c      	mov	r4, r1
 80094ea:	6849      	ldr	r1, [r1, #4]
 80094ec:	6923      	ldr	r3, [r4, #16]
 80094ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094f2:	68a3      	ldr	r3, [r4, #8]
 80094f4:	4607      	mov	r7, r0
 80094f6:	4691      	mov	r9, r2
 80094f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094fc:	f108 0601 	add.w	r6, r8, #1
 8009500:	42b3      	cmp	r3, r6
 8009502:	db0b      	blt.n	800951c <__lshift+0x38>
 8009504:	4638      	mov	r0, r7
 8009506:	f7ff fddf 	bl	80090c8 <_Balloc>
 800950a:	4605      	mov	r5, r0
 800950c:	b948      	cbnz	r0, 8009522 <__lshift+0x3e>
 800950e:	4602      	mov	r2, r0
 8009510:	4b28      	ldr	r3, [pc, #160]	@ (80095b4 <__lshift+0xd0>)
 8009512:	4829      	ldr	r0, [pc, #164]	@ (80095b8 <__lshift+0xd4>)
 8009514:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009518:	f000 fb86 	bl	8009c28 <__assert_func>
 800951c:	3101      	adds	r1, #1
 800951e:	005b      	lsls	r3, r3, #1
 8009520:	e7ee      	b.n	8009500 <__lshift+0x1c>
 8009522:	2300      	movs	r3, #0
 8009524:	f100 0114 	add.w	r1, r0, #20
 8009528:	f100 0210 	add.w	r2, r0, #16
 800952c:	4618      	mov	r0, r3
 800952e:	4553      	cmp	r3, sl
 8009530:	db33      	blt.n	800959a <__lshift+0xb6>
 8009532:	6920      	ldr	r0, [r4, #16]
 8009534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009538:	f104 0314 	add.w	r3, r4, #20
 800953c:	f019 091f 	ands.w	r9, r9, #31
 8009540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009544:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009548:	d02b      	beq.n	80095a2 <__lshift+0xbe>
 800954a:	f1c9 0e20 	rsb	lr, r9, #32
 800954e:	468a      	mov	sl, r1
 8009550:	2200      	movs	r2, #0
 8009552:	6818      	ldr	r0, [r3, #0]
 8009554:	fa00 f009 	lsl.w	r0, r0, r9
 8009558:	4310      	orrs	r0, r2
 800955a:	f84a 0b04 	str.w	r0, [sl], #4
 800955e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009562:	459c      	cmp	ip, r3
 8009564:	fa22 f20e 	lsr.w	r2, r2, lr
 8009568:	d8f3      	bhi.n	8009552 <__lshift+0x6e>
 800956a:	ebac 0304 	sub.w	r3, ip, r4
 800956e:	3b15      	subs	r3, #21
 8009570:	f023 0303 	bic.w	r3, r3, #3
 8009574:	3304      	adds	r3, #4
 8009576:	f104 0015 	add.w	r0, r4, #21
 800957a:	4584      	cmp	ip, r0
 800957c:	bf38      	it	cc
 800957e:	2304      	movcc	r3, #4
 8009580:	50ca      	str	r2, [r1, r3]
 8009582:	b10a      	cbz	r2, 8009588 <__lshift+0xa4>
 8009584:	f108 0602 	add.w	r6, r8, #2
 8009588:	3e01      	subs	r6, #1
 800958a:	4638      	mov	r0, r7
 800958c:	612e      	str	r6, [r5, #16]
 800958e:	4621      	mov	r1, r4
 8009590:	f7ff fdda 	bl	8009148 <_Bfree>
 8009594:	4628      	mov	r0, r5
 8009596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800959a:	f842 0f04 	str.w	r0, [r2, #4]!
 800959e:	3301      	adds	r3, #1
 80095a0:	e7c5      	b.n	800952e <__lshift+0x4a>
 80095a2:	3904      	subs	r1, #4
 80095a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80095a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80095ac:	459c      	cmp	ip, r3
 80095ae:	d8f9      	bhi.n	80095a4 <__lshift+0xc0>
 80095b0:	e7ea      	b.n	8009588 <__lshift+0xa4>
 80095b2:	bf00      	nop
 80095b4:	0800ac38 	.word	0x0800ac38
 80095b8:	0800ac49 	.word	0x0800ac49

080095bc <__mcmp>:
 80095bc:	690a      	ldr	r2, [r1, #16]
 80095be:	4603      	mov	r3, r0
 80095c0:	6900      	ldr	r0, [r0, #16]
 80095c2:	1a80      	subs	r0, r0, r2
 80095c4:	b530      	push	{r4, r5, lr}
 80095c6:	d10e      	bne.n	80095e6 <__mcmp+0x2a>
 80095c8:	3314      	adds	r3, #20
 80095ca:	3114      	adds	r1, #20
 80095cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80095d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80095dc:	4295      	cmp	r5, r2
 80095de:	d003      	beq.n	80095e8 <__mcmp+0x2c>
 80095e0:	d205      	bcs.n	80095ee <__mcmp+0x32>
 80095e2:	f04f 30ff 	mov.w	r0, #4294967295
 80095e6:	bd30      	pop	{r4, r5, pc}
 80095e8:	42a3      	cmp	r3, r4
 80095ea:	d3f3      	bcc.n	80095d4 <__mcmp+0x18>
 80095ec:	e7fb      	b.n	80095e6 <__mcmp+0x2a>
 80095ee:	2001      	movs	r0, #1
 80095f0:	e7f9      	b.n	80095e6 <__mcmp+0x2a>
	...

080095f4 <__mdiff>:
 80095f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	4689      	mov	r9, r1
 80095fa:	4606      	mov	r6, r0
 80095fc:	4611      	mov	r1, r2
 80095fe:	4648      	mov	r0, r9
 8009600:	4614      	mov	r4, r2
 8009602:	f7ff ffdb 	bl	80095bc <__mcmp>
 8009606:	1e05      	subs	r5, r0, #0
 8009608:	d112      	bne.n	8009630 <__mdiff+0x3c>
 800960a:	4629      	mov	r1, r5
 800960c:	4630      	mov	r0, r6
 800960e:	f7ff fd5b 	bl	80090c8 <_Balloc>
 8009612:	4602      	mov	r2, r0
 8009614:	b928      	cbnz	r0, 8009622 <__mdiff+0x2e>
 8009616:	4b3f      	ldr	r3, [pc, #252]	@ (8009714 <__mdiff+0x120>)
 8009618:	f240 2137 	movw	r1, #567	@ 0x237
 800961c:	483e      	ldr	r0, [pc, #248]	@ (8009718 <__mdiff+0x124>)
 800961e:	f000 fb03 	bl	8009c28 <__assert_func>
 8009622:	2301      	movs	r3, #1
 8009624:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009628:	4610      	mov	r0, r2
 800962a:	b003      	add	sp, #12
 800962c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009630:	bfbc      	itt	lt
 8009632:	464b      	movlt	r3, r9
 8009634:	46a1      	movlt	r9, r4
 8009636:	4630      	mov	r0, r6
 8009638:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800963c:	bfba      	itte	lt
 800963e:	461c      	movlt	r4, r3
 8009640:	2501      	movlt	r5, #1
 8009642:	2500      	movge	r5, #0
 8009644:	f7ff fd40 	bl	80090c8 <_Balloc>
 8009648:	4602      	mov	r2, r0
 800964a:	b918      	cbnz	r0, 8009654 <__mdiff+0x60>
 800964c:	4b31      	ldr	r3, [pc, #196]	@ (8009714 <__mdiff+0x120>)
 800964e:	f240 2145 	movw	r1, #581	@ 0x245
 8009652:	e7e3      	b.n	800961c <__mdiff+0x28>
 8009654:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009658:	6926      	ldr	r6, [r4, #16]
 800965a:	60c5      	str	r5, [r0, #12]
 800965c:	f109 0310 	add.w	r3, r9, #16
 8009660:	f109 0514 	add.w	r5, r9, #20
 8009664:	f104 0e14 	add.w	lr, r4, #20
 8009668:	f100 0b14 	add.w	fp, r0, #20
 800966c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009670:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009674:	9301      	str	r3, [sp, #4]
 8009676:	46d9      	mov	r9, fp
 8009678:	f04f 0c00 	mov.w	ip, #0
 800967c:	9b01      	ldr	r3, [sp, #4]
 800967e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009682:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009686:	9301      	str	r3, [sp, #4]
 8009688:	fa1f f38a 	uxth.w	r3, sl
 800968c:	4619      	mov	r1, r3
 800968e:	b283      	uxth	r3, r0
 8009690:	1acb      	subs	r3, r1, r3
 8009692:	0c00      	lsrs	r0, r0, #16
 8009694:	4463      	add	r3, ip
 8009696:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800969a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800969e:	b29b      	uxth	r3, r3
 80096a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096a4:	4576      	cmp	r6, lr
 80096a6:	f849 3b04 	str.w	r3, [r9], #4
 80096aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096ae:	d8e5      	bhi.n	800967c <__mdiff+0x88>
 80096b0:	1b33      	subs	r3, r6, r4
 80096b2:	3b15      	subs	r3, #21
 80096b4:	f023 0303 	bic.w	r3, r3, #3
 80096b8:	3415      	adds	r4, #21
 80096ba:	3304      	adds	r3, #4
 80096bc:	42a6      	cmp	r6, r4
 80096be:	bf38      	it	cc
 80096c0:	2304      	movcc	r3, #4
 80096c2:	441d      	add	r5, r3
 80096c4:	445b      	add	r3, fp
 80096c6:	461e      	mov	r6, r3
 80096c8:	462c      	mov	r4, r5
 80096ca:	4544      	cmp	r4, r8
 80096cc:	d30e      	bcc.n	80096ec <__mdiff+0xf8>
 80096ce:	f108 0103 	add.w	r1, r8, #3
 80096d2:	1b49      	subs	r1, r1, r5
 80096d4:	f021 0103 	bic.w	r1, r1, #3
 80096d8:	3d03      	subs	r5, #3
 80096da:	45a8      	cmp	r8, r5
 80096dc:	bf38      	it	cc
 80096de:	2100      	movcc	r1, #0
 80096e0:	440b      	add	r3, r1
 80096e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096e6:	b191      	cbz	r1, 800970e <__mdiff+0x11a>
 80096e8:	6117      	str	r7, [r2, #16]
 80096ea:	e79d      	b.n	8009628 <__mdiff+0x34>
 80096ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80096f0:	46e6      	mov	lr, ip
 80096f2:	0c08      	lsrs	r0, r1, #16
 80096f4:	fa1c fc81 	uxtah	ip, ip, r1
 80096f8:	4471      	add	r1, lr
 80096fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80096fe:	b289      	uxth	r1, r1
 8009700:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009704:	f846 1b04 	str.w	r1, [r6], #4
 8009708:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800970c:	e7dd      	b.n	80096ca <__mdiff+0xd6>
 800970e:	3f01      	subs	r7, #1
 8009710:	e7e7      	b.n	80096e2 <__mdiff+0xee>
 8009712:	bf00      	nop
 8009714:	0800ac38 	.word	0x0800ac38
 8009718:	0800ac49 	.word	0x0800ac49

0800971c <__d2b>:
 800971c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009720:	460f      	mov	r7, r1
 8009722:	2101      	movs	r1, #1
 8009724:	ec59 8b10 	vmov	r8, r9, d0
 8009728:	4616      	mov	r6, r2
 800972a:	f7ff fccd 	bl	80090c8 <_Balloc>
 800972e:	4604      	mov	r4, r0
 8009730:	b930      	cbnz	r0, 8009740 <__d2b+0x24>
 8009732:	4602      	mov	r2, r0
 8009734:	4b23      	ldr	r3, [pc, #140]	@ (80097c4 <__d2b+0xa8>)
 8009736:	4824      	ldr	r0, [pc, #144]	@ (80097c8 <__d2b+0xac>)
 8009738:	f240 310f 	movw	r1, #783	@ 0x30f
 800973c:	f000 fa74 	bl	8009c28 <__assert_func>
 8009740:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009744:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009748:	b10d      	cbz	r5, 800974e <__d2b+0x32>
 800974a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800974e:	9301      	str	r3, [sp, #4]
 8009750:	f1b8 0300 	subs.w	r3, r8, #0
 8009754:	d023      	beq.n	800979e <__d2b+0x82>
 8009756:	4668      	mov	r0, sp
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	f7ff fd7c 	bl	8009256 <__lo0bits>
 800975e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009762:	b1d0      	cbz	r0, 800979a <__d2b+0x7e>
 8009764:	f1c0 0320 	rsb	r3, r0, #32
 8009768:	fa02 f303 	lsl.w	r3, r2, r3
 800976c:	430b      	orrs	r3, r1
 800976e:	40c2      	lsrs	r2, r0
 8009770:	6163      	str	r3, [r4, #20]
 8009772:	9201      	str	r2, [sp, #4]
 8009774:	9b01      	ldr	r3, [sp, #4]
 8009776:	61a3      	str	r3, [r4, #24]
 8009778:	2b00      	cmp	r3, #0
 800977a:	bf0c      	ite	eq
 800977c:	2201      	moveq	r2, #1
 800977e:	2202      	movne	r2, #2
 8009780:	6122      	str	r2, [r4, #16]
 8009782:	b1a5      	cbz	r5, 80097ae <__d2b+0x92>
 8009784:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009788:	4405      	add	r5, r0
 800978a:	603d      	str	r5, [r7, #0]
 800978c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009790:	6030      	str	r0, [r6, #0]
 8009792:	4620      	mov	r0, r4
 8009794:	b003      	add	sp, #12
 8009796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800979a:	6161      	str	r1, [r4, #20]
 800979c:	e7ea      	b.n	8009774 <__d2b+0x58>
 800979e:	a801      	add	r0, sp, #4
 80097a0:	f7ff fd59 	bl	8009256 <__lo0bits>
 80097a4:	9b01      	ldr	r3, [sp, #4]
 80097a6:	6163      	str	r3, [r4, #20]
 80097a8:	3020      	adds	r0, #32
 80097aa:	2201      	movs	r2, #1
 80097ac:	e7e8      	b.n	8009780 <__d2b+0x64>
 80097ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097b6:	6038      	str	r0, [r7, #0]
 80097b8:	6918      	ldr	r0, [r3, #16]
 80097ba:	f7ff fd2d 	bl	8009218 <__hi0bits>
 80097be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097c2:	e7e5      	b.n	8009790 <__d2b+0x74>
 80097c4:	0800ac38 	.word	0x0800ac38
 80097c8:	0800ac49 	.word	0x0800ac49

080097cc <__ssputs_r>:
 80097cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d0:	688e      	ldr	r6, [r1, #8]
 80097d2:	461f      	mov	r7, r3
 80097d4:	42be      	cmp	r6, r7
 80097d6:	680b      	ldr	r3, [r1, #0]
 80097d8:	4682      	mov	sl, r0
 80097da:	460c      	mov	r4, r1
 80097dc:	4690      	mov	r8, r2
 80097de:	d82d      	bhi.n	800983c <__ssputs_r+0x70>
 80097e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097e8:	d026      	beq.n	8009838 <__ssputs_r+0x6c>
 80097ea:	6965      	ldr	r5, [r4, #20]
 80097ec:	6909      	ldr	r1, [r1, #16]
 80097ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097f2:	eba3 0901 	sub.w	r9, r3, r1
 80097f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097fa:	1c7b      	adds	r3, r7, #1
 80097fc:	444b      	add	r3, r9
 80097fe:	106d      	asrs	r5, r5, #1
 8009800:	429d      	cmp	r5, r3
 8009802:	bf38      	it	cc
 8009804:	461d      	movcc	r5, r3
 8009806:	0553      	lsls	r3, r2, #21
 8009808:	d527      	bpl.n	800985a <__ssputs_r+0x8e>
 800980a:	4629      	mov	r1, r5
 800980c:	f7ff fbd0 	bl	8008fb0 <_malloc_r>
 8009810:	4606      	mov	r6, r0
 8009812:	b360      	cbz	r0, 800986e <__ssputs_r+0xa2>
 8009814:	6921      	ldr	r1, [r4, #16]
 8009816:	464a      	mov	r2, r9
 8009818:	f7fe fcfb 	bl	8008212 <memcpy>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	6126      	str	r6, [r4, #16]
 800982a:	6165      	str	r5, [r4, #20]
 800982c:	444e      	add	r6, r9
 800982e:	eba5 0509 	sub.w	r5, r5, r9
 8009832:	6026      	str	r6, [r4, #0]
 8009834:	60a5      	str	r5, [r4, #8]
 8009836:	463e      	mov	r6, r7
 8009838:	42be      	cmp	r6, r7
 800983a:	d900      	bls.n	800983e <__ssputs_r+0x72>
 800983c:	463e      	mov	r6, r7
 800983e:	6820      	ldr	r0, [r4, #0]
 8009840:	4632      	mov	r2, r6
 8009842:	4641      	mov	r1, r8
 8009844:	f000 f9c6 	bl	8009bd4 <memmove>
 8009848:	68a3      	ldr	r3, [r4, #8]
 800984a:	1b9b      	subs	r3, r3, r6
 800984c:	60a3      	str	r3, [r4, #8]
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	4433      	add	r3, r6
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	2000      	movs	r0, #0
 8009856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985a:	462a      	mov	r2, r5
 800985c:	f000 fa28 	bl	8009cb0 <_realloc_r>
 8009860:	4606      	mov	r6, r0
 8009862:	2800      	cmp	r0, #0
 8009864:	d1e0      	bne.n	8009828 <__ssputs_r+0x5c>
 8009866:	6921      	ldr	r1, [r4, #16]
 8009868:	4650      	mov	r0, sl
 800986a:	f7ff fb2d 	bl	8008ec8 <_free_r>
 800986e:	230c      	movs	r3, #12
 8009870:	f8ca 3000 	str.w	r3, [sl]
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800987a:	81a3      	strh	r3, [r4, #12]
 800987c:	f04f 30ff 	mov.w	r0, #4294967295
 8009880:	e7e9      	b.n	8009856 <__ssputs_r+0x8a>
	...

08009884 <_svfiprintf_r>:
 8009884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009888:	4698      	mov	r8, r3
 800988a:	898b      	ldrh	r3, [r1, #12]
 800988c:	061b      	lsls	r3, r3, #24
 800988e:	b09d      	sub	sp, #116	@ 0x74
 8009890:	4607      	mov	r7, r0
 8009892:	460d      	mov	r5, r1
 8009894:	4614      	mov	r4, r2
 8009896:	d510      	bpl.n	80098ba <_svfiprintf_r+0x36>
 8009898:	690b      	ldr	r3, [r1, #16]
 800989a:	b973      	cbnz	r3, 80098ba <_svfiprintf_r+0x36>
 800989c:	2140      	movs	r1, #64	@ 0x40
 800989e:	f7ff fb87 	bl	8008fb0 <_malloc_r>
 80098a2:	6028      	str	r0, [r5, #0]
 80098a4:	6128      	str	r0, [r5, #16]
 80098a6:	b930      	cbnz	r0, 80098b6 <_svfiprintf_r+0x32>
 80098a8:	230c      	movs	r3, #12
 80098aa:	603b      	str	r3, [r7, #0]
 80098ac:	f04f 30ff 	mov.w	r0, #4294967295
 80098b0:	b01d      	add	sp, #116	@ 0x74
 80098b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b6:	2340      	movs	r3, #64	@ 0x40
 80098b8:	616b      	str	r3, [r5, #20]
 80098ba:	2300      	movs	r3, #0
 80098bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80098be:	2320      	movs	r3, #32
 80098c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80098c8:	2330      	movs	r3, #48	@ 0x30
 80098ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a68 <_svfiprintf_r+0x1e4>
 80098ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098d2:	f04f 0901 	mov.w	r9, #1
 80098d6:	4623      	mov	r3, r4
 80098d8:	469a      	mov	sl, r3
 80098da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098de:	b10a      	cbz	r2, 80098e4 <_svfiprintf_r+0x60>
 80098e0:	2a25      	cmp	r2, #37	@ 0x25
 80098e2:	d1f9      	bne.n	80098d8 <_svfiprintf_r+0x54>
 80098e4:	ebba 0b04 	subs.w	fp, sl, r4
 80098e8:	d00b      	beq.n	8009902 <_svfiprintf_r+0x7e>
 80098ea:	465b      	mov	r3, fp
 80098ec:	4622      	mov	r2, r4
 80098ee:	4629      	mov	r1, r5
 80098f0:	4638      	mov	r0, r7
 80098f2:	f7ff ff6b 	bl	80097cc <__ssputs_r>
 80098f6:	3001      	adds	r0, #1
 80098f8:	f000 80a7 	beq.w	8009a4a <_svfiprintf_r+0x1c6>
 80098fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098fe:	445a      	add	r2, fp
 8009900:	9209      	str	r2, [sp, #36]	@ 0x24
 8009902:	f89a 3000 	ldrb.w	r3, [sl]
 8009906:	2b00      	cmp	r3, #0
 8009908:	f000 809f 	beq.w	8009a4a <_svfiprintf_r+0x1c6>
 800990c:	2300      	movs	r3, #0
 800990e:	f04f 32ff 	mov.w	r2, #4294967295
 8009912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009916:	f10a 0a01 	add.w	sl, sl, #1
 800991a:	9304      	str	r3, [sp, #16]
 800991c:	9307      	str	r3, [sp, #28]
 800991e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009922:	931a      	str	r3, [sp, #104]	@ 0x68
 8009924:	4654      	mov	r4, sl
 8009926:	2205      	movs	r2, #5
 8009928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800992c:	484e      	ldr	r0, [pc, #312]	@ (8009a68 <_svfiprintf_r+0x1e4>)
 800992e:	f7f6 fc67 	bl	8000200 <memchr>
 8009932:	9a04      	ldr	r2, [sp, #16]
 8009934:	b9d8      	cbnz	r0, 800996e <_svfiprintf_r+0xea>
 8009936:	06d0      	lsls	r0, r2, #27
 8009938:	bf44      	itt	mi
 800993a:	2320      	movmi	r3, #32
 800993c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009940:	0711      	lsls	r1, r2, #28
 8009942:	bf44      	itt	mi
 8009944:	232b      	movmi	r3, #43	@ 0x2b
 8009946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800994a:	f89a 3000 	ldrb.w	r3, [sl]
 800994e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009950:	d015      	beq.n	800997e <_svfiprintf_r+0xfa>
 8009952:	9a07      	ldr	r2, [sp, #28]
 8009954:	4654      	mov	r4, sl
 8009956:	2000      	movs	r0, #0
 8009958:	f04f 0c0a 	mov.w	ip, #10
 800995c:	4621      	mov	r1, r4
 800995e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009962:	3b30      	subs	r3, #48	@ 0x30
 8009964:	2b09      	cmp	r3, #9
 8009966:	d94b      	bls.n	8009a00 <_svfiprintf_r+0x17c>
 8009968:	b1b0      	cbz	r0, 8009998 <_svfiprintf_r+0x114>
 800996a:	9207      	str	r2, [sp, #28]
 800996c:	e014      	b.n	8009998 <_svfiprintf_r+0x114>
 800996e:	eba0 0308 	sub.w	r3, r0, r8
 8009972:	fa09 f303 	lsl.w	r3, r9, r3
 8009976:	4313      	orrs	r3, r2
 8009978:	9304      	str	r3, [sp, #16]
 800997a:	46a2      	mov	sl, r4
 800997c:	e7d2      	b.n	8009924 <_svfiprintf_r+0xa0>
 800997e:	9b03      	ldr	r3, [sp, #12]
 8009980:	1d19      	adds	r1, r3, #4
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	9103      	str	r1, [sp, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	bfbb      	ittet	lt
 800998a:	425b      	neglt	r3, r3
 800998c:	f042 0202 	orrlt.w	r2, r2, #2
 8009990:	9307      	strge	r3, [sp, #28]
 8009992:	9307      	strlt	r3, [sp, #28]
 8009994:	bfb8      	it	lt
 8009996:	9204      	strlt	r2, [sp, #16]
 8009998:	7823      	ldrb	r3, [r4, #0]
 800999a:	2b2e      	cmp	r3, #46	@ 0x2e
 800999c:	d10a      	bne.n	80099b4 <_svfiprintf_r+0x130>
 800999e:	7863      	ldrb	r3, [r4, #1]
 80099a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80099a2:	d132      	bne.n	8009a0a <_svfiprintf_r+0x186>
 80099a4:	9b03      	ldr	r3, [sp, #12]
 80099a6:	1d1a      	adds	r2, r3, #4
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	9203      	str	r2, [sp, #12]
 80099ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099b0:	3402      	adds	r4, #2
 80099b2:	9305      	str	r3, [sp, #20]
 80099b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a78 <_svfiprintf_r+0x1f4>
 80099b8:	7821      	ldrb	r1, [r4, #0]
 80099ba:	2203      	movs	r2, #3
 80099bc:	4650      	mov	r0, sl
 80099be:	f7f6 fc1f 	bl	8000200 <memchr>
 80099c2:	b138      	cbz	r0, 80099d4 <_svfiprintf_r+0x150>
 80099c4:	9b04      	ldr	r3, [sp, #16]
 80099c6:	eba0 000a 	sub.w	r0, r0, sl
 80099ca:	2240      	movs	r2, #64	@ 0x40
 80099cc:	4082      	lsls	r2, r0
 80099ce:	4313      	orrs	r3, r2
 80099d0:	3401      	adds	r4, #1
 80099d2:	9304      	str	r3, [sp, #16]
 80099d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099d8:	4824      	ldr	r0, [pc, #144]	@ (8009a6c <_svfiprintf_r+0x1e8>)
 80099da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099de:	2206      	movs	r2, #6
 80099e0:	f7f6 fc0e 	bl	8000200 <memchr>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d036      	beq.n	8009a56 <_svfiprintf_r+0x1d2>
 80099e8:	4b21      	ldr	r3, [pc, #132]	@ (8009a70 <_svfiprintf_r+0x1ec>)
 80099ea:	bb1b      	cbnz	r3, 8009a34 <_svfiprintf_r+0x1b0>
 80099ec:	9b03      	ldr	r3, [sp, #12]
 80099ee:	3307      	adds	r3, #7
 80099f0:	f023 0307 	bic.w	r3, r3, #7
 80099f4:	3308      	adds	r3, #8
 80099f6:	9303      	str	r3, [sp, #12]
 80099f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099fa:	4433      	add	r3, r6
 80099fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80099fe:	e76a      	b.n	80098d6 <_svfiprintf_r+0x52>
 8009a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a04:	460c      	mov	r4, r1
 8009a06:	2001      	movs	r0, #1
 8009a08:	e7a8      	b.n	800995c <_svfiprintf_r+0xd8>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	3401      	adds	r4, #1
 8009a0e:	9305      	str	r3, [sp, #20]
 8009a10:	4619      	mov	r1, r3
 8009a12:	f04f 0c0a 	mov.w	ip, #10
 8009a16:	4620      	mov	r0, r4
 8009a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a1c:	3a30      	subs	r2, #48	@ 0x30
 8009a1e:	2a09      	cmp	r2, #9
 8009a20:	d903      	bls.n	8009a2a <_svfiprintf_r+0x1a6>
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d0c6      	beq.n	80099b4 <_svfiprintf_r+0x130>
 8009a26:	9105      	str	r1, [sp, #20]
 8009a28:	e7c4      	b.n	80099b4 <_svfiprintf_r+0x130>
 8009a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a2e:	4604      	mov	r4, r0
 8009a30:	2301      	movs	r3, #1
 8009a32:	e7f0      	b.n	8009a16 <_svfiprintf_r+0x192>
 8009a34:	ab03      	add	r3, sp, #12
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	462a      	mov	r2, r5
 8009a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009a74 <_svfiprintf_r+0x1f0>)
 8009a3c:	a904      	add	r1, sp, #16
 8009a3e:	4638      	mov	r0, r7
 8009a40:	f7fd fe8a 	bl	8007758 <_printf_float>
 8009a44:	1c42      	adds	r2, r0, #1
 8009a46:	4606      	mov	r6, r0
 8009a48:	d1d6      	bne.n	80099f8 <_svfiprintf_r+0x174>
 8009a4a:	89ab      	ldrh	r3, [r5, #12]
 8009a4c:	065b      	lsls	r3, r3, #25
 8009a4e:	f53f af2d 	bmi.w	80098ac <_svfiprintf_r+0x28>
 8009a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a54:	e72c      	b.n	80098b0 <_svfiprintf_r+0x2c>
 8009a56:	ab03      	add	r3, sp, #12
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	4b05      	ldr	r3, [pc, #20]	@ (8009a74 <_svfiprintf_r+0x1f0>)
 8009a5e:	a904      	add	r1, sp, #16
 8009a60:	4638      	mov	r0, r7
 8009a62:	f7fe f911 	bl	8007c88 <_printf_i>
 8009a66:	e7ed      	b.n	8009a44 <_svfiprintf_r+0x1c0>
 8009a68:	0800ada0 	.word	0x0800ada0
 8009a6c:	0800adaa 	.word	0x0800adaa
 8009a70:	08007759 	.word	0x08007759
 8009a74:	080097cd 	.word	0x080097cd
 8009a78:	0800ada6 	.word	0x0800ada6

08009a7c <__sflush_r>:
 8009a7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a84:	0716      	lsls	r6, r2, #28
 8009a86:	4605      	mov	r5, r0
 8009a88:	460c      	mov	r4, r1
 8009a8a:	d454      	bmi.n	8009b36 <__sflush_r+0xba>
 8009a8c:	684b      	ldr	r3, [r1, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	dc02      	bgt.n	8009a98 <__sflush_r+0x1c>
 8009a92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	dd48      	ble.n	8009b2a <__sflush_r+0xae>
 8009a98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a9a:	2e00      	cmp	r6, #0
 8009a9c:	d045      	beq.n	8009b2a <__sflush_r+0xae>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009aa4:	682f      	ldr	r7, [r5, #0]
 8009aa6:	6a21      	ldr	r1, [r4, #32]
 8009aa8:	602b      	str	r3, [r5, #0]
 8009aaa:	d030      	beq.n	8009b0e <__sflush_r+0x92>
 8009aac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	0759      	lsls	r1, r3, #29
 8009ab2:	d505      	bpl.n	8009ac0 <__sflush_r+0x44>
 8009ab4:	6863      	ldr	r3, [r4, #4]
 8009ab6:	1ad2      	subs	r2, r2, r3
 8009ab8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009aba:	b10b      	cbz	r3, 8009ac0 <__sflush_r+0x44>
 8009abc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009abe:	1ad2      	subs	r2, r2, r3
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ac4:	6a21      	ldr	r1, [r4, #32]
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	47b0      	blx	r6
 8009aca:	1c43      	adds	r3, r0, #1
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	d106      	bne.n	8009ade <__sflush_r+0x62>
 8009ad0:	6829      	ldr	r1, [r5, #0]
 8009ad2:	291d      	cmp	r1, #29
 8009ad4:	d82b      	bhi.n	8009b2e <__sflush_r+0xb2>
 8009ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8009b80 <__sflush_r+0x104>)
 8009ad8:	410a      	asrs	r2, r1
 8009ada:	07d6      	lsls	r6, r2, #31
 8009adc:	d427      	bmi.n	8009b2e <__sflush_r+0xb2>
 8009ade:	2200      	movs	r2, #0
 8009ae0:	6062      	str	r2, [r4, #4]
 8009ae2:	04d9      	lsls	r1, r3, #19
 8009ae4:	6922      	ldr	r2, [r4, #16]
 8009ae6:	6022      	str	r2, [r4, #0]
 8009ae8:	d504      	bpl.n	8009af4 <__sflush_r+0x78>
 8009aea:	1c42      	adds	r2, r0, #1
 8009aec:	d101      	bne.n	8009af2 <__sflush_r+0x76>
 8009aee:	682b      	ldr	r3, [r5, #0]
 8009af0:	b903      	cbnz	r3, 8009af4 <__sflush_r+0x78>
 8009af2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009af4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009af6:	602f      	str	r7, [r5, #0]
 8009af8:	b1b9      	cbz	r1, 8009b2a <__sflush_r+0xae>
 8009afa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009afe:	4299      	cmp	r1, r3
 8009b00:	d002      	beq.n	8009b08 <__sflush_r+0x8c>
 8009b02:	4628      	mov	r0, r5
 8009b04:	f7ff f9e0 	bl	8008ec8 <_free_r>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b0c:	e00d      	b.n	8009b2a <__sflush_r+0xae>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	4628      	mov	r0, r5
 8009b12:	47b0      	blx	r6
 8009b14:	4602      	mov	r2, r0
 8009b16:	1c50      	adds	r0, r2, #1
 8009b18:	d1c9      	bne.n	8009aae <__sflush_r+0x32>
 8009b1a:	682b      	ldr	r3, [r5, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d0c6      	beq.n	8009aae <__sflush_r+0x32>
 8009b20:	2b1d      	cmp	r3, #29
 8009b22:	d001      	beq.n	8009b28 <__sflush_r+0xac>
 8009b24:	2b16      	cmp	r3, #22
 8009b26:	d11e      	bne.n	8009b66 <__sflush_r+0xea>
 8009b28:	602f      	str	r7, [r5, #0]
 8009b2a:	2000      	movs	r0, #0
 8009b2c:	e022      	b.n	8009b74 <__sflush_r+0xf8>
 8009b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b32:	b21b      	sxth	r3, r3
 8009b34:	e01b      	b.n	8009b6e <__sflush_r+0xf2>
 8009b36:	690f      	ldr	r7, [r1, #16]
 8009b38:	2f00      	cmp	r7, #0
 8009b3a:	d0f6      	beq.n	8009b2a <__sflush_r+0xae>
 8009b3c:	0793      	lsls	r3, r2, #30
 8009b3e:	680e      	ldr	r6, [r1, #0]
 8009b40:	bf08      	it	eq
 8009b42:	694b      	ldreq	r3, [r1, #20]
 8009b44:	600f      	str	r7, [r1, #0]
 8009b46:	bf18      	it	ne
 8009b48:	2300      	movne	r3, #0
 8009b4a:	eba6 0807 	sub.w	r8, r6, r7
 8009b4e:	608b      	str	r3, [r1, #8]
 8009b50:	f1b8 0f00 	cmp.w	r8, #0
 8009b54:	dde9      	ble.n	8009b2a <__sflush_r+0xae>
 8009b56:	6a21      	ldr	r1, [r4, #32]
 8009b58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b5a:	4643      	mov	r3, r8
 8009b5c:	463a      	mov	r2, r7
 8009b5e:	4628      	mov	r0, r5
 8009b60:	47b0      	blx	r6
 8009b62:	2800      	cmp	r0, #0
 8009b64:	dc08      	bgt.n	8009b78 <__sflush_r+0xfc>
 8009b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b6e:	81a3      	strh	r3, [r4, #12]
 8009b70:	f04f 30ff 	mov.w	r0, #4294967295
 8009b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b78:	4407      	add	r7, r0
 8009b7a:	eba8 0800 	sub.w	r8, r8, r0
 8009b7e:	e7e7      	b.n	8009b50 <__sflush_r+0xd4>
 8009b80:	dfbffffe 	.word	0xdfbffffe

08009b84 <_fflush_r>:
 8009b84:	b538      	push	{r3, r4, r5, lr}
 8009b86:	690b      	ldr	r3, [r1, #16]
 8009b88:	4605      	mov	r5, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	b913      	cbnz	r3, 8009b94 <_fflush_r+0x10>
 8009b8e:	2500      	movs	r5, #0
 8009b90:	4628      	mov	r0, r5
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
 8009b94:	b118      	cbz	r0, 8009b9e <_fflush_r+0x1a>
 8009b96:	6a03      	ldr	r3, [r0, #32]
 8009b98:	b90b      	cbnz	r3, 8009b9e <_fflush_r+0x1a>
 8009b9a:	f7fe fa21 	bl	8007fe0 <__sinit>
 8009b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0f3      	beq.n	8009b8e <_fflush_r+0xa>
 8009ba6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ba8:	07d0      	lsls	r0, r2, #31
 8009baa:	d404      	bmi.n	8009bb6 <_fflush_r+0x32>
 8009bac:	0599      	lsls	r1, r3, #22
 8009bae:	d402      	bmi.n	8009bb6 <_fflush_r+0x32>
 8009bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bb2:	f7fe fb2c 	bl	800820e <__retarget_lock_acquire_recursive>
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	4621      	mov	r1, r4
 8009bba:	f7ff ff5f 	bl	8009a7c <__sflush_r>
 8009bbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bc0:	07da      	lsls	r2, r3, #31
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	d4e4      	bmi.n	8009b90 <_fflush_r+0xc>
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	059b      	lsls	r3, r3, #22
 8009bca:	d4e1      	bmi.n	8009b90 <_fflush_r+0xc>
 8009bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bce:	f7fe fb1f 	bl	8008210 <__retarget_lock_release_recursive>
 8009bd2:	e7dd      	b.n	8009b90 <_fflush_r+0xc>

08009bd4 <memmove>:
 8009bd4:	4288      	cmp	r0, r1
 8009bd6:	b510      	push	{r4, lr}
 8009bd8:	eb01 0402 	add.w	r4, r1, r2
 8009bdc:	d902      	bls.n	8009be4 <memmove+0x10>
 8009bde:	4284      	cmp	r4, r0
 8009be0:	4623      	mov	r3, r4
 8009be2:	d807      	bhi.n	8009bf4 <memmove+0x20>
 8009be4:	1e43      	subs	r3, r0, #1
 8009be6:	42a1      	cmp	r1, r4
 8009be8:	d008      	beq.n	8009bfc <memmove+0x28>
 8009bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bf2:	e7f8      	b.n	8009be6 <memmove+0x12>
 8009bf4:	4402      	add	r2, r0
 8009bf6:	4601      	mov	r1, r0
 8009bf8:	428a      	cmp	r2, r1
 8009bfa:	d100      	bne.n	8009bfe <memmove+0x2a>
 8009bfc:	bd10      	pop	{r4, pc}
 8009bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c06:	e7f7      	b.n	8009bf8 <memmove+0x24>

08009c08 <_sbrk_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d06      	ldr	r5, [pc, #24]	@ (8009c24 <_sbrk_r+0x1c>)
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4604      	mov	r4, r0
 8009c10:	4608      	mov	r0, r1
 8009c12:	602b      	str	r3, [r5, #0]
 8009c14:	f7f8 fa72 	bl	80020fc <_sbrk>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_sbrk_r+0x1a>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_sbrk_r+0x1a>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	200026bc 	.word	0x200026bc

08009c28 <__assert_func>:
 8009c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c2a:	4614      	mov	r4, r2
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	4b09      	ldr	r3, [pc, #36]	@ (8009c54 <__assert_func+0x2c>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4605      	mov	r5, r0
 8009c34:	68d8      	ldr	r0, [r3, #12]
 8009c36:	b954      	cbnz	r4, 8009c4e <__assert_func+0x26>
 8009c38:	4b07      	ldr	r3, [pc, #28]	@ (8009c58 <__assert_func+0x30>)
 8009c3a:	461c      	mov	r4, r3
 8009c3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c40:	9100      	str	r1, [sp, #0]
 8009c42:	462b      	mov	r3, r5
 8009c44:	4905      	ldr	r1, [pc, #20]	@ (8009c5c <__assert_func+0x34>)
 8009c46:	f000 f86f 	bl	8009d28 <fiprintf>
 8009c4a:	f000 f87f 	bl	8009d4c <abort>
 8009c4e:	4b04      	ldr	r3, [pc, #16]	@ (8009c60 <__assert_func+0x38>)
 8009c50:	e7f4      	b.n	8009c3c <__assert_func+0x14>
 8009c52:	bf00      	nop
 8009c54:	200000bc 	.word	0x200000bc
 8009c58:	0800adf6 	.word	0x0800adf6
 8009c5c:	0800adc8 	.word	0x0800adc8
 8009c60:	0800adbb 	.word	0x0800adbb

08009c64 <_calloc_r>:
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	fba1 5402 	umull	r5, r4, r1, r2
 8009c6a:	b93c      	cbnz	r4, 8009c7c <_calloc_r+0x18>
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	f7ff f99f 	bl	8008fb0 <_malloc_r>
 8009c72:	4606      	mov	r6, r0
 8009c74:	b928      	cbnz	r0, 8009c82 <_calloc_r+0x1e>
 8009c76:	2600      	movs	r6, #0
 8009c78:	4630      	mov	r0, r6
 8009c7a:	bd70      	pop	{r4, r5, r6, pc}
 8009c7c:	220c      	movs	r2, #12
 8009c7e:	6002      	str	r2, [r0, #0]
 8009c80:	e7f9      	b.n	8009c76 <_calloc_r+0x12>
 8009c82:	462a      	mov	r2, r5
 8009c84:	4621      	mov	r1, r4
 8009c86:	f7fe fa44 	bl	8008112 <memset>
 8009c8a:	e7f5      	b.n	8009c78 <_calloc_r+0x14>

08009c8c <__ascii_mbtowc>:
 8009c8c:	b082      	sub	sp, #8
 8009c8e:	b901      	cbnz	r1, 8009c92 <__ascii_mbtowc+0x6>
 8009c90:	a901      	add	r1, sp, #4
 8009c92:	b142      	cbz	r2, 8009ca6 <__ascii_mbtowc+0x1a>
 8009c94:	b14b      	cbz	r3, 8009caa <__ascii_mbtowc+0x1e>
 8009c96:	7813      	ldrb	r3, [r2, #0]
 8009c98:	600b      	str	r3, [r1, #0]
 8009c9a:	7812      	ldrb	r2, [r2, #0]
 8009c9c:	1e10      	subs	r0, r2, #0
 8009c9e:	bf18      	it	ne
 8009ca0:	2001      	movne	r0, #1
 8009ca2:	b002      	add	sp, #8
 8009ca4:	4770      	bx	lr
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	e7fb      	b.n	8009ca2 <__ascii_mbtowc+0x16>
 8009caa:	f06f 0001 	mvn.w	r0, #1
 8009cae:	e7f8      	b.n	8009ca2 <__ascii_mbtowc+0x16>

08009cb0 <_realloc_r>:
 8009cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb4:	4680      	mov	r8, r0
 8009cb6:	4615      	mov	r5, r2
 8009cb8:	460c      	mov	r4, r1
 8009cba:	b921      	cbnz	r1, 8009cc6 <_realloc_r+0x16>
 8009cbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	f7ff b975 	b.w	8008fb0 <_malloc_r>
 8009cc6:	b92a      	cbnz	r2, 8009cd4 <_realloc_r+0x24>
 8009cc8:	f7ff f8fe 	bl	8008ec8 <_free_r>
 8009ccc:	2400      	movs	r4, #0
 8009cce:	4620      	mov	r0, r4
 8009cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd4:	f000 f841 	bl	8009d5a <_malloc_usable_size_r>
 8009cd8:	4285      	cmp	r5, r0
 8009cda:	4606      	mov	r6, r0
 8009cdc:	d802      	bhi.n	8009ce4 <_realloc_r+0x34>
 8009cde:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009ce2:	d8f4      	bhi.n	8009cce <_realloc_r+0x1e>
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	4640      	mov	r0, r8
 8009ce8:	f7ff f962 	bl	8008fb0 <_malloc_r>
 8009cec:	4607      	mov	r7, r0
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d0ec      	beq.n	8009ccc <_realloc_r+0x1c>
 8009cf2:	42b5      	cmp	r5, r6
 8009cf4:	462a      	mov	r2, r5
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	bf28      	it	cs
 8009cfa:	4632      	movcs	r2, r6
 8009cfc:	f7fe fa89 	bl	8008212 <memcpy>
 8009d00:	4621      	mov	r1, r4
 8009d02:	4640      	mov	r0, r8
 8009d04:	f7ff f8e0 	bl	8008ec8 <_free_r>
 8009d08:	463c      	mov	r4, r7
 8009d0a:	e7e0      	b.n	8009cce <_realloc_r+0x1e>

08009d0c <__ascii_wctomb>:
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	4608      	mov	r0, r1
 8009d10:	b141      	cbz	r1, 8009d24 <__ascii_wctomb+0x18>
 8009d12:	2aff      	cmp	r2, #255	@ 0xff
 8009d14:	d904      	bls.n	8009d20 <__ascii_wctomb+0x14>
 8009d16:	228a      	movs	r2, #138	@ 0x8a
 8009d18:	601a      	str	r2, [r3, #0]
 8009d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1e:	4770      	bx	lr
 8009d20:	700a      	strb	r2, [r1, #0]
 8009d22:	2001      	movs	r0, #1
 8009d24:	4770      	bx	lr
	...

08009d28 <fiprintf>:
 8009d28:	b40e      	push	{r1, r2, r3}
 8009d2a:	b503      	push	{r0, r1, lr}
 8009d2c:	4601      	mov	r1, r0
 8009d2e:	ab03      	add	r3, sp, #12
 8009d30:	4805      	ldr	r0, [pc, #20]	@ (8009d48 <fiprintf+0x20>)
 8009d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d36:	6800      	ldr	r0, [r0, #0]
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	f000 f83f 	bl	8009dbc <_vfiprintf_r>
 8009d3e:	b002      	add	sp, #8
 8009d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d44:	b003      	add	sp, #12
 8009d46:	4770      	bx	lr
 8009d48:	200000bc 	.word	0x200000bc

08009d4c <abort>:
 8009d4c:	b508      	push	{r3, lr}
 8009d4e:	2006      	movs	r0, #6
 8009d50:	f000 fa08 	bl	800a164 <raise>
 8009d54:	2001      	movs	r0, #1
 8009d56:	f7f8 f959 	bl	800200c <_exit>

08009d5a <_malloc_usable_size_r>:
 8009d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d5e:	1f18      	subs	r0, r3, #4
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	bfbc      	itt	lt
 8009d64:	580b      	ldrlt	r3, [r1, r0]
 8009d66:	18c0      	addlt	r0, r0, r3
 8009d68:	4770      	bx	lr

08009d6a <__sfputc_r>:
 8009d6a:	6893      	ldr	r3, [r2, #8]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	b410      	push	{r4}
 8009d72:	6093      	str	r3, [r2, #8]
 8009d74:	da08      	bge.n	8009d88 <__sfputc_r+0x1e>
 8009d76:	6994      	ldr	r4, [r2, #24]
 8009d78:	42a3      	cmp	r3, r4
 8009d7a:	db01      	blt.n	8009d80 <__sfputc_r+0x16>
 8009d7c:	290a      	cmp	r1, #10
 8009d7e:	d103      	bne.n	8009d88 <__sfputc_r+0x1e>
 8009d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d84:	f000 b932 	b.w	8009fec <__swbuf_r>
 8009d88:	6813      	ldr	r3, [r2, #0]
 8009d8a:	1c58      	adds	r0, r3, #1
 8009d8c:	6010      	str	r0, [r2, #0]
 8009d8e:	7019      	strb	r1, [r3, #0]
 8009d90:	4608      	mov	r0, r1
 8009d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <__sfputs_r>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	4614      	mov	r4, r2
 8009da0:	18d5      	adds	r5, r2, r3
 8009da2:	42ac      	cmp	r4, r5
 8009da4:	d101      	bne.n	8009daa <__sfputs_r+0x12>
 8009da6:	2000      	movs	r0, #0
 8009da8:	e007      	b.n	8009dba <__sfputs_r+0x22>
 8009daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dae:	463a      	mov	r2, r7
 8009db0:	4630      	mov	r0, r6
 8009db2:	f7ff ffda 	bl	8009d6a <__sfputc_r>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	d1f3      	bne.n	8009da2 <__sfputs_r+0xa>
 8009dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009dbc <_vfiprintf_r>:
 8009dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	460d      	mov	r5, r1
 8009dc2:	b09d      	sub	sp, #116	@ 0x74
 8009dc4:	4614      	mov	r4, r2
 8009dc6:	4698      	mov	r8, r3
 8009dc8:	4606      	mov	r6, r0
 8009dca:	b118      	cbz	r0, 8009dd4 <_vfiprintf_r+0x18>
 8009dcc:	6a03      	ldr	r3, [r0, #32]
 8009dce:	b90b      	cbnz	r3, 8009dd4 <_vfiprintf_r+0x18>
 8009dd0:	f7fe f906 	bl	8007fe0 <__sinit>
 8009dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dd6:	07d9      	lsls	r1, r3, #31
 8009dd8:	d405      	bmi.n	8009de6 <_vfiprintf_r+0x2a>
 8009dda:	89ab      	ldrh	r3, [r5, #12]
 8009ddc:	059a      	lsls	r2, r3, #22
 8009dde:	d402      	bmi.n	8009de6 <_vfiprintf_r+0x2a>
 8009de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009de2:	f7fe fa14 	bl	800820e <__retarget_lock_acquire_recursive>
 8009de6:	89ab      	ldrh	r3, [r5, #12]
 8009de8:	071b      	lsls	r3, r3, #28
 8009dea:	d501      	bpl.n	8009df0 <_vfiprintf_r+0x34>
 8009dec:	692b      	ldr	r3, [r5, #16]
 8009dee:	b99b      	cbnz	r3, 8009e18 <_vfiprintf_r+0x5c>
 8009df0:	4629      	mov	r1, r5
 8009df2:	4630      	mov	r0, r6
 8009df4:	f000 f938 	bl	800a068 <__swsetup_r>
 8009df8:	b170      	cbz	r0, 8009e18 <_vfiprintf_r+0x5c>
 8009dfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dfc:	07dc      	lsls	r4, r3, #31
 8009dfe:	d504      	bpl.n	8009e0a <_vfiprintf_r+0x4e>
 8009e00:	f04f 30ff 	mov.w	r0, #4294967295
 8009e04:	b01d      	add	sp, #116	@ 0x74
 8009e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0a:	89ab      	ldrh	r3, [r5, #12]
 8009e0c:	0598      	lsls	r0, r3, #22
 8009e0e:	d4f7      	bmi.n	8009e00 <_vfiprintf_r+0x44>
 8009e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e12:	f7fe f9fd 	bl	8008210 <__retarget_lock_release_recursive>
 8009e16:	e7f3      	b.n	8009e00 <_vfiprintf_r+0x44>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e1c:	2320      	movs	r3, #32
 8009e1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e26:	2330      	movs	r3, #48	@ 0x30
 8009e28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fd8 <_vfiprintf_r+0x21c>
 8009e2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e30:	f04f 0901 	mov.w	r9, #1
 8009e34:	4623      	mov	r3, r4
 8009e36:	469a      	mov	sl, r3
 8009e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e3c:	b10a      	cbz	r2, 8009e42 <_vfiprintf_r+0x86>
 8009e3e:	2a25      	cmp	r2, #37	@ 0x25
 8009e40:	d1f9      	bne.n	8009e36 <_vfiprintf_r+0x7a>
 8009e42:	ebba 0b04 	subs.w	fp, sl, r4
 8009e46:	d00b      	beq.n	8009e60 <_vfiprintf_r+0xa4>
 8009e48:	465b      	mov	r3, fp
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f7ff ffa2 	bl	8009d98 <__sfputs_r>
 8009e54:	3001      	adds	r0, #1
 8009e56:	f000 80a7 	beq.w	8009fa8 <_vfiprintf_r+0x1ec>
 8009e5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e5c:	445a      	add	r2, fp
 8009e5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e60:	f89a 3000 	ldrb.w	r3, [sl]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f000 809f 	beq.w	8009fa8 <_vfiprintf_r+0x1ec>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e74:	f10a 0a01 	add.w	sl, sl, #1
 8009e78:	9304      	str	r3, [sp, #16]
 8009e7a:	9307      	str	r3, [sp, #28]
 8009e7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e80:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e82:	4654      	mov	r4, sl
 8009e84:	2205      	movs	r2, #5
 8009e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e8a:	4853      	ldr	r0, [pc, #332]	@ (8009fd8 <_vfiprintf_r+0x21c>)
 8009e8c:	f7f6 f9b8 	bl	8000200 <memchr>
 8009e90:	9a04      	ldr	r2, [sp, #16]
 8009e92:	b9d8      	cbnz	r0, 8009ecc <_vfiprintf_r+0x110>
 8009e94:	06d1      	lsls	r1, r2, #27
 8009e96:	bf44      	itt	mi
 8009e98:	2320      	movmi	r3, #32
 8009e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e9e:	0713      	lsls	r3, r2, #28
 8009ea0:	bf44      	itt	mi
 8009ea2:	232b      	movmi	r3, #43	@ 0x2b
 8009ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8009eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8009eae:	d015      	beq.n	8009edc <_vfiprintf_r+0x120>
 8009eb0:	9a07      	ldr	r2, [sp, #28]
 8009eb2:	4654      	mov	r4, sl
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	f04f 0c0a 	mov.w	ip, #10
 8009eba:	4621      	mov	r1, r4
 8009ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ec0:	3b30      	subs	r3, #48	@ 0x30
 8009ec2:	2b09      	cmp	r3, #9
 8009ec4:	d94b      	bls.n	8009f5e <_vfiprintf_r+0x1a2>
 8009ec6:	b1b0      	cbz	r0, 8009ef6 <_vfiprintf_r+0x13a>
 8009ec8:	9207      	str	r2, [sp, #28]
 8009eca:	e014      	b.n	8009ef6 <_vfiprintf_r+0x13a>
 8009ecc:	eba0 0308 	sub.w	r3, r0, r8
 8009ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	9304      	str	r3, [sp, #16]
 8009ed8:	46a2      	mov	sl, r4
 8009eda:	e7d2      	b.n	8009e82 <_vfiprintf_r+0xc6>
 8009edc:	9b03      	ldr	r3, [sp, #12]
 8009ede:	1d19      	adds	r1, r3, #4
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	9103      	str	r1, [sp, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	bfbb      	ittet	lt
 8009ee8:	425b      	neglt	r3, r3
 8009eea:	f042 0202 	orrlt.w	r2, r2, #2
 8009eee:	9307      	strge	r3, [sp, #28]
 8009ef0:	9307      	strlt	r3, [sp, #28]
 8009ef2:	bfb8      	it	lt
 8009ef4:	9204      	strlt	r2, [sp, #16]
 8009ef6:	7823      	ldrb	r3, [r4, #0]
 8009ef8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009efa:	d10a      	bne.n	8009f12 <_vfiprintf_r+0x156>
 8009efc:	7863      	ldrb	r3, [r4, #1]
 8009efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f00:	d132      	bne.n	8009f68 <_vfiprintf_r+0x1ac>
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	1d1a      	adds	r2, r3, #4
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	9203      	str	r2, [sp, #12]
 8009f0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f0e:	3402      	adds	r4, #2
 8009f10:	9305      	str	r3, [sp, #20]
 8009f12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009fe8 <_vfiprintf_r+0x22c>
 8009f16:	7821      	ldrb	r1, [r4, #0]
 8009f18:	2203      	movs	r2, #3
 8009f1a:	4650      	mov	r0, sl
 8009f1c:	f7f6 f970 	bl	8000200 <memchr>
 8009f20:	b138      	cbz	r0, 8009f32 <_vfiprintf_r+0x176>
 8009f22:	9b04      	ldr	r3, [sp, #16]
 8009f24:	eba0 000a 	sub.w	r0, r0, sl
 8009f28:	2240      	movs	r2, #64	@ 0x40
 8009f2a:	4082      	lsls	r2, r0
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	3401      	adds	r4, #1
 8009f30:	9304      	str	r3, [sp, #16]
 8009f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f36:	4829      	ldr	r0, [pc, #164]	@ (8009fdc <_vfiprintf_r+0x220>)
 8009f38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f3c:	2206      	movs	r2, #6
 8009f3e:	f7f6 f95f 	bl	8000200 <memchr>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d03f      	beq.n	8009fc6 <_vfiprintf_r+0x20a>
 8009f46:	4b26      	ldr	r3, [pc, #152]	@ (8009fe0 <_vfiprintf_r+0x224>)
 8009f48:	bb1b      	cbnz	r3, 8009f92 <_vfiprintf_r+0x1d6>
 8009f4a:	9b03      	ldr	r3, [sp, #12]
 8009f4c:	3307      	adds	r3, #7
 8009f4e:	f023 0307 	bic.w	r3, r3, #7
 8009f52:	3308      	adds	r3, #8
 8009f54:	9303      	str	r3, [sp, #12]
 8009f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f58:	443b      	add	r3, r7
 8009f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f5c:	e76a      	b.n	8009e34 <_vfiprintf_r+0x78>
 8009f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f62:	460c      	mov	r4, r1
 8009f64:	2001      	movs	r0, #1
 8009f66:	e7a8      	b.n	8009eba <_vfiprintf_r+0xfe>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	3401      	adds	r4, #1
 8009f6c:	9305      	str	r3, [sp, #20]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	f04f 0c0a 	mov.w	ip, #10
 8009f74:	4620      	mov	r0, r4
 8009f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f7a:	3a30      	subs	r2, #48	@ 0x30
 8009f7c:	2a09      	cmp	r2, #9
 8009f7e:	d903      	bls.n	8009f88 <_vfiprintf_r+0x1cc>
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d0c6      	beq.n	8009f12 <_vfiprintf_r+0x156>
 8009f84:	9105      	str	r1, [sp, #20]
 8009f86:	e7c4      	b.n	8009f12 <_vfiprintf_r+0x156>
 8009f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e7f0      	b.n	8009f74 <_vfiprintf_r+0x1b8>
 8009f92:	ab03      	add	r3, sp, #12
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	462a      	mov	r2, r5
 8009f98:	4b12      	ldr	r3, [pc, #72]	@ (8009fe4 <_vfiprintf_r+0x228>)
 8009f9a:	a904      	add	r1, sp, #16
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f7fd fbdb 	bl	8007758 <_printf_float>
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	1c78      	adds	r0, r7, #1
 8009fa6:	d1d6      	bne.n	8009f56 <_vfiprintf_r+0x19a>
 8009fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009faa:	07d9      	lsls	r1, r3, #31
 8009fac:	d405      	bmi.n	8009fba <_vfiprintf_r+0x1fe>
 8009fae:	89ab      	ldrh	r3, [r5, #12]
 8009fb0:	059a      	lsls	r2, r3, #22
 8009fb2:	d402      	bmi.n	8009fba <_vfiprintf_r+0x1fe>
 8009fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fb6:	f7fe f92b 	bl	8008210 <__retarget_lock_release_recursive>
 8009fba:	89ab      	ldrh	r3, [r5, #12]
 8009fbc:	065b      	lsls	r3, r3, #25
 8009fbe:	f53f af1f 	bmi.w	8009e00 <_vfiprintf_r+0x44>
 8009fc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fc4:	e71e      	b.n	8009e04 <_vfiprintf_r+0x48>
 8009fc6:	ab03      	add	r3, sp, #12
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	462a      	mov	r2, r5
 8009fcc:	4b05      	ldr	r3, [pc, #20]	@ (8009fe4 <_vfiprintf_r+0x228>)
 8009fce:	a904      	add	r1, sp, #16
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7fd fe59 	bl	8007c88 <_printf_i>
 8009fd6:	e7e4      	b.n	8009fa2 <_vfiprintf_r+0x1e6>
 8009fd8:	0800ada0 	.word	0x0800ada0
 8009fdc:	0800adaa 	.word	0x0800adaa
 8009fe0:	08007759 	.word	0x08007759
 8009fe4:	08009d99 	.word	0x08009d99
 8009fe8:	0800ada6 	.word	0x0800ada6

08009fec <__swbuf_r>:
 8009fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fee:	460e      	mov	r6, r1
 8009ff0:	4614      	mov	r4, r2
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	b118      	cbz	r0, 8009ffe <__swbuf_r+0x12>
 8009ff6:	6a03      	ldr	r3, [r0, #32]
 8009ff8:	b90b      	cbnz	r3, 8009ffe <__swbuf_r+0x12>
 8009ffa:	f7fd fff1 	bl	8007fe0 <__sinit>
 8009ffe:	69a3      	ldr	r3, [r4, #24]
 800a000:	60a3      	str	r3, [r4, #8]
 800a002:	89a3      	ldrh	r3, [r4, #12]
 800a004:	071a      	lsls	r2, r3, #28
 800a006:	d501      	bpl.n	800a00c <__swbuf_r+0x20>
 800a008:	6923      	ldr	r3, [r4, #16]
 800a00a:	b943      	cbnz	r3, 800a01e <__swbuf_r+0x32>
 800a00c:	4621      	mov	r1, r4
 800a00e:	4628      	mov	r0, r5
 800a010:	f000 f82a 	bl	800a068 <__swsetup_r>
 800a014:	b118      	cbz	r0, 800a01e <__swbuf_r+0x32>
 800a016:	f04f 37ff 	mov.w	r7, #4294967295
 800a01a:	4638      	mov	r0, r7
 800a01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	6922      	ldr	r2, [r4, #16]
 800a022:	1a98      	subs	r0, r3, r2
 800a024:	6963      	ldr	r3, [r4, #20]
 800a026:	b2f6      	uxtb	r6, r6
 800a028:	4283      	cmp	r3, r0
 800a02a:	4637      	mov	r7, r6
 800a02c:	dc05      	bgt.n	800a03a <__swbuf_r+0x4e>
 800a02e:	4621      	mov	r1, r4
 800a030:	4628      	mov	r0, r5
 800a032:	f7ff fda7 	bl	8009b84 <_fflush_r>
 800a036:	2800      	cmp	r0, #0
 800a038:	d1ed      	bne.n	800a016 <__swbuf_r+0x2a>
 800a03a:	68a3      	ldr	r3, [r4, #8]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	60a3      	str	r3, [r4, #8]
 800a040:	6823      	ldr	r3, [r4, #0]
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	6022      	str	r2, [r4, #0]
 800a046:	701e      	strb	r6, [r3, #0]
 800a048:	6962      	ldr	r2, [r4, #20]
 800a04a:	1c43      	adds	r3, r0, #1
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d004      	beq.n	800a05a <__swbuf_r+0x6e>
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	07db      	lsls	r3, r3, #31
 800a054:	d5e1      	bpl.n	800a01a <__swbuf_r+0x2e>
 800a056:	2e0a      	cmp	r6, #10
 800a058:	d1df      	bne.n	800a01a <__swbuf_r+0x2e>
 800a05a:	4621      	mov	r1, r4
 800a05c:	4628      	mov	r0, r5
 800a05e:	f7ff fd91 	bl	8009b84 <_fflush_r>
 800a062:	2800      	cmp	r0, #0
 800a064:	d0d9      	beq.n	800a01a <__swbuf_r+0x2e>
 800a066:	e7d6      	b.n	800a016 <__swbuf_r+0x2a>

0800a068 <__swsetup_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4b29      	ldr	r3, [pc, #164]	@ (800a110 <__swsetup_r+0xa8>)
 800a06c:	4605      	mov	r5, r0
 800a06e:	6818      	ldr	r0, [r3, #0]
 800a070:	460c      	mov	r4, r1
 800a072:	b118      	cbz	r0, 800a07c <__swsetup_r+0x14>
 800a074:	6a03      	ldr	r3, [r0, #32]
 800a076:	b90b      	cbnz	r3, 800a07c <__swsetup_r+0x14>
 800a078:	f7fd ffb2 	bl	8007fe0 <__sinit>
 800a07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a080:	0719      	lsls	r1, r3, #28
 800a082:	d422      	bmi.n	800a0ca <__swsetup_r+0x62>
 800a084:	06da      	lsls	r2, r3, #27
 800a086:	d407      	bmi.n	800a098 <__swsetup_r+0x30>
 800a088:	2209      	movs	r2, #9
 800a08a:	602a      	str	r2, [r5, #0]
 800a08c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a090:	81a3      	strh	r3, [r4, #12]
 800a092:	f04f 30ff 	mov.w	r0, #4294967295
 800a096:	e033      	b.n	800a100 <__swsetup_r+0x98>
 800a098:	0758      	lsls	r0, r3, #29
 800a09a:	d512      	bpl.n	800a0c2 <__swsetup_r+0x5a>
 800a09c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a09e:	b141      	cbz	r1, 800a0b2 <__swsetup_r+0x4a>
 800a0a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0a4:	4299      	cmp	r1, r3
 800a0a6:	d002      	beq.n	800a0ae <__swsetup_r+0x46>
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f7fe ff0d 	bl	8008ec8 <_free_r>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	6063      	str	r3, [r4, #4]
 800a0be:	6923      	ldr	r3, [r4, #16]
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	f043 0308 	orr.w	r3, r3, #8
 800a0c8:	81a3      	strh	r3, [r4, #12]
 800a0ca:	6923      	ldr	r3, [r4, #16]
 800a0cc:	b94b      	cbnz	r3, 800a0e2 <__swsetup_r+0x7a>
 800a0ce:	89a3      	ldrh	r3, [r4, #12]
 800a0d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0d8:	d003      	beq.n	800a0e2 <__swsetup_r+0x7a>
 800a0da:	4621      	mov	r1, r4
 800a0dc:	4628      	mov	r0, r5
 800a0de:	f000 f883 	bl	800a1e8 <__smakebuf_r>
 800a0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0e6:	f013 0201 	ands.w	r2, r3, #1
 800a0ea:	d00a      	beq.n	800a102 <__swsetup_r+0x9a>
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	60a2      	str	r2, [r4, #8]
 800a0f0:	6962      	ldr	r2, [r4, #20]
 800a0f2:	4252      	negs	r2, r2
 800a0f4:	61a2      	str	r2, [r4, #24]
 800a0f6:	6922      	ldr	r2, [r4, #16]
 800a0f8:	b942      	cbnz	r2, 800a10c <__swsetup_r+0xa4>
 800a0fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a0fe:	d1c5      	bne.n	800a08c <__swsetup_r+0x24>
 800a100:	bd38      	pop	{r3, r4, r5, pc}
 800a102:	0799      	lsls	r1, r3, #30
 800a104:	bf58      	it	pl
 800a106:	6962      	ldrpl	r2, [r4, #20]
 800a108:	60a2      	str	r2, [r4, #8]
 800a10a:	e7f4      	b.n	800a0f6 <__swsetup_r+0x8e>
 800a10c:	2000      	movs	r0, #0
 800a10e:	e7f7      	b.n	800a100 <__swsetup_r+0x98>
 800a110:	200000bc 	.word	0x200000bc

0800a114 <_raise_r>:
 800a114:	291f      	cmp	r1, #31
 800a116:	b538      	push	{r3, r4, r5, lr}
 800a118:	4605      	mov	r5, r0
 800a11a:	460c      	mov	r4, r1
 800a11c:	d904      	bls.n	800a128 <_raise_r+0x14>
 800a11e:	2316      	movs	r3, #22
 800a120:	6003      	str	r3, [r0, #0]
 800a122:	f04f 30ff 	mov.w	r0, #4294967295
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a12a:	b112      	cbz	r2, 800a132 <_raise_r+0x1e>
 800a12c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a130:	b94b      	cbnz	r3, 800a146 <_raise_r+0x32>
 800a132:	4628      	mov	r0, r5
 800a134:	f000 f830 	bl	800a198 <_getpid_r>
 800a138:	4622      	mov	r2, r4
 800a13a:	4601      	mov	r1, r0
 800a13c:	4628      	mov	r0, r5
 800a13e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a142:	f000 b817 	b.w	800a174 <_kill_r>
 800a146:	2b01      	cmp	r3, #1
 800a148:	d00a      	beq.n	800a160 <_raise_r+0x4c>
 800a14a:	1c59      	adds	r1, r3, #1
 800a14c:	d103      	bne.n	800a156 <_raise_r+0x42>
 800a14e:	2316      	movs	r3, #22
 800a150:	6003      	str	r3, [r0, #0]
 800a152:	2001      	movs	r0, #1
 800a154:	e7e7      	b.n	800a126 <_raise_r+0x12>
 800a156:	2100      	movs	r1, #0
 800a158:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a15c:	4620      	mov	r0, r4
 800a15e:	4798      	blx	r3
 800a160:	2000      	movs	r0, #0
 800a162:	e7e0      	b.n	800a126 <_raise_r+0x12>

0800a164 <raise>:
 800a164:	4b02      	ldr	r3, [pc, #8]	@ (800a170 <raise+0xc>)
 800a166:	4601      	mov	r1, r0
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	f7ff bfd3 	b.w	800a114 <_raise_r>
 800a16e:	bf00      	nop
 800a170:	200000bc 	.word	0x200000bc

0800a174 <_kill_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	4d07      	ldr	r5, [pc, #28]	@ (800a194 <_kill_r+0x20>)
 800a178:	2300      	movs	r3, #0
 800a17a:	4604      	mov	r4, r0
 800a17c:	4608      	mov	r0, r1
 800a17e:	4611      	mov	r1, r2
 800a180:	602b      	str	r3, [r5, #0]
 800a182:	f7f7 ff33 	bl	8001fec <_kill>
 800a186:	1c43      	adds	r3, r0, #1
 800a188:	d102      	bne.n	800a190 <_kill_r+0x1c>
 800a18a:	682b      	ldr	r3, [r5, #0]
 800a18c:	b103      	cbz	r3, 800a190 <_kill_r+0x1c>
 800a18e:	6023      	str	r3, [r4, #0]
 800a190:	bd38      	pop	{r3, r4, r5, pc}
 800a192:	bf00      	nop
 800a194:	200026bc 	.word	0x200026bc

0800a198 <_getpid_r>:
 800a198:	f7f7 bf20 	b.w	8001fdc <_getpid>

0800a19c <__swhatbuf_r>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	460c      	mov	r4, r1
 800a1a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a4:	2900      	cmp	r1, #0
 800a1a6:	b096      	sub	sp, #88	@ 0x58
 800a1a8:	4615      	mov	r5, r2
 800a1aa:	461e      	mov	r6, r3
 800a1ac:	da0d      	bge.n	800a1ca <__swhatbuf_r+0x2e>
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1b4:	f04f 0100 	mov.w	r1, #0
 800a1b8:	bf14      	ite	ne
 800a1ba:	2340      	movne	r3, #64	@ 0x40
 800a1bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	6031      	str	r1, [r6, #0]
 800a1c4:	602b      	str	r3, [r5, #0]
 800a1c6:	b016      	add	sp, #88	@ 0x58
 800a1c8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ca:	466a      	mov	r2, sp
 800a1cc:	f000 f848 	bl	800a260 <_fstat_r>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	dbec      	blt.n	800a1ae <__swhatbuf_r+0x12>
 800a1d4:	9901      	ldr	r1, [sp, #4]
 800a1d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1de:	4259      	negs	r1, r3
 800a1e0:	4159      	adcs	r1, r3
 800a1e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1e6:	e7eb      	b.n	800a1c0 <__swhatbuf_r+0x24>

0800a1e8 <__smakebuf_r>:
 800a1e8:	898b      	ldrh	r3, [r1, #12]
 800a1ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1ec:	079d      	lsls	r5, r3, #30
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	d507      	bpl.n	800a204 <__smakebuf_r+0x1c>
 800a1f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a1f8:	6023      	str	r3, [r4, #0]
 800a1fa:	6123      	str	r3, [r4, #16]
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	6163      	str	r3, [r4, #20]
 800a200:	b003      	add	sp, #12
 800a202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a204:	ab01      	add	r3, sp, #4
 800a206:	466a      	mov	r2, sp
 800a208:	f7ff ffc8 	bl	800a19c <__swhatbuf_r>
 800a20c:	9f00      	ldr	r7, [sp, #0]
 800a20e:	4605      	mov	r5, r0
 800a210:	4639      	mov	r1, r7
 800a212:	4630      	mov	r0, r6
 800a214:	f7fe fecc 	bl	8008fb0 <_malloc_r>
 800a218:	b948      	cbnz	r0, 800a22e <__smakebuf_r+0x46>
 800a21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a21e:	059a      	lsls	r2, r3, #22
 800a220:	d4ee      	bmi.n	800a200 <__smakebuf_r+0x18>
 800a222:	f023 0303 	bic.w	r3, r3, #3
 800a226:	f043 0302 	orr.w	r3, r3, #2
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	e7e2      	b.n	800a1f4 <__smakebuf_r+0xc>
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	6020      	str	r0, [r4, #0]
 800a232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a236:	81a3      	strh	r3, [r4, #12]
 800a238:	9b01      	ldr	r3, [sp, #4]
 800a23a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a23e:	b15b      	cbz	r3, 800a258 <__smakebuf_r+0x70>
 800a240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a244:	4630      	mov	r0, r6
 800a246:	f000 f81d 	bl	800a284 <_isatty_r>
 800a24a:	b128      	cbz	r0, 800a258 <__smakebuf_r+0x70>
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	f023 0303 	bic.w	r3, r3, #3
 800a252:	f043 0301 	orr.w	r3, r3, #1
 800a256:	81a3      	strh	r3, [r4, #12]
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	431d      	orrs	r5, r3
 800a25c:	81a5      	strh	r5, [r4, #12]
 800a25e:	e7cf      	b.n	800a200 <__smakebuf_r+0x18>

0800a260 <_fstat_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4d07      	ldr	r5, [pc, #28]	@ (800a280 <_fstat_r+0x20>)
 800a264:	2300      	movs	r3, #0
 800a266:	4604      	mov	r4, r0
 800a268:	4608      	mov	r0, r1
 800a26a:	4611      	mov	r1, r2
 800a26c:	602b      	str	r3, [r5, #0]
 800a26e:	f7f7 ff1d 	bl	80020ac <_fstat>
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	d102      	bne.n	800a27c <_fstat_r+0x1c>
 800a276:	682b      	ldr	r3, [r5, #0]
 800a278:	b103      	cbz	r3, 800a27c <_fstat_r+0x1c>
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	bd38      	pop	{r3, r4, r5, pc}
 800a27e:	bf00      	nop
 800a280:	200026bc 	.word	0x200026bc

0800a284 <_isatty_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d06      	ldr	r5, [pc, #24]	@ (800a2a0 <_isatty_r+0x1c>)
 800a288:	2300      	movs	r3, #0
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	f7f7 ff1c 	bl	80020cc <_isatty>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_isatty_r+0x1a>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_isatty_r+0x1a>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	200026bc 	.word	0x200026bc

0800a2a4 <_init>:
 800a2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a6:	bf00      	nop
 800a2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2aa:	bc08      	pop	{r3}
 800a2ac:	469e      	mov	lr, r3
 800a2ae:	4770      	bx	lr

0800a2b0 <_fini>:
 800a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b2:	bf00      	nop
 800a2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b6:	bc08      	pop	{r3}
 800a2b8:	469e      	mov	lr, r3
 800a2ba:	4770      	bx	lr
